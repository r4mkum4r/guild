/*! Hammer.JS - v2.0.8 - 2016-04-23
 * http://hammerjs.github.io/
 *
 * Copyright (c) 2016 Jorik Tangelder;
 * Licensed under the MIT license */
(function(window, document, exportName, undefined) {
    'use strict';

    var VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];
    var TEST_ELEMENT = document.createElement('div');

    var TYPE_FUNCTION = 'function';

    var round = Math.round;
    var abs = Math.abs;
    var now = Date.now;

    /**
     * set a timeout with a given scope
     * @param {Function} fn
     * @param {Number} timeout
     * @param {Object} context
     * @returns {number}
     */
    function setTimeoutContext(fn, timeout, context) {
        return setTimeout(bindFn(fn, context), timeout);
    }

    /**
     * if the argument is an array, we want to execute the fn on each entry
     * if it aint an array we don't want to do a thing.
     * this is used by all the methods that accept a single and array argument.
     * @param {*|Array} arg
     * @param {String} fn
     * @param {Object} [context]
     * @returns {Boolean}
     */
    function invokeArrayArg(arg, fn, context) {
        if (Array.isArray(arg)) {
            each(arg, context[fn], context);
            return true;
        }
        return false;
    }

    /**
     * walk objects and arrays
     * @param {Object} obj
     * @param {Function} iterator
     * @param {Object} context
     */
    function each(obj, iterator, context) {
        var i;

        if (!obj) {
            return;
        }

        if (obj.forEach) {
            obj.forEach(iterator, context);
        } else if (obj.length !== undefined) {
            i = 0;
            while (i < obj.length) {
                iterator.call(context, obj[i], i, obj);
                i++;
            }
        } else {
            for (i in obj) {
                obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);
            }
        }
    }

    /**
     * wrap a method with a deprecation warning and stack trace
     * @param {Function} method
     * @param {String} name
     * @param {String} message
     * @returns {Function} A new function wrapping the supplied method.
     */
    function deprecate(method, name, message) {
        var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\n' + message + ' AT \n';
        return function() {
            var e = new Error('get-stack-trace');
            var stack = e && e.stack ? e.stack.replace(/^[^\(]+?[\n$]/gm, '')
                .replace(/^\s+at\s+/gm, '')
                .replace(/^Object.<anonymous>\s*\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';

            var log = window.console && (window.console.warn || window.console.log);
            if (log) {
                log.call(window.console, deprecationMessage, stack);
            }
            return method.apply(this, arguments);
        };
    }

    /**
     * extend object.
     * means that properties in dest will be overwritten by the ones in src.
     * @param {Object} target
     * @param {...Object} objects_to_assign
     * @returns {Object} target
     */
    var assign;
    if (typeof Object.assign !== 'function') {
        assign = function assign(target) {
            if (target === undefined || target === null) {
                throw new TypeError('Cannot convert undefined or null to object');
            }

            var output = Object(target);
            for (var index = 1; index < arguments.length; index++) {
                var source = arguments[index];
                if (source !== undefined && source !== null) {
                    for (var nextKey in source) {
                        if (source.hasOwnProperty(nextKey)) {
                            output[nextKey] = source[nextKey];
                        }
                    }
                }
            }
            return output;
        };
    } else {
        assign = Object.assign;
    }

    /**
     * extend object.
     * means that properties in dest will be overwritten by the ones in src.
     * @param {Object} dest
     * @param {Object} src
     * @param {Boolean} [merge=false]
     * @returns {Object} dest
     */
    var extend = deprecate(function extend(dest, src, merge) {
        var keys = Object.keys(src);
        var i = 0;
        while (i < keys.length) {
            if (!merge || (merge && dest[keys[i]] === undefined)) {
                dest[keys[i]] = src[keys[i]];
            }
            i++;
        }
        return dest;
    }, 'extend', 'Use `assign`.');

    /**
     * merge the values from src in the dest.
     * means that properties that exist in dest will not be overwritten by src
     * @param {Object} dest
     * @param {Object} src
     * @returns {Object} dest
     */
    var merge = deprecate(function merge(dest, src) {
        return extend(dest, src, true);
    }, 'merge', 'Use `assign`.');

    /**
     * simple class inheritance
     * @param {Function} child
     * @param {Function} base
     * @param {Object} [properties]
     */
    function inherit(child, base, properties) {
        var baseP = base.prototype,
            childP;

        childP = child.prototype = Object.create(baseP);
        childP.constructor = child;
        childP._super = baseP;

        if (properties) {
            assign(childP, properties);
        }
    }

    /**
     * simple function bind
     * @param {Function} fn
     * @param {Object} context
     * @returns {Function}
     */
    function bindFn(fn, context) {
        return function boundFn() {
            return fn.apply(context, arguments);
        };
    }

    /**
     * let a boolean value also be a function that must return a boolean
     * this first item in args will be used as the context
     * @param {Boolean|Function} val
     * @param {Array} [args]
     * @returns {Boolean}
     */
    function boolOrFn(val, args) {
        if (typeof val == TYPE_FUNCTION) {
            return val.apply(args ? args[0] || undefined : undefined, args);
        }
        return val;
    }

    /**
     * use the val2 when val1 is undefined
     * @param {*} val1
     * @param {*} val2
     * @returns {*}
     */
    function ifUndefined(val1, val2) {
        return (val1 === undefined) ? val2 : val1;
    }

    /**
     * addEventListener with multiple events at once
     * @param {EventTarget} target
     * @param {String} types
     * @param {Function} handler
     */
    function addEventListeners(target, types, handler) {
        each(splitStr(types), function(type) {
            target.addEventListener(type, handler, false);
        });
    }

    /**
     * removeEventListener with multiple events at once
     * @param {EventTarget} target
     * @param {String} types
     * @param {Function} handler
     */
    function removeEventListeners(target, types, handler) {
        each(splitStr(types), function(type) {
            target.removeEventListener(type, handler, false);
        });
    }

    /**
     * find if a node is in the given parent
     * @method hasParent
     * @param {HTMLElement} node
     * @param {HTMLElement} parent
     * @return {Boolean} found
     */
    function hasParent(node, parent) {
        while (node) {
            if (node == parent) {
                return true;
            }
            node = node.parentNode;
        }
        return false;
    }

    /**
     * small indexOf wrapper
     * @param {String} str
     * @param {String} find
     * @returns {Boolean} found
     */
    function inStr(str, find) {
        return str.indexOf(find) > -1;
    }

    /**
     * split string on whitespace
     * @param {String} str
     * @returns {Array} words
     */
    function splitStr(str) {
        return str.trim().split(/\s+/g);
    }

    /**
     * find if a array contains the object using indexOf or a simple polyFill
     * @param {Array} src
     * @param {String} find
     * @param {String} [findByKey]
     * @return {Boolean|Number} false when not found, or the index
     */
    function inArray(src, find, findByKey) {
        if (src.indexOf && !findByKey) {
            return src.indexOf(find);
        } else {
            var i = 0;
            while (i < src.length) {
                if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {
                    return i;
                }
                i++;
            }
            return -1;
        }
    }

    /**
     * convert array-like objects to real arrays
     * @param {Object} obj
     * @returns {Array}
     */
    function toArray(obj) {
        return Array.prototype.slice.call(obj, 0);
    }

    /**
     * unique array with objects based on a key (like 'id') or just by the array's value
     * @param {Array} src [{id:1},{id:2},{id:1}]
     * @param {String} [key]
     * @param {Boolean} [sort=False]
     * @returns {Array} [{id:1},{id:2}]
     */
    function uniqueArray(src, key, sort) {
        var results = [];
        var values = [];
        var i = 0;

        while (i < src.length) {
            var val = key ? src[i][key] : src[i];
            if (inArray(values, val) < 0) {
                results.push(src[i]);
            }
            values[i] = val;
            i++;
        }

        if (sort) {
            if (!key) {
                results = results.sort();
            } else {
                results = results.sort(function sortUniqueArray(a, b) {
                    return a[key] > b[key];
                });
            }
        }

        return results;
    }

    /**
     * get the prefixed property
     * @param {Object} obj
     * @param {String} property
     * @returns {String|Undefined} prefixed
     */
    function prefixed(obj, property) {
        var prefix, prop;
        var camelProp = property[0].toUpperCase() + property.slice(1);

        var i = 0;
        while (i < VENDOR_PREFIXES.length) {
            prefix = VENDOR_PREFIXES[i];
            prop = (prefix) ? prefix + camelProp : property;

            if (prop in obj) {
                return prop;
            }
            i++;
        }
        return undefined;
    }

    /**
     * get a unique id
     * @returns {number} uniqueId
     */
    var _uniqueId = 1;
    function uniqueId() {
        return _uniqueId++;
    }

    /**
     * get the window object of an element
     * @param {HTMLElement} element
     * @returns {DocumentView|Window}
     */
    function getWindowForElement(element) {
        var doc = element.ownerDocument || element;
        return (doc.defaultView || doc.parentWindow || window);
    }

    var MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;

    var SUPPORT_TOUCH = ('ontouchstart' in window);
    var SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;
    var SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);

    var INPUT_TYPE_TOUCH = 'touch';
    var INPUT_TYPE_PEN = 'pen';
    var INPUT_TYPE_MOUSE = 'mouse';
    var INPUT_TYPE_KINECT = 'kinect';

    var COMPUTE_INTERVAL = 25;

    var INPUT_START = 1;
    var INPUT_MOVE = 2;
    var INPUT_END = 4;
    var INPUT_CANCEL = 8;

    var DIRECTION_NONE = 1;
    var DIRECTION_LEFT = 2;
    var DIRECTION_RIGHT = 4;
    var DIRECTION_UP = 8;
    var DIRECTION_DOWN = 16;

    var DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;
    var DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;
    var DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;

    var PROPS_XY = ['x', 'y'];
    var PROPS_CLIENT_XY = ['clientX', 'clientY'];

    /**
     * create new input type manager
     * @param {Manager} manager
     * @param {Function} callback
     * @returns {Input}
     * @constructor
     */
    function Input(manager, callback) {
        var self = this;
        this.manager = manager;
        this.callback = callback;
        this.element = manager.element;
        this.target = manager.options.inputTarget;

        // smaller wrapper around the handler, for the scope and the enabled state of the manager,
        // so when disabled the input events are completely bypassed.
        this.domHandler = function(ev) {
            if (boolOrFn(manager.options.enable, [manager])) {
                self.handler(ev);
            }
        };

        this.init();

    }

    Input.prototype = {
        /**
         * should handle the inputEvent data and trigger the callback
         * @virtual
         */
        handler: function() { },

        /**
         * bind the events
         */
        init: function() {
            this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);
            this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);
            this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
        },

        /**
         * unbind the events
         */
        destroy: function() {
            this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);
            this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);
            this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
        }
    };

    /**
     * create new input type manager
     * called by the Manager constructor
     * @param {Hammer} manager
     * @returns {Input}
     */
    function createInputInstance(manager) {
        var Type;
        var inputClass = manager.options.inputClass;

        if (inputClass) {
            Type = inputClass;
        } else if (SUPPORT_POINTER_EVENTS) {
            Type = PointerEventInput;
        } else if (SUPPORT_ONLY_TOUCH) {
            Type = TouchInput;
        } else if (!SUPPORT_TOUCH) {
            Type = MouseInput;
        } else {
            Type = TouchMouseInput;
        }
        return new (Type)(manager, inputHandler);
    }

    /**
     * handle input events
     * @param {Manager} manager
     * @param {String} eventType
     * @param {Object} input
     */
    function inputHandler(manager, eventType, input) {
        var pointersLen = input.pointers.length;
        var changedPointersLen = input.changedPointers.length;
        var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));
        var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));

        input.isFirst = !!isFirst;
        input.isFinal = !!isFinal;

        if (isFirst) {
            manager.session = {};
        }

        // source event is the normalized value of the domEvents
        // like 'touchstart, mouseup, pointerdown'
        input.eventType = eventType;

        // compute scale, rotation etc
        computeInputData(manager, input);

        // emit secret event
        manager.emit('hammer.input', input);

        manager.recognize(input);
        manager.session.prevInput = input;
    }

    /**
     * extend the data with some usable properties like scale, rotate, velocity etc
     * @param {Object} manager
     * @param {Object} input
     */
    function computeInputData(manager, input) {
        var session = manager.session;
        var pointers = input.pointers;
        var pointersLength = pointers.length;

        // store the first input to calculate the distance and direction
        if (!session.firstInput) {
            session.firstInput = simpleCloneInputData(input);
        }

        // to compute scale and rotation we need to store the multiple touches
        if (pointersLength > 1 && !session.firstMultiple) {
            session.firstMultiple = simpleCloneInputData(input);
        } else if (pointersLength === 1) {
            session.firstMultiple = false;
        }

        var firstInput = session.firstInput;
        var firstMultiple = session.firstMultiple;
        var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;

        var center = input.center = getCenter(pointers);
        input.timeStamp = now();
        input.deltaTime = input.timeStamp - firstInput.timeStamp;

        input.angle = getAngle(offsetCenter, center);
        input.distance = getDistance(offsetCenter, center);

        computeDeltaXY(session, input);
        input.offsetDirection = getDirection(input.deltaX, input.deltaY);

        var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);
        input.overallVelocityX = overallVelocity.x;
        input.overallVelocityY = overallVelocity.y;
        input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;

        input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;
        input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;

        input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >
        session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);

        computeIntervalInputData(session, input);

        // find the correct target
        var target = manager.element;
        if (hasParent(input.srcEvent.target, target)) {
            target = input.srcEvent.target;
        }
        input.target = target;
    }

    function computeDeltaXY(session, input) {
        var center = input.center;
        var offset = session.offsetDelta || {};
        var prevDelta = session.prevDelta || {};
        var prevInput = session.prevInput || {};

        if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {
            prevDelta = session.prevDelta = {
                x: prevInput.deltaX || 0,
                y: prevInput.deltaY || 0
            };

            offset = session.offsetDelta = {
                x: center.x,
                y: center.y
            };
        }

        input.deltaX = prevDelta.x + (center.x - offset.x);
        input.deltaY = prevDelta.y + (center.y - offset.y);
    }

    /**
     * velocity is calculated every x ms
     * @param {Object} session
     * @param {Object} input
     */
    function computeIntervalInputData(session, input) {
        var last = session.lastInterval || input,
            deltaTime = input.timeStamp - last.timeStamp,
            velocity, velocityX, velocityY, direction;

        if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {
            var deltaX = input.deltaX - last.deltaX;
            var deltaY = input.deltaY - last.deltaY;

            var v = getVelocity(deltaTime, deltaX, deltaY);
            velocityX = v.x;
            velocityY = v.y;
            velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;
            direction = getDirection(deltaX, deltaY);

            session.lastInterval = input;
        } else {
            // use latest velocity info if it doesn't overtake a minimum period
            velocity = last.velocity;
            velocityX = last.velocityX;
            velocityY = last.velocityY;
            direction = last.direction;
        }

        input.velocity = velocity;
        input.velocityX = velocityX;
        input.velocityY = velocityY;
        input.direction = direction;
    }

    /**
     * create a simple clone from the input used for storage of firstInput and firstMultiple
     * @param {Object} input
     * @returns {Object} clonedInputData
     */
    function simpleCloneInputData(input) {
        // make a simple copy of the pointers because we will get a reference if we don't
        // we only need clientXY for the calculations
        var pointers = [];
        var i = 0;
        while (i < input.pointers.length) {
            pointers[i] = {
                clientX: round(input.pointers[i].clientX),
                clientY: round(input.pointers[i].clientY)
            };
            i++;
        }

        return {
            timeStamp: now(),
            pointers: pointers,
            center: getCenter(pointers),
            deltaX: input.deltaX,
            deltaY: input.deltaY
        };
    }

    /**
     * get the center of all the pointers
     * @param {Array} pointers
     * @return {Object} center contains `x` and `y` properties
     */
    function getCenter(pointers) {
        var pointersLength = pointers.length;

        // no need to loop when only one touch
        if (pointersLength === 1) {
            return {
                x: round(pointers[0].clientX),
                y: round(pointers[0].clientY)
            };
        }

        var x = 0, y = 0, i = 0;
        while (i < pointersLength) {
            x += pointers[i].clientX;
            y += pointers[i].clientY;
            i++;
        }

        return {
            x: round(x / pointersLength),
            y: round(y / pointersLength)
        };
    }

    /**
     * calculate the velocity between two points. unit is in px per ms.
     * @param {Number} deltaTime
     * @param {Number} x
     * @param {Number} y
     * @return {Object} velocity `x` and `y`
     */
    function getVelocity(deltaTime, x, y) {
        return {
            x: x / deltaTime || 0,
            y: y / deltaTime || 0
        };
    }

    /**
     * get the direction between two points
     * @param {Number} x
     * @param {Number} y
     * @return {Number} direction
     */
    function getDirection(x, y) {
        if (x === y) {
            return DIRECTION_NONE;
        }

        if (abs(x) >= abs(y)) {
            return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
        }
        return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
    }

    /**
     * calculate the absolute distance between two points
     * @param {Object} p1 {x, y}
     * @param {Object} p2 {x, y}
     * @param {Array} [props] containing x and y keys
     * @return {Number} distance
     */
    function getDistance(p1, p2, props) {
        if (!props) {
            props = PROPS_XY;
        }
        var x = p2[props[0]] - p1[props[0]],
            y = p2[props[1]] - p1[props[1]];

        return Math.sqrt((x * x) + (y * y));
    }

    /**
     * calculate the angle between two coordinates
     * @param {Object} p1
     * @param {Object} p2
     * @param {Array} [props] containing x and y keys
     * @return {Number} angle
     */
    function getAngle(p1, p2, props) {
        if (!props) {
            props = PROPS_XY;
        }
        var x = p2[props[0]] - p1[props[0]],
            y = p2[props[1]] - p1[props[1]];
        return Math.atan2(y, x) * 180 / Math.PI;
    }

    /**
     * calculate the rotation degrees between two pointersets
     * @param {Array} start array of pointers
     * @param {Array} end array of pointers
     * @return {Number} rotation
     */
    function getRotation(start, end) {
        return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);
    }

    /**
     * calculate the scale factor between two pointersets
     * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out
     * @param {Array} start array of pointers
     * @param {Array} end array of pointers
     * @return {Number} scale
     */
    function getScale(start, end) {
        return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);
    }

    var MOUSE_INPUT_MAP = {
        mousedown: INPUT_START,
        mousemove: INPUT_MOVE,
        mouseup: INPUT_END
    };

    var MOUSE_ELEMENT_EVENTS = 'mousedown';
    var MOUSE_WINDOW_EVENTS = 'mousemove mouseup';

    /**
     * Mouse events input
     * @constructor
     * @extends Input
     */
    function MouseInput() {
        this.evEl = MOUSE_ELEMENT_EVENTS;
        this.evWin = MOUSE_WINDOW_EVENTS;

        this.pressed = false; // mousedown state

        Input.apply(this, arguments);
    }

    inherit(MouseInput, Input, {
        /**
         * handle mouse events
         * @param {Object} ev
         */
        handler: function MEhandler(ev) {
            var eventType = MOUSE_INPUT_MAP[ev.type];

            // on start we want to have the left mouse button down
            if (eventType & INPUT_START && ev.button === 0) {
                this.pressed = true;
            }

            if (eventType & INPUT_MOVE && ev.which !== 1) {
                eventType = INPUT_END;
            }

            // mouse must be down
            if (!this.pressed) {
                return;
            }

            if (eventType & INPUT_END) {
                this.pressed = false;
            }

            this.callback(this.manager, eventType, {
                pointers: [ev],
                changedPointers: [ev],
                pointerType: INPUT_TYPE_MOUSE,
                srcEvent: ev
            });
        }
    });

    var POINTER_INPUT_MAP = {
        pointerdown: INPUT_START,
        pointermove: INPUT_MOVE,
        pointerup: INPUT_END,
        pointercancel: INPUT_CANCEL,
        pointerout: INPUT_CANCEL
    };

// in IE10 the pointer types is defined as an enum
    var IE10_POINTER_TYPE_ENUM = {
        2: INPUT_TYPE_TOUCH,
        3: INPUT_TYPE_PEN,
        4: INPUT_TYPE_MOUSE,
        5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816
    };

    var POINTER_ELEMENT_EVENTS = 'pointerdown';
    var POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';

// IE10 has prefixed support, and case-sensitive
    if (window.MSPointerEvent && !window.PointerEvent) {
        POINTER_ELEMENT_EVENTS = 'MSPointerDown';
        POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';
    }

    /**
     * Pointer events input
     * @constructor
     * @extends Input
     */
    function PointerEventInput() {
        this.evEl = POINTER_ELEMENT_EVENTS;
        this.evWin = POINTER_WINDOW_EVENTS;

        Input.apply(this, arguments);

        this.store = (this.manager.session.pointerEvents = []);
    }

    inherit(PointerEventInput, Input, {
        /**
         * handle mouse events
         * @param {Object} ev
         */
        handler: function PEhandler(ev) {
            var store = this.store;
            var removePointer = false;

            var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');
            var eventType = POINTER_INPUT_MAP[eventTypeNormalized];
            var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;

            var isTouch = (pointerType == INPUT_TYPE_TOUCH);

            // get index of the event in the store
            var storeIndex = inArray(store, ev.pointerId, 'pointerId');

            // start and mouse must be down
            if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {
                if (storeIndex < 0) {
                    store.push(ev);
                    storeIndex = store.length - 1;
                }
            } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
                removePointer = true;
            }

            // it not found, so the pointer hasn't been down (so it's probably a hover)
            if (storeIndex < 0) {
                return;
            }

            // update the event in the store
            store[storeIndex] = ev;

            this.callback(this.manager, eventType, {
                pointers: store,
                changedPointers: [ev],
                pointerType: pointerType,
                srcEvent: ev
            });

            if (removePointer) {
                // remove from the store
                store.splice(storeIndex, 1);
            }
        }
    });

    var SINGLE_TOUCH_INPUT_MAP = {
        touchstart: INPUT_START,
        touchmove: INPUT_MOVE,
        touchend: INPUT_END,
        touchcancel: INPUT_CANCEL
    };

    var SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';
    var SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';

    /**
     * Touch events input
     * @constructor
     * @extends Input
     */
    function SingleTouchInput() {
        this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;
        this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;
        this.started = false;

        Input.apply(this, arguments);
    }

    inherit(SingleTouchInput, Input, {
        handler: function TEhandler(ev) {
            var type = SINGLE_TOUCH_INPUT_MAP[ev.type];

            // should we handle the touch events?
            if (type === INPUT_START) {
                this.started = true;
            }

            if (!this.started) {
                return;
            }

            var touches = normalizeSingleTouches.call(this, ev, type);

            // when done, reset the started state
            if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {
                this.started = false;
            }

            this.callback(this.manager, type, {
                pointers: touches[0],
                changedPointers: touches[1],
                pointerType: INPUT_TYPE_TOUCH,
                srcEvent: ev
            });
        }
    });

    /**
     * @this {TouchInput}
     * @param {Object} ev
     * @param {Number} type flag
     * @returns {undefined|Array} [all, changed]
     */
    function normalizeSingleTouches(ev, type) {
        var all = toArray(ev.touches);
        var changed = toArray(ev.changedTouches);

        if (type & (INPUT_END | INPUT_CANCEL)) {
            all = uniqueArray(all.concat(changed), 'identifier', true);
        }

        return [all, changed];
    }

    var TOUCH_INPUT_MAP = {
        touchstart: INPUT_START,
        touchmove: INPUT_MOVE,
        touchend: INPUT_END,
        touchcancel: INPUT_CANCEL
    };

    var TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';

    /**
     * Multi-user touch events input
     * @constructor
     * @extends Input
     */
    function TouchInput() {
        this.evTarget = TOUCH_TARGET_EVENTS;
        this.targetIds = {};

        Input.apply(this, arguments);
    }

    inherit(TouchInput, Input, {
        handler: function MTEhandler(ev) {
            var type = TOUCH_INPUT_MAP[ev.type];
            var touches = getTouches.call(this, ev, type);
            if (!touches) {
                return;
            }

            this.callback(this.manager, type, {
                pointers: touches[0],
                changedPointers: touches[1],
                pointerType: INPUT_TYPE_TOUCH,
                srcEvent: ev
            });
        }
    });

    /**
     * @this {TouchInput}
     * @param {Object} ev
     * @param {Number} type flag
     * @returns {undefined|Array} [all, changed]
     */
    function getTouches(ev, type) {
        var allTouches = toArray(ev.touches);
        var targetIds = this.targetIds;

        // when there is only one touch, the process can be simplified
        if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {
            targetIds[allTouches[0].identifier] = true;
            return [allTouches, allTouches];
        }

        var i,
            targetTouches,
            changedTouches = toArray(ev.changedTouches),
            changedTargetTouches = [],
            target = this.target;

        // get target touches from touches
        targetTouches = allTouches.filter(function(touch) {
            return hasParent(touch.target, target);
        });

        // collect touches
        if (type === INPUT_START) {
            i = 0;
            while (i < targetTouches.length) {
                targetIds[targetTouches[i].identifier] = true;
                i++;
            }
        }

        // filter changed touches to only contain touches that exist in the collected target ids
        i = 0;
        while (i < changedTouches.length) {
            if (targetIds[changedTouches[i].identifier]) {
                changedTargetTouches.push(changedTouches[i]);
            }

            // cleanup removed touches
            if (type & (INPUT_END | INPUT_CANCEL)) {
                delete targetIds[changedTouches[i].identifier];
            }
            i++;
        }

        if (!changedTargetTouches.length) {
            return;
        }

        return [
            // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'
            uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),
            changedTargetTouches
        ];
    }

    /**
     * Combined touch and mouse input
     *
     * Touch has a higher priority then mouse, and while touching no mouse events are allowed.
     * This because touch devices also emit mouse events while doing a touch.
     *
     * @constructor
     * @extends Input
     */

    var DEDUP_TIMEOUT = 2500;
    var DEDUP_DISTANCE = 25;

    function TouchMouseInput() {
        Input.apply(this, arguments);

        var handler = bindFn(this.handler, this);
        this.touch = new TouchInput(this.manager, handler);
        this.mouse = new MouseInput(this.manager, handler);

        this.primaryTouch = null;
        this.lastTouches = [];
    }

    inherit(TouchMouseInput, Input, {
        /**
         * handle mouse and touch events
         * @param {Hammer} manager
         * @param {String} inputEvent
         * @param {Object} inputData
         */
        handler: function TMEhandler(manager, inputEvent, inputData) {
            var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),
                isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);

            if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {
                return;
            }

            // when we're in a touch event, record touches to  de-dupe synthetic mouse event
            if (isTouch) {
                recordTouches.call(this, inputEvent, inputData);
            } else if (isMouse && isSyntheticEvent.call(this, inputData)) {
                return;
            }

            this.callback(manager, inputEvent, inputData);
        },

        /**
         * remove the event listeners
         */
        destroy: function destroy() {
            this.touch.destroy();
            this.mouse.destroy();
        }
    });

    function recordTouches(eventType, eventData) {
        if (eventType & INPUT_START) {
            this.primaryTouch = eventData.changedPointers[0].identifier;
            setLastTouch.call(this, eventData);
        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
            setLastTouch.call(this, eventData);
        }
    }

    function setLastTouch(eventData) {
        var touch = eventData.changedPointers[0];

        if (touch.identifier === this.primaryTouch) {
            var lastTouch = {x: touch.clientX, y: touch.clientY};
            this.lastTouches.push(lastTouch);
            var lts = this.lastTouches;
            var removeLastTouch = function() {
                var i = lts.indexOf(lastTouch);
                if (i > -1) {
                    lts.splice(i, 1);
                }
            };
            setTimeout(removeLastTouch, DEDUP_TIMEOUT);
        }
    }

    function isSyntheticEvent(eventData) {
        var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;
        for (var i = 0; i < this.lastTouches.length; i++) {
            var t = this.lastTouches[i];
            var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);
            if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {
                return true;
            }
        }
        return false;
    }

    var PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');
    var NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;

// magical touchAction value
    var TOUCH_ACTION_COMPUTE = 'compute';
    var TOUCH_ACTION_AUTO = 'auto';
    var TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented
    var TOUCH_ACTION_NONE = 'none';
    var TOUCH_ACTION_PAN_X = 'pan-x';
    var TOUCH_ACTION_PAN_Y = 'pan-y';
    var TOUCH_ACTION_MAP = getTouchActionProps();

    /**
     * Touch Action
     * sets the touchAction property or uses the js alternative
     * @param {Manager} manager
     * @param {String} value
     * @constructor
     */
    function TouchAction(manager, value) {
        this.manager = manager;
        this.set(value);
    }

    TouchAction.prototype = {
        /**
         * set the touchAction value on the element or enable the polyfill
         * @param {String} value
         */
        set: function(value) {
            // find out the touch-action by the event handlers
            if (value == TOUCH_ACTION_COMPUTE) {
                value = this.compute();
            }

            if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {
                this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;
            }
            this.actions = value.toLowerCase().trim();
        },

        /**
         * just re-set the touchAction value
         */
        update: function() {
            this.set(this.manager.options.touchAction);
        },

        /**
         * compute the value for the touchAction property based on the recognizer's settings
         * @returns {String} value
         */
        compute: function() {
            var actions = [];
            each(this.manager.recognizers, function(recognizer) {
                if (boolOrFn(recognizer.options.enable, [recognizer])) {
                    actions = actions.concat(recognizer.getTouchAction());
                }
            });
            return cleanTouchActions(actions.join(' '));
        },

        /**
         * this method is called on each input cycle and provides the preventing of the browser behavior
         * @param {Object} input
         */
        preventDefaults: function(input) {
            var srcEvent = input.srcEvent;
            var direction = input.offsetDirection;

            // if the touch action did prevented once this session
            if (this.manager.session.prevented) {
                srcEvent.preventDefault();
                return;
            }

            var actions = this.actions;
            var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];
            var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];
            var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];

            if (hasNone) {
                //do not prevent defaults if this is a tap gesture

                var isTapPointer = input.pointers.length === 1;
                var isTapMovement = input.distance < 2;
                var isTapTouchTime = input.deltaTime < 250;

                if (isTapPointer && isTapMovement && isTapTouchTime) {
                    return;
                }
            }

            if (hasPanX && hasPanY) {
                // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent
                return;
            }

            if (hasNone ||
                (hasPanY && direction & DIRECTION_HORIZONTAL) ||
                (hasPanX && direction & DIRECTION_VERTICAL)) {
                return this.preventSrc(srcEvent);
            }
        },

        /**
         * call preventDefault to prevent the browser's default behavior (scrolling in most cases)
         * @param {Object} srcEvent
         */
        preventSrc: function(srcEvent) {
            this.manager.session.prevented = true;
            srcEvent.preventDefault();
        }
    };

    /**
     * when the touchActions are collected they are not a valid value, so we need to clean things up. *
     * @param {String} actions
     * @returns {*}
     */
    function cleanTouchActions(actions) {
        // none
        if (inStr(actions, TOUCH_ACTION_NONE)) {
            return TOUCH_ACTION_NONE;
        }

        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);
        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);

        // if both pan-x and pan-y are set (different recognizers
        // for different directions, e.g. horizontal pan but vertical swipe?)
        // we need none (as otherwise with pan-x pan-y combined none of these
        // recognizers will work, since the browser would handle all panning
        if (hasPanX && hasPanY) {
            return TOUCH_ACTION_NONE;
        }

        // pan-x OR pan-y
        if (hasPanX || hasPanY) {
            return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;
        }

        // manipulation
        if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {
            return TOUCH_ACTION_MANIPULATION;
        }

        return TOUCH_ACTION_AUTO;
    }

    function getTouchActionProps() {
        if (!NATIVE_TOUCH_ACTION) {
            return false;
        }
        var touchMap = {};
        var cssSupports = window.CSS && window.CSS.supports;
        ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {

            // If css.supports is not supported but there is native touch-action assume it supports
            // all values. This is the case for IE 10 and 11.
            touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;
        });
        return touchMap;
    }

    /**
     * Recognizer flow explained; *
     * All recognizers have the initial state of POSSIBLE when a input session starts.
     * The definition of a input session is from the first input until the last input, with all it's movement in it. *
     * Example session for mouse-input: mousedown -> mousemove -> mouseup
     *
     * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed
     * which determines with state it should be.
     *
     * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to
     * POSSIBLE to give it another change on the next cycle.
     *
     *               Possible
     *                  |
     *            +-----+---------------+
     *            |                     |
     *      +-----+-----+               |
     *      |           |               |
     *   Failed      Cancelled          |
     *                          +-------+------+
     *                          |              |
     *                      Recognized       Began
     *                                         |
     *                                      Changed
     *                                         |
     *                                  Ended/Recognized
     */
    var STATE_POSSIBLE = 1;
    var STATE_BEGAN = 2;
    var STATE_CHANGED = 4;
    var STATE_ENDED = 8;
    var STATE_RECOGNIZED = STATE_ENDED;
    var STATE_CANCELLED = 16;
    var STATE_FAILED = 32;

    /**
     * Recognizer
     * Every recognizer needs to extend from this class.
     * @constructor
     * @param {Object} options
     */
    function Recognizer(options) {
        this.options = assign({}, this.defaults, options || {});

        this.id = uniqueId();

        this.manager = null;

        // default is enable true
        this.options.enable = ifUndefined(this.options.enable, true);

        this.state = STATE_POSSIBLE;

        this.simultaneous = {};
        this.requireFail = [];
    }

    Recognizer.prototype = {
        /**
         * @virtual
         * @type {Object}
         */
        defaults: {},

        /**
         * set options
         * @param {Object} options
         * @return {Recognizer}
         */
        set: function(options) {
            assign(this.options, options);

            // also update the touchAction, in case something changed about the directions/enabled state
            this.manager && this.manager.touchAction.update();
            return this;
        },

        /**
         * recognize simultaneous with an other recognizer.
         * @param {Recognizer} otherRecognizer
         * @returns {Recognizer} this
         */
        recognizeWith: function(otherRecognizer) {
            if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {
                return this;
            }

            var simultaneous = this.simultaneous;
            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
            if (!simultaneous[otherRecognizer.id]) {
                simultaneous[otherRecognizer.id] = otherRecognizer;
                otherRecognizer.recognizeWith(this);
            }
            return this;
        },

        /**
         * drop the simultaneous link. it doesnt remove the link on the other recognizer.
         * @param {Recognizer} otherRecognizer
         * @returns {Recognizer} this
         */
        dropRecognizeWith: function(otherRecognizer) {
            if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {
                return this;
            }

            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
            delete this.simultaneous[otherRecognizer.id];
            return this;
        },

        /**
         * recognizer can only run when an other is failing
         * @param {Recognizer} otherRecognizer
         * @returns {Recognizer} this
         */
        requireFailure: function(otherRecognizer) {
            if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {
                return this;
            }

            var requireFail = this.requireFail;
            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
            if (inArray(requireFail, otherRecognizer) === -1) {
                requireFail.push(otherRecognizer);
                otherRecognizer.requireFailure(this);
            }
            return this;
        },

        /**
         * drop the requireFailure link. it does not remove the link on the other recognizer.
         * @param {Recognizer} otherRecognizer
         * @returns {Recognizer} this
         */
        dropRequireFailure: function(otherRecognizer) {
            if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {
                return this;
            }

            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
            var index = inArray(this.requireFail, otherRecognizer);
            if (index > -1) {
                this.requireFail.splice(index, 1);
            }
            return this;
        },

        /**
         * has require failures boolean
         * @returns {boolean}
         */
        hasRequireFailures: function() {
            return this.requireFail.length > 0;
        },

        /**
         * if the recognizer can recognize simultaneous with an other recognizer
         * @param {Recognizer} otherRecognizer
         * @returns {Boolean}
         */
        canRecognizeWith: function(otherRecognizer) {
            return !!this.simultaneous[otherRecognizer.id];
        },

        /**
         * You should use `tryEmit` instead of `emit` directly to check
         * that all the needed recognizers has failed before emitting.
         * @param {Object} input
         */
        emit: function(input) {
            var self = this;
            var state = this.state;

            function emit(event) {
                self.manager.emit(event, input);
            }

            // 'panstart' and 'panmove'
            if (state < STATE_ENDED) {
                emit(self.options.event + stateStr(state));
            }

            emit(self.options.event); // simple 'eventName' events

            if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)
                emit(input.additionalEvent);
            }

            // panend and pancancel
            if (state >= STATE_ENDED) {
                emit(self.options.event + stateStr(state));
            }
        },

        /**
         * Check that all the require failure recognizers has failed,
         * if true, it emits a gesture event,
         * otherwise, setup the state to FAILED.
         * @param {Object} input
         */
        tryEmit: function(input) {
            if (this.canEmit()) {
                return this.emit(input);
            }
            // it's failing anyway
            this.state = STATE_FAILED;
        },

        /**
         * can we emit?
         * @returns {boolean}
         */
        canEmit: function() {
            var i = 0;
            while (i < this.requireFail.length) {
                if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {
                    return false;
                }
                i++;
            }
            return true;
        },

        /**
         * update the recognizer
         * @param {Object} inputData
         */
        recognize: function(inputData) {
            // make a new copy of the inputData
            // so we can change the inputData without messing up the other recognizers
            var inputDataClone = assign({}, inputData);

            // is is enabled and allow recognizing?
            if (!boolOrFn(this.options.enable, [this, inputDataClone])) {
                this.reset();
                this.state = STATE_FAILED;
                return;
            }

            // reset when we've reached the end
            if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {
                this.state = STATE_POSSIBLE;
            }

            this.state = this.process(inputDataClone);

            // the recognizer has recognized a gesture
            // so trigger an event
            if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {
                this.tryEmit(inputDataClone);
            }
        },

        /**
         * return the state of the recognizer
         * the actual recognizing happens in this method
         * @virtual
         * @param {Object} inputData
         * @returns {Const} STATE
         */
        process: function(inputData) { }, // jshint ignore:line

        /**
         * return the preferred touch-action
         * @virtual
         * @returns {Array}
         */
        getTouchAction: function() { },

        /**
         * called when the gesture isn't allowed to recognize
         * like when another is being recognized or it is disabled
         * @virtual
         */
        reset: function() { }
    };

    /**
     * get a usable string, used as event postfix
     * @param {Const} state
     * @returns {String} state
     */
    function stateStr(state) {
        if (state & STATE_CANCELLED) {
            return 'cancel';
        } else if (state & STATE_ENDED) {
            return 'end';
        } else if (state & STATE_CHANGED) {
            return 'move';
        } else if (state & STATE_BEGAN) {
            return 'start';
        }
        return '';
    }

    /**
     * direction cons to string
     * @param {Const} direction
     * @returns {String}
     */
    function directionStr(direction) {
        if (direction == DIRECTION_DOWN) {
            return 'down';
        } else if (direction == DIRECTION_UP) {
            return 'up';
        } else if (direction == DIRECTION_LEFT) {
            return 'left';
        } else if (direction == DIRECTION_RIGHT) {
            return 'right';
        }
        return '';
    }

    /**
     * get a recognizer by name if it is bound to a manager
     * @param {Recognizer|String} otherRecognizer
     * @param {Recognizer} recognizer
     * @returns {Recognizer}
     */
    function getRecognizerByNameIfManager(otherRecognizer, recognizer) {
        var manager = recognizer.manager;
        if (manager) {
            return manager.get(otherRecognizer);
        }
        return otherRecognizer;
    }

    /**
     * This recognizer is just used as a base for the simple attribute recognizers.
     * @constructor
     * @extends Recognizer
     */
    function AttrRecognizer() {
        Recognizer.apply(this, arguments);
    }

    inherit(AttrRecognizer, Recognizer, {
        /**
         * @namespace
         * @memberof AttrRecognizer
         */
        defaults: {
            /**
             * @type {Number}
             * @default 1
             */
            pointers: 1
        },

        /**
         * Used to check if it the recognizer receives valid input, like input.distance > 10.
         * @memberof AttrRecognizer
         * @param {Object} input
         * @returns {Boolean} recognized
         */
        attrTest: function(input) {
            var optionPointers = this.options.pointers;
            return optionPointers === 0 || input.pointers.length === optionPointers;
        },

        /**
         * Process the input and return the state for the recognizer
         * @memberof AttrRecognizer
         * @param {Object} input
         * @returns {*} State
         */
        process: function(input) {
            var state = this.state;
            var eventType = input.eventType;

            var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);
            var isValid = this.attrTest(input);

            // on cancel input and we've recognized before, return STATE_CANCELLED
            if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {
                return state | STATE_CANCELLED;
            } else if (isRecognized || isValid) {
                if (eventType & INPUT_END) {
                    return state | STATE_ENDED;
                } else if (!(state & STATE_BEGAN)) {
                    return STATE_BEGAN;
                }
                return state | STATE_CHANGED;
            }
            return STATE_FAILED;
        }
    });

    /**
     * Pan
     * Recognized when the pointer is down and moved in the allowed direction.
     * @constructor
     * @extends AttrRecognizer
     */
    function PanRecognizer() {
        AttrRecognizer.apply(this, arguments);

        this.pX = null;
        this.pY = null;
    }

    inherit(PanRecognizer, AttrRecognizer, {
        /**
         * @namespace
         * @memberof PanRecognizer
         */
        defaults: {
            event: 'pan',
            threshold: 10,
            pointers: 1,
            direction: DIRECTION_ALL
        },

        getTouchAction: function() {
            var direction = this.options.direction;
            var actions = [];
            if (direction & DIRECTION_HORIZONTAL) {
                actions.push(TOUCH_ACTION_PAN_Y);
            }
            if (direction & DIRECTION_VERTICAL) {
                actions.push(TOUCH_ACTION_PAN_X);
            }
            return actions;
        },

        directionTest: function(input) {
            var options = this.options;
            var hasMoved = true;
            var distance = input.distance;
            var direction = input.direction;
            var x = input.deltaX;
            var y = input.deltaY;

            // lock to axis?
            if (!(direction & options.direction)) {
                if (options.direction & DIRECTION_HORIZONTAL) {
                    direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;
                    hasMoved = x != this.pX;
                    distance = Math.abs(input.deltaX);
                } else {
                    direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;
                    hasMoved = y != this.pY;
                    distance = Math.abs(input.deltaY);
                }
            }
            input.direction = direction;
            return hasMoved && distance > options.threshold && direction & options.direction;
        },

        attrTest: function(input) {
            return AttrRecognizer.prototype.attrTest.call(this, input) &&
                (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));
        },

        emit: function(input) {

            this.pX = input.deltaX;
            this.pY = input.deltaY;

            var direction = directionStr(input.direction);

            if (direction) {
                input.additionalEvent = this.options.event + direction;
            }
            this._super.emit.call(this, input);
        }
    });

    /**
     * Pinch
     * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).
     * @constructor
     * @extends AttrRecognizer
     */
    function PinchRecognizer() {
        AttrRecognizer.apply(this, arguments);
    }

    inherit(PinchRecognizer, AttrRecognizer, {
        /**
         * @namespace
         * @memberof PinchRecognizer
         */
        defaults: {
            event: 'pinch',
            threshold: 0,
            pointers: 2
        },

        getTouchAction: function() {
            return [TOUCH_ACTION_NONE];
        },

        attrTest: function(input) {
            return this._super.attrTest.call(this, input) &&
                (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);
        },

        emit: function(input) {
            if (input.scale !== 1) {
                var inOut = input.scale < 1 ? 'in' : 'out';
                input.additionalEvent = this.options.event + inOut;
            }
            this._super.emit.call(this, input);
        }
    });

    /**
     * Press
     * Recognized when the pointer is down for x ms without any movement.
     * @constructor
     * @extends Recognizer
     */
    function PressRecognizer() {
        Recognizer.apply(this, arguments);

        this._timer = null;
        this._input = null;
    }

    inherit(PressRecognizer, Recognizer, {
        /**
         * @namespace
         * @memberof PressRecognizer
         */
        defaults: {
            event: 'press',
            pointers: 1,
            time: 251, // minimal time of the pointer to be pressed
            threshold: 9 // a minimal movement is ok, but keep it low
        },

        getTouchAction: function() {
            return [TOUCH_ACTION_AUTO];
        },

        process: function(input) {
            var options = this.options;
            var validPointers = input.pointers.length === options.pointers;
            var validMovement = input.distance < options.threshold;
            var validTime = input.deltaTime > options.time;

            this._input = input;

            // we only allow little movement
            // and we've reached an end event, so a tap is possible
            if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {
                this.reset();
            } else if (input.eventType & INPUT_START) {
                this.reset();
                this._timer = setTimeoutContext(function() {
                    this.state = STATE_RECOGNIZED;
                    this.tryEmit();
                }, options.time, this);
            } else if (input.eventType & INPUT_END) {
                return STATE_RECOGNIZED;
            }
            return STATE_FAILED;
        },

        reset: function() {
            clearTimeout(this._timer);
        },

        emit: function(input) {
            if (this.state !== STATE_RECOGNIZED) {
                return;
            }

            if (input && (input.eventType & INPUT_END)) {
                this.manager.emit(this.options.event + 'up', input);
            } else {
                this._input.timeStamp = now();
                this.manager.emit(this.options.event, this._input);
            }
        }
    });

    /**
     * Rotate
     * Recognized when two or more pointer are moving in a circular motion.
     * @constructor
     * @extends AttrRecognizer
     */
    function RotateRecognizer() {
        AttrRecognizer.apply(this, arguments);
    }

    inherit(RotateRecognizer, AttrRecognizer, {
        /**
         * @namespace
         * @memberof RotateRecognizer
         */
        defaults: {
            event: 'rotate',
            threshold: 0,
            pointers: 2
        },

        getTouchAction: function() {
            return [TOUCH_ACTION_NONE];
        },

        attrTest: function(input) {
            return this._super.attrTest.call(this, input) &&
                (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);
        }
    });

    /**
     * Swipe
     * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.
     * @constructor
     * @extends AttrRecognizer
     */
    function SwipeRecognizer() {
        AttrRecognizer.apply(this, arguments);
    }

    inherit(SwipeRecognizer, AttrRecognizer, {
        /**
         * @namespace
         * @memberof SwipeRecognizer
         */
        defaults: {
            event: 'swipe',
            threshold: 10,
            velocity: 0.3,
            direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,
            pointers: 1
        },

        getTouchAction: function() {
            return PanRecognizer.prototype.getTouchAction.call(this);
        },

        attrTest: function(input) {
            var direction = this.options.direction;
            var velocity;

            if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {
                velocity = input.overallVelocity;
            } else if (direction & DIRECTION_HORIZONTAL) {
                velocity = input.overallVelocityX;
            } else if (direction & DIRECTION_VERTICAL) {
                velocity = input.overallVelocityY;
            }

            return this._super.attrTest.call(this, input) &&
                direction & input.offsetDirection &&
                input.distance > this.options.threshold &&
                input.maxPointers == this.options.pointers &&
                abs(velocity) > this.options.velocity && input.eventType & INPUT_END;
        },

        emit: function(input) {
            var direction = directionStr(input.offsetDirection);
            if (direction) {
                this.manager.emit(this.options.event + direction, input);
            }

            this.manager.emit(this.options.event, input);
        }
    });

    /**
     * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur
     * between the given interval and position. The delay option can be used to recognize multi-taps without firing
     * a single tap.
     *
     * The eventData from the emitted event contains the property `tapCount`, which contains the amount of
     * multi-taps being recognized.
     * @constructor
     * @extends Recognizer
     */
    function TapRecognizer() {
        Recognizer.apply(this, arguments);

        // previous time and center,
        // used for tap counting
        this.pTime = false;
        this.pCenter = false;

        this._timer = null;
        this._input = null;
        this.count = 0;
    }

    inherit(TapRecognizer, Recognizer, {
        /**
         * @namespace
         * @memberof PinchRecognizer
         */
        defaults: {
            event: 'tap',
            pointers: 1,
            taps: 1,
            interval: 300, // max time between the multi-tap taps
            time: 250, // max time of the pointer to be down (like finger on the screen)
            threshold: 9, // a minimal movement is ok, but keep it low
            posThreshold: 10 // a multi-tap can be a bit off the initial position
        },

        getTouchAction: function() {
            return [TOUCH_ACTION_MANIPULATION];
        },

        process: function(input) {
            var options = this.options;

            var validPointers = input.pointers.length === options.pointers;
            var validMovement = input.distance < options.threshold;
            var validTouchTime = input.deltaTime < options.time;

            this.reset();

            if ((input.eventType & INPUT_START) && (this.count === 0)) {
                return this.failTimeout();
            }

            // we only allow little movement
            // and we've reached an end event, so a tap is possible
            if (validMovement && validTouchTime && validPointers) {
                if (input.eventType != INPUT_END) {
                    return this.failTimeout();
                }

                var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;
                var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;

                this.pTime = input.timeStamp;
                this.pCenter = input.center;

                if (!validMultiTap || !validInterval) {
                    this.count = 1;
                } else {
                    this.count += 1;
                }

                this._input = input;

                // if tap count matches we have recognized it,
                // else it has began recognizing...
                var tapCount = this.count % options.taps;
                if (tapCount === 0) {
                    // no failing requirements, immediately trigger the tap event
                    // or wait as long as the multitap interval to trigger
                    if (!this.hasRequireFailures()) {
                        return STATE_RECOGNIZED;
                    } else {
                        this._timer = setTimeoutContext(function() {
                            this.state = STATE_RECOGNIZED;
                            this.tryEmit();
                        }, options.interval, this);
                        return STATE_BEGAN;
                    }
                }
            }
            return STATE_FAILED;
        },

        failTimeout: function() {
            this._timer = setTimeoutContext(function() {
                this.state = STATE_FAILED;
            }, this.options.interval, this);
            return STATE_FAILED;
        },

        reset: function() {
            clearTimeout(this._timer);
        },

        emit: function() {
            if (this.state == STATE_RECOGNIZED) {
                this._input.tapCount = this.count;
                this.manager.emit(this.options.event, this._input);
            }
        }
    });

    /**
     * Simple way to create a manager with a default set of recognizers.
     * @param {HTMLElement} element
     * @param {Object} [options]
     * @constructor
     */
    function Hammer(element, options) {
        options = options || {};
        options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);
        return new Manager(element, options);
    }

    /**
     * @const {string}
     */
    Hammer.VERSION = '2.0.8';

    /**
     * default settings
     * @namespace
     */
    Hammer.defaults = {
        /**
         * set if DOM events are being triggered.
         * But this is slower and unused by simple implementations, so disabled by default.
         * @type {Boolean}
         * @default false
         */
        domEvents: false,

        /**
         * The value for the touchAction property/fallback.
         * When set to `compute` it will magically set the correct value based on the added recognizers.
         * @type {String}
         * @default compute
         */
        touchAction: TOUCH_ACTION_COMPUTE,

        /**
         * @type {Boolean}
         * @default true
         */
        enable: true,

        /**
         * EXPERIMENTAL FEATURE -- can be removed/changed
         * Change the parent input target element.
         * If Null, then it is being set the to main element.
         * @type {Null|EventTarget}
         * @default null
         */
        inputTarget: null,

        /**
         * force an input class
         * @type {Null|Function}
         * @default null
         */
        inputClass: null,

        /**
         * Default recognizer setup when calling `Hammer()`
         * When creating a new Manager these will be skipped.
         * @type {Array}
         */
        preset: [
            // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]
            [RotateRecognizer, {enable: false}],
            [PinchRecognizer, {enable: false}, ['rotate']],
            [SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],
            [PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],
            [TapRecognizer],
            [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],
            [PressRecognizer]
        ],

        /**
         * Some CSS properties can be used to improve the working of Hammer.
         * Add them to this method and they will be set when creating a new Manager.
         * @namespace
         */
        cssProps: {
            /**
             * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.
             * @type {String}
             * @default 'none'
             */
            userSelect: 'none',

            /**
             * Disable the Windows Phone grippers when pressing an element.
             * @type {String}
             * @default 'none'
             */
            touchSelect: 'none',

            /**
             * Disables the default callout shown when you touch and hold a touch target.
             * On iOS, when you touch and hold a touch target such as a link, Safari displays
             * a callout containing information about the link. This property allows you to disable that callout.
             * @type {String}
             * @default 'none'
             */
            touchCallout: 'none',

            /**
             * Specifies whether zooming is enabled. Used by IE10>
             * @type {String}
             * @default 'none'
             */
            contentZooming: 'none',

            /**
             * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.
             * @type {String}
             * @default 'none'
             */
            userDrag: 'none',

            /**
             * Overrides the highlight color shown when the user taps a link or a JavaScript
             * clickable element in iOS. This property obeys the alpha value, if specified.
             * @type {String}
             * @default 'rgba(0,0,0,0)'
             */
            tapHighlightColor: 'rgba(0,0,0,0)'
        }
    };

    var STOP = 1;
    var FORCED_STOP = 2;

    /**
     * Manager
     * @param {HTMLElement} element
     * @param {Object} [options]
     * @constructor
     */
    function Manager(element, options) {
        this.options = assign({}, Hammer.defaults, options || {});

        this.options.inputTarget = this.options.inputTarget || element;

        this.handlers = {};
        this.session = {};
        this.recognizers = [];
        this.oldCssProps = {};

        this.element = element;
        this.input = createInputInstance(this);
        this.touchAction = new TouchAction(this, this.options.touchAction);

        toggleCssProps(this, true);

        each(this.options.recognizers, function(item) {
            var recognizer = this.add(new (item[0])(item[1]));
            item[2] && recognizer.recognizeWith(item[2]);
            item[3] && recognizer.requireFailure(item[3]);
        }, this);
    }

    Manager.prototype = {
        /**
         * set options
         * @param {Object} options
         * @returns {Manager}
         */
        set: function(options) {
            assign(this.options, options);

            // Options that need a little more setup
            if (options.touchAction) {
                this.touchAction.update();
            }
            if (options.inputTarget) {
                // Clean up existing event listeners and reinitialize
                this.input.destroy();
                this.input.target = options.inputTarget;
                this.input.init();
            }
            return this;
        },

        /**
         * stop recognizing for this session.
         * This session will be discarded, when a new [input]start event is fired.
         * When forced, the recognizer cycle is stopped immediately.
         * @param {Boolean} [force]
         */
        stop: function(force) {
            this.session.stopped = force ? FORCED_STOP : STOP;
        },

        /**
         * run the recognizers!
         * called by the inputHandler function on every movement of the pointers (touches)
         * it walks through all the recognizers and tries to detect the gesture that is being made
         * @param {Object} inputData
         */
        recognize: function(inputData) {
            var session = this.session;
            if (session.stopped) {
                return;
            }

            // run the touch-action polyfill
            this.touchAction.preventDefaults(inputData);

            var recognizer;
            var recognizers = this.recognizers;

            // this holds the recognizer that is being recognized.
            // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED
            // if no recognizer is detecting a thing, it is set to `null`
            var curRecognizer = session.curRecognizer;

            // reset when the last recognizer is recognized
            // or when we're in a new session
            if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {
                curRecognizer = session.curRecognizer = null;
            }

            var i = 0;
            while (i < recognizers.length) {
                recognizer = recognizers[i];

                // find out if we are allowed try to recognize the input for this one.
                // 1.   allow if the session is NOT forced stopped (see the .stop() method)
                // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one
                //      that is being recognized.
                // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.
                //      this can be setup with the `recognizeWith()` method on the recognizer.
                if (session.stopped !== FORCED_STOP && ( // 1
                    !curRecognizer || recognizer == curRecognizer || // 2
                    recognizer.canRecognizeWith(curRecognizer))) { // 3
                    recognizer.recognize(inputData);
                } else {
                    recognizer.reset();
                }

                // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the
                // current active recognizer. but only if we don't already have an active recognizer
                if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {
                    curRecognizer = session.curRecognizer = recognizer;
                }
                i++;
            }
        },

        /**
         * get a recognizer by its event name.
         * @param {Recognizer|String} recognizer
         * @returns {Recognizer|Null}
         */
        get: function(recognizer) {
            if (recognizer instanceof Recognizer) {
                return recognizer;
            }

            var recognizers = this.recognizers;
            for (var i = 0; i < recognizers.length; i++) {
                if (recognizers[i].options.event == recognizer) {
                    return recognizers[i];
                }
            }
            return null;
        },

        /**
         * add a recognizer to the manager
         * existing recognizers with the same event name will be removed
         * @param {Recognizer} recognizer
         * @returns {Recognizer|Manager}
         */
        add: function(recognizer) {
            if (invokeArrayArg(recognizer, 'add', this)) {
                return this;
            }

            // remove existing
            var existing = this.get(recognizer.options.event);
            if (existing) {
                this.remove(existing);
            }

            this.recognizers.push(recognizer);
            recognizer.manager = this;

            this.touchAction.update();
            return recognizer;
        },

        /**
         * remove a recognizer by name or instance
         * @param {Recognizer|String} recognizer
         * @returns {Manager}
         */
        remove: function(recognizer) {
            if (invokeArrayArg(recognizer, 'remove', this)) {
                return this;
            }

            recognizer = this.get(recognizer);

            // let's make sure this recognizer exists
            if (recognizer) {
                var recognizers = this.recognizers;
                var index = inArray(recognizers, recognizer);

                if (index !== -1) {
                    recognizers.splice(index, 1);
                    this.touchAction.update();
                }
            }

            return this;
        },

        /**
         * bind event
         * @param {String} events
         * @param {Function} handler
         * @returns {EventEmitter} this
         */
        on: function(events, handler) {
            if (events === undefined) {
                return;
            }
            if (handler === undefined) {
                return;
            }

            var handlers = this.handlers;
            each(splitStr(events), function(event) {
                handlers[event] = handlers[event] || [];
                handlers[event].push(handler);
            });
            return this;
        },

        /**
         * unbind event, leave emit blank to remove all handlers
         * @param {String} events
         * @param {Function} [handler]
         * @returns {EventEmitter} this
         */
        off: function(events, handler) {
            if (events === undefined) {
                return;
            }

            var handlers = this.handlers;
            each(splitStr(events), function(event) {
                if (!handler) {
                    delete handlers[event];
                } else {
                    handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);
                }
            });
            return this;
        },

        /**
         * emit event to the listeners
         * @param {String} event
         * @param {Object} data
         */
        emit: function(event, data) {
            // we also want to trigger dom events
            if (this.options.domEvents) {
                triggerDomEvent(event, data);
            }

            // no handlers, so skip it all
            var handlers = this.handlers[event] && this.handlers[event].slice();
            if (!handlers || !handlers.length) {
                return;
            }

            data.type = event;
            data.preventDefault = function() {
                data.srcEvent.preventDefault();
            };

            var i = 0;
            while (i < handlers.length) {
                handlers[i](data);
                i++;
            }
        },

        /**
         * destroy the manager and unbinds all events
         * it doesn't unbind dom events, that is the user own responsibility
         */
        destroy: function() {
            this.element && toggleCssProps(this, false);

            this.handlers = {};
            this.session = {};
            this.input.destroy();
            this.element = null;
        }
    };

    /**
     * add/remove the css properties as defined in manager.options.cssProps
     * @param {Manager} manager
     * @param {Boolean} add
     */
    function toggleCssProps(manager, add) {
        var element = manager.element;
        if (!element.style) {
            return;
        }
        var prop;
        each(manager.options.cssProps, function(value, name) {
            prop = prefixed(element.style, name);
            if (add) {
                manager.oldCssProps[prop] = element.style[prop];
                element.style[prop] = value;
            } else {
                element.style[prop] = manager.oldCssProps[prop] || '';
            }
        });
        if (!add) {
            manager.oldCssProps = {};
        }
    }

    /**
     * trigger dom event
     * @param {String} event
     * @param {Object} data
     */
    function triggerDomEvent(event, data) {
        var gestureEvent = document.createEvent('Event');
        gestureEvent.initEvent(event, true, true);
        gestureEvent.gesture = data;
        data.target.dispatchEvent(gestureEvent);
    }

    assign(Hammer, {
        INPUT_START: INPUT_START,
        INPUT_MOVE: INPUT_MOVE,
        INPUT_END: INPUT_END,
        INPUT_CANCEL: INPUT_CANCEL,

        STATE_POSSIBLE: STATE_POSSIBLE,
        STATE_BEGAN: STATE_BEGAN,
        STATE_CHANGED: STATE_CHANGED,
        STATE_ENDED: STATE_ENDED,
        STATE_RECOGNIZED: STATE_RECOGNIZED,
        STATE_CANCELLED: STATE_CANCELLED,
        STATE_FAILED: STATE_FAILED,

        DIRECTION_NONE: DIRECTION_NONE,
        DIRECTION_LEFT: DIRECTION_LEFT,
        DIRECTION_RIGHT: DIRECTION_RIGHT,
        DIRECTION_UP: DIRECTION_UP,
        DIRECTION_DOWN: DIRECTION_DOWN,
        DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,
        DIRECTION_VERTICAL: DIRECTION_VERTICAL,
        DIRECTION_ALL: DIRECTION_ALL,

        Manager: Manager,
        Input: Input,
        TouchAction: TouchAction,

        TouchInput: TouchInput,
        MouseInput: MouseInput,
        PointerEventInput: PointerEventInput,
        TouchMouseInput: TouchMouseInput,
        SingleTouchInput: SingleTouchInput,

        Recognizer: Recognizer,
        AttrRecognizer: AttrRecognizer,
        Tap: TapRecognizer,
        Pan: PanRecognizer,
        Swipe: SwipeRecognizer,
        Pinch: PinchRecognizer,
        Rotate: RotateRecognizer,
        Press: PressRecognizer,

        on: addEventListeners,
        off: removeEventListeners,
        each: each,
        merge: merge,
        extend: extend,
        assign: assign,
        inherit: inherit,
        bindFn: bindFn,
        prefixed: prefixed
    });

// this prevents errors when Hammer is loaded in the presence of an AMD
//  style loader but by script tag, not by the loader.
    var freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line
    freeGlobal.Hammer = Hammer;

    if (typeof define === 'function' && define.amd) {
        define(function() {
            return Hammer;
        });
    } else if (typeof module != 'undefined' && module.exports) {
        module.exports = Hammer;
    } else {
        window[exportName] = Hammer;
    }

})(window, document, 'Hammer');
// Avoid `console` errors in browsers that lack a console.
if (!(window.console && console.log)) {
    (function() {
        var noop = function() {};
        var methods = ['assert', 'clear', 'count', 'debug', 'dir', 'dirxml', 'error', 'exception', 'group', 'groupCollapsed', 'groupEnd', 'info', 'log', 'markTimeline', 'profile', 'profileEnd', 'markTimeline', 'table', 'time', 'timeEnd', 'timeStamp', 'trace', 'warn'];
        var length = methods.length;
        var console = window.console = {};
        while (length--) {
            console[methods[length]] = noop;
        }
    }());
}
/**
 * http://paulirish.com/2011/requestanimationframe-for-smart-animating/
 * http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating
 * https://gist.github.com/1579671

 * requestAnimationFrame polyfill by Erik Möller
 * fixes from Paul Irish and Tino Zijdel
 */
(function(){var b=0;var c=["ms","moz","webkit","o"];for(var a=0;a<c.length&&!window.requestAnimationFrame;++a){window.requestAnimationFrame=window[c[a]+"RequestAnimationFrame"];
    window.cancelAnimationFrame=window[c[a]+"CancelAnimationFrame"]||window[c[a]+"CancelRequestAnimationFrame"];}if(!window.requestAnimationFrame){window.requestAnimationFrame=function(h,e){var d=new Date().getTime();
    var f=Math.max(0,16-(d-b));var g=window.setTimeout(function(){h(d+f);},f);b=d+f;return g;};}if(!window.cancelAnimationFrame){window.cancelAnimationFrame=function(d){clearTimeout(d);
};}}());



//THIS PLUGIN HAS BEEN MODIFIED BY CSE DON'T OVER WRITE WITH NEWER VERSION
// - touchEnd() prevents default in different place from original plugin, this fixes an issue in the content
//   slider on the Nexus 7

/*
 * @fileOverview TouchSwipe - jQuery Plugin
 * @version 1.6.2
 *
 * @author Matt Bryson http://www.github.com/mattbryson
 * @see https://github.com/mattbryson/TouchSwipe-Jquery-Plugin
 * @see http://labs.skinkers.com/touchSwipe/
 * @see http://plugins.jquery.com/project/touchSwipe
 *
 * Copyright (c) 2010 Matt Bryson
 * Dual licensed under the MIT or GPL Version 2 licenses.
 *
 *
 * Changelog
 * $Date: 2010-12-12 (Wed, 12 Dec 2010) $
 * $version: 1.0.0
 * $version: 1.0.1 - removed multibyte comments
 *
 * $Date: 2011-21-02 (Mon, 21 Feb 2011) $
 * $version: 1.1.0 	- added allowPageScroll property to allow swiping and scrolling of page
 *					- changed handler signatures so one handler can be used for multiple events
 * $Date: 2011-23-02 (Wed, 23 Feb 2011) $
 * $version: 1.2.0 	- added click handler. This is fired if the user simply clicks and does not swipe. The event object and click target are passed to handler.
 *					- If you use the http://code.google.com/p/jquery-ui-for-ipad-and-iphone/ plugin, you can also assign jQuery mouse events to children of a touchSwipe object.
 * $version: 1.2.1 	- removed console log!
 *
 * $version: 1.2.2 	- Fixed bug where scope was not preserved in callback methods.
 *
 * $Date: 2011-28-04 (Thurs, 28 April 2011) $
 * $version: 1.2.4 	- Changed licence terms to be MIT or GPL inline with jQuery. Added check for support of touch events to stop non compatible browsers erroring.
 *
 * $Date: 2011-27-09 (Tues, 27 September 2011) $
 * $version: 1.2.5 	- Added support for testing swipes with mouse on desktop browser (thanks to https://github.com/joelhy)
 *
 * $Date: 2012-14-05 (Mon, 14 May 2012) $
 * $version: 1.2.6 	- Added timeThreshold between start and end touch, so user can ignore slow swipes (thanks to Mark Chase). Default is null, all swipes are detected
 *
 * $Date: 2012-05-06 (Tues, 05 June 2012) $
 * $version: 1.2.7 	- Changed time threshold to have null default for backwards compatibility. Added duration param passed back in events, and refactored how time is handled.
 *
 * $Date: 2012-05-06 (Tues, 05 June 2012) $
 * $version: 1.2.8 	- Added the possibility to return a value like null or false in the trigger callback. In that way we can control when the touch start/move should take effect or not (simply by returning in some cases return null; or return false;) This effects the ontouchstart/ontouchmove event.
 *
 * $Date: 2012-06-06 (Wed, 06 June 2012) $
 * $version: 1.3.0 	- Refactored whole plugin to allow for methods to be executed, as well as exposed defaults for user override. Added 'enable', 'disable', and 'destroy' methods
 *
 * $Date: 2012-05-06 (Fri, 05 June 2012) $
 * $version: 1.3.1 	- Bug fixes  - bind() with false as last argument is no longer supported in jQuery 1.6, also, if you just click, the duration is now returned correctly.
 *
 * $Date: 2012-29-07 (Sun, 29 July 2012) $
 * $version: 1.3.2	- Added fallbackToMouseEvents option to NOT capture mouse events on non touch devices.
 * 			- Added "all" fingers value to the fingers property, so any combinatin of fingers triggers the swipe, allowing event handlers to check the finger count
 *
 * $Date: 2012-09-08 (Thurs, 9 Aug 2012) $
 * $version: 1.3.3	- Code tidy prep for minified version
 *
 * $Date: 2012-04-10 (wed, 4 Oct 2012) $
 * $version: 1.4.0	- Added pinch support, pinchIn and pinchOut
 *
 * $Date: 2012-11-10 (Thurs, 11 Oct 2012) $
 * $version: 1.5.0	- Added excludedElements, a jquery selector that specifies child elements that do NOT trigger swipes. By default, this is one select that removes all form, input select, button and anchor elements.
 *
 * $Date: 2012-22-10 (Mon, 22 Oct 2012) $
 * $version: 1.5.1	- Fixed bug with jQuery 1.8 and trailing comma in excludedElements
 *					- Fixed bug with IE and eventPreventDefault()
 * $Date: 2013-01-12 (Fri, 12 Jan 2013) $
 * $version: 1.6.0	- Fixed bugs with pinching, mainly when both pinch and swipe enabled, as well as adding time threshold for multifinger gestures, so releasing one finger beofre the other doesnt trigger as single finger gesture.
 *					- made the demo site all static local HTML pages so they can be run locally by a developer
 *					- added jsDoc comments and added documentation for the plugin
 *					- code tidy
 *					- added triggerOnTouchLeave property that will end the event when the user swipes off the element.
 * $Date: 2013-03-23 (Sat, 23 Mar 2013) $
 * $version: 1.6.1	- Added support for ie8 touch events
 * $version: 1.6.2	- Added support for events binding with on / off / bind in jQ for all callback names.
 *                   - Deprecated the 'click' handler in favour of tap.
 *                   - added cancelThreshold property
 *                   - added option method to update init options at runtime
 *
 */

/**
 * See (http://jquery.com/).
 * @name $
 * @class
 * See the jQuery Library  (http://jquery.com/) for full details.  This just
 * documents the function and classes that are added to jQuery by this plug-in.
 */

/**
 * See (http://jquery.com/)
 * @name fn
 * @class
 * See the jQuery Library  (http://jquery.com/) for full details.  This just
 * documents the function and classes that are added to jQuery by this plug-in.
 * @memberOf $
 */



(function ($) {
    "use strict";

    //Constants
    var LEFT = "left",
        RIGHT = "right",
        UP = "up",
        DOWN = "down",
        IN = "in",
        OUT = "out",

        NONE = "none",
        AUTO = "auto",

        SWIPE = "swipe",
        PINCH = "pinch",
        TAP = "tap",

        HORIZONTAL = "horizontal",
        VERTICAL = "vertical",

        ALL_FINGERS = "all",

        PHASE_START = "start",
        PHASE_MOVE = "move",
        PHASE_END = "end",
        PHASE_CANCEL = "cancel",

        SUPPORTS_TOUCH = 'ontouchstart' in window,

        PLUGIN_NS = 'TouchSwipe';



    /**
     * The default configuration, and available options to configure touch swipe with.
     * You can set the default values by updating any of the properties prior to instantiation.
     * @name $.fn.swipe.defaults
     * @namespace
     * @property {int} [fingers=1] The number of fingers to detect in a swipe. Any swipes that do not meet this requirement will NOT trigger swipe handlers.
     * @property {int} [threshold=75] The number of pixels that the user must move their finger by before it is considered a swipe.
     * @property {int} [cancelThreshold=25] The number of pixels that the user must move their finger back from the original swipe direction to cancel the gesture.
     * @property {int} [pinchThreshold=20] The number of pixels that the user must pinch their finger by before it is considered a pinch.
     * @property {int} [maxTimeThreshold=null] Time, in milliseconds, between touchStart and touchEnd must NOT exceed in order to be considered a swipe.
     * @property {int} [fingerReleaseThreshold=250] Time in milliseconds between releasing multiple fingers.  If 2 fingers are down, and are released one after the other, if they are within this threshold, it counts as a simultaneous release.
     * @property {function} [swipe=null] A handler to catch all swipes. See {@link $.fn.swipe#event:swipe}
     * @property {function} [swipeLeft=null] A handler that is triggered for "left" swipes. See {@link $.fn.swipe#event:swipeLeft}
     * @property {function} [swipeRight=null] A handler that is triggered for "right" swipes. See {@link $.fn.swipe#event:swipeRight}
     * @property {function} [swipeUp=null] A handler that is triggered for "up" swipes. See {@link $.fn.swipe#event:swipeUp}
     * @property {function} [swipeDown=null] A handler that is triggered for "down" swipes. See {@link $.fn.swipe#event:swipeDown}
     * @property {function} [swipeStatus=null] A handler triggered for every phase of the swipe. See {@link $.fn.swipe#event:swipeStatus}
     * @property {function} [pinchIn=null] A handler triggered for pinch in events. See {@link $.fn.swipe#event:pinchIn}
     * @property {function} [pinchOut=null] A handler triggered for pinch out events. See {@link $.fn.swipe#event:pinchOut}
     * @property {function} [pinchStatus=null] A handler triggered for every phase of a pinch. See {@link $.fn.swipe#event:pinchStatus}
     * @property {function} [tap=null] A handler triggered when a user just taps on the item, rather than swipes it. If they do not move, tap is triggered, if they do move, it is not.
     * @property {boolean} [triggerOnTouchEnd=true] If true, the swipe events are triggered when the touch end event is received (user releases finger).  If false, it will be triggered on reaching the threshold, and then cancel the touch event automatically.
     * @property {boolean} [triggerOnTouchLeave=false] If true, then when the user leaves the swipe object, the swipe will end and trigger appropriate handlers.
     * @property {string} [allowPageScroll='auto'] How the browser handles page scrolls when the user is swiping on a touchSwipe object. See {@link $.fn.swipe.pageScroll}.  <br/><br/>
     <code>"auto"</code> : all undefined swipes will cause the page to scroll in that direction. <br/>
     <code>"none"</code> : the page will not scroll when user swipes. <br/>
     <code>"horizontal"</code> : will force page to scroll on horizontal swipes. <br/>
     <code>"vertical"</code> : will force page to scroll on vertical swipes. <br/>
     * @property {boolean} [fallbackToMouseEvents=true] If true mouse events are used when run on a non touch device, false will stop swipes being triggered by mouse events on non tocuh devices.
     * @property {string} [excludedElements="button, input, select, textarea, a, .noSwipe"] A jquery selector that specifies child elements that do NOT trigger swipes. By default this excludes all form, input, select, button, anchor and .noSwipe elements.

     */
    var defaults = {
        fingers: 1,
        threshold: 75,
        cancelThreshold:25,
        pinchThreshold:20,
        maxTimeThreshold: null,
        fingerReleaseThreshold:250,
        swipe: null,
        swipeLeft: null,
        swipeRight: null,
        swipeUp: null,
        swipeDown: null,
        swipeStatus: null,
        pinchIn:null,
        pinchOut:null,
        pinchStatus:null,
        click:null, //Deprecated since 1.6.2
        tap:null,
        triggerOnTouchEnd: true,
        triggerOnTouchLeave:false,
        allowPageScroll: "auto",
        fallbackToMouseEvents: true,
        excludedElements:"button, input, select, textarea, a, .noSwipe"
    };



    /**
     * Applies TouchSwipe behaviour to one or more jQuery objects.
     * The TouchSwipe plugin can be instantiated via this method, or methods within
     * TouchSwipe can be executed via this method as per jQuery plugin architecture.
     * @see TouchSwipe
     * @class
     * @param {Mixed} method If the current DOMNode is a TouchSwipe object, and <code>method</code> is a TouchSwipe method, then
     * the <code>method</code> is executed, and any following arguments are passed to the TouchSwipe method.
     * If <code>method</code> is an object, then the TouchSwipe class is instantiated on the current DOMNode, passing the
     * configuration properties defined in the object. See TouchSwipe
     *
     */
    $.fn.swipe = function (method) {
        var $this = $(this),
            plugin = $this.data(PLUGIN_NS);

        //Check if we are already instantiated and trying to execute a method
        if (plugin && typeof method === 'string') {
            if (plugin[method]) {
                return plugin[method].apply(this, Array.prototype.slice.call(arguments, 1));
            } else {
                $.error('Method ' + method + ' does not exist on jQuery.swipe');
            }
        }
        //Else not instantiated and trying to pass init object (or nothing)
        else if (!plugin && (typeof method === 'object' || !method)) {
            return init.apply(this, arguments);
        }

        return $this;
    };

    //Expose our defaults so a user could override the plugin defaults
    $.fn.swipe.defaults = defaults;

    /**
     * The phases that a touch event goes through.  The <code>phase</code> is passed to the event handlers.
     * These properties are read only, attempting to change them will not alter the values passed to the event handlers.
     * @namespace
     * @readonly
     * @property {string} PHASE_START Constant indicating the start phase of the touch event. Value is <code>"start"</code>.
     * @property {string} PHASE_MOVE Constant indicating the move phase of the touch event. Value is <code>"move"</code>.
     * @property {string} PHASE_END Constant indicating the end phase of the touch event. Value is <code>"end"</code>.
     * @property {string} PHASE_CANCEL Constant indicating the cancel phase of the touch event. Value is <code>"cancel"</code>.
     */
    $.fn.swipe.phases = {
        PHASE_START: PHASE_START,
        PHASE_MOVE: PHASE_MOVE,
        PHASE_END: PHASE_END,
        PHASE_CANCEL: PHASE_CANCEL
    };

    /**
     * The direction constants that are passed to the event handlers.
     * These properties are read only, attempting to change them will not alter the values passed to the event handlers.
     * @namespace
     * @readonly
     * @property {string} LEFT Constant indicating the left direction. Value is <code>"left"</code>.
     * @property {string} RIGHT Constant indicating the right direction. Value is <code>"right"</code>.
     * @property {string} UP Constant indicating the up direction. Value is <code>"up"</code>.
     * @property {string} DOWN Constant indicating the down direction. Value is <code>"cancel"</code>.
     * @property {string} IN Constant indicating the in direction. Value is <code>"in"</code>.
     * @property {string} OUT Constant indicating the out direction. Value is <code>"out"</code>.
     */
    $.fn.swipe.directions = {
        LEFT: LEFT,
        RIGHT: RIGHT,
        UP: UP,
        DOWN: DOWN,
        IN : IN,
        OUT: OUT
    };

    /**
     * The page scroll constants that can be used to set the value of <code>allowPageScroll</code> option
     * These properties are read only
     * @namespace
     * @readonly
     * @see $.fn.swipe.defaults#allowPageScroll
     * @property {string} NONE Constant indicating no page scrolling is allowed. Value is <code>"none"</code>.
     * @property {string} HORIZONTAL Constant indicating horizontal page scrolling is allowed. Value is <code>"horizontal"</code>.
     * @property {string} VERTICAL Constant indicating vertical page scrolling is allowed. Value is <code>"vertical"</code>.
     * @property {string} AUTO Constant indicating either horizontal or vertical will be allowed, depending on the swipe handlers registered. Value is <code>"auto"</code>.
     */
    $.fn.swipe.pageScroll = {
        NONE: NONE,
        HORIZONTAL: HORIZONTAL,
        VERTICAL: VERTICAL,
        AUTO: AUTO
    };

    /**
     * Constants representing the number of fingers used in a swipe.  These are used to set both the value of <code>fingers</code> in the
     * options object, as well as the value of the <code>fingers</code> event property.
     * These properties are read only, attempting to change them will not alter the values passed to the event handlers.
     * @namespace
     * @readonly
     * @see $.fn.swipe.defaults#fingers
     * @property {string} ONE Constant indicating 1 finger is to be detected / was detected. Value is <code>1</code>.
     * @property {string} TWO Constant indicating 2 fingers are to be detected / were detected. Value is <code>1</code>.
     * @property {string} THREE Constant indicating 3 finger are to be detected / were detected. Value is <code>1</code>.
     * @property {string} ALL Constant indicating any combination of finger are to be detected.  Value is <code>"all"</code>.
     */
    $.fn.swipe.fingers = {
        ONE: 1,
        TWO: 2,
        THREE: 3,
        ALL: ALL_FINGERS
    };

    /**
     * Initialise the plugin for each DOM element matched
     * This creates a new instance of the main TouchSwipe class for each DOM element, and then
     * saves a reference to that instance in the elements data property.
     * @internal
     */
    function init(options) {
        //Prep and extend the options
        if (options && (options.allowPageScroll === undefined && (options.swipe !== undefined || options.swipeStatus !== undefined))) {
            options.allowPageScroll = NONE;
        }

        //Check for deprecated options
        //Ensure that any old click handlers are assigned to the new tap, unless we have a tap
        if(options.click!==undefined && options.tap===undefined) {
            options.tap = options.click;
        }

        if (!options) {
            options = {};
        }

        //pass empty object so we dont modify the defaults
        options = $.extend({}, $.fn.swipe.defaults, options);

        //For each element instantiate the plugin
        return this.each(function () {
            var $this = $(this);

            //Check we havent already initialised the plugin
            var plugin = $this.data(PLUGIN_NS);

            if (!plugin) {
                plugin = new TouchSwipe(this, options);
                $this.data(PLUGIN_NS, plugin);
            }
        });
    }

    /**
     * Main TouchSwipe Plugin Class.
     * Do not use this to construct your TouchSwipe object, use the jQuery plugin method $.fn.swipe(); {@link $.fn.swipe}
     * @private
     * @name TouchSwipe
     * @param {DOMNode} element The HTML DOM object to apply to plugin to
     * @param {Object} options The options to configure the plugin with.  @link {$.fn.swipe.defaults}
     * @see $.fh.swipe.defaults
     * @see $.fh.swipe
     * @class
     */
    function TouchSwipe(element, options) {
        var useTouchEvents = (SUPPORTS_TOUCH || !options.fallbackToMouseEvents),
            START_EV = useTouchEvents ? 'touchstart' : 'mousedown',
            MOVE_EV = useTouchEvents ? 'touchmove' : 'mousemove',
            END_EV = useTouchEvents ? 'touchend' : 'mouseup',
            LEAVE_EV = useTouchEvents ? null : 'mouseleave', //we manually detect leave on touch devices, so null event here
            CANCEL_EV = 'touchcancel';



        //touch properties
        var distance = 0,
            direction = null,
            duration = 0,
            startTouchesDistance = 0,
            endTouchesDistance = 0,
            pinchZoom = 1,
            pinchDistance = 0,
            pinchDirection = 0,
            maximumsMap=null;



        //jQuery wrapped element for this instance
        var $element = $(element);

        //Current phase of th touch cycle
        var phase = "start";

        // the current number of fingers being used.
        var fingerCount = 0;

        //track mouse points / delta
        var fingerData=null;

        //track times
        var startTime = 0,
            endTime = 0,
            previousTouchEndTime=0,
            previousTouchFingerCount=0;

        // Add gestures to all swipable areas if supported
        try {
            $element.bind(START_EV, touchStart);
            $element.bind(CANCEL_EV, touchCancel);
        }
        catch (e) {
            $.error('events not supported ' + START_EV + ',' + CANCEL_EV + ' on jQuery.swipe');
        }

        //
        //Public methods
        //

        /**
         * re-enables the swipe plugin with the previous configuration
         * @function
         * @name $.fn.swipe#enable
         * @return {DOMNode} The Dom element that was registered with TouchSwipe
         * @example $("#element").swipe("enable");
         */
        this.enable = function () {
            $element.bind(START_EV, touchStart);
            $element.bind(CANCEL_EV, touchCancel);
            return $element;
        };

        /**
         * disables the swipe plugin
         * @function
         * @name $.fn.swipe#disable
         * @return {DOMNode} The Dom element that is now registered with TouchSwipe
         * @example $("#element").swipe("disable");
         */
        this.disable = function () {
            removeListeners();
            return $element;
        };

        /**
         * Destroy the swipe plugin completely. To use any swipe methods, you must re initialise the plugin.
         * @function
         * @name $.fn.swipe#destroy
         * @return {DOMNode} The Dom element that was registered with TouchSwipe
         * @example $("#element").swipe("destroy");
         */
        this.destroy = function () {
            removeListeners();
            $element.data(PLUGIN_NS, null);
            return $element;
        };


        /**
         * Allows run time updating of the swipe configuration options.
         * @function
         * @name $.fn.swipe#option
         * @param {String} property The option property to get or set
         * @param {Object} [value] The value to set the property to
         * @return {Object} If only a property name is passed, then that property value is returned.
         * @example $("#element").swipe("option", "threshold"); // return the threshold
         * @example $("#element").swipe("option", "threshold", 100); // set the threshold after init
         * @see $.fn.swipe.defaults
         *
         */
        this.option = function (property, value) {
            if(options[property]!==undefined) {
                if(value===undefined) {
                    return options[property];
                } else {
                    options[property] = value;
                }
            } else {
                $.error('Option ' + property + ' does not exist on jQuery.swipe.options');
            }
        }

        //
        // Private methods
        //

        //
        // EVENTS
        //
        /**
         * Event handler for a touch start event.
         * Stops the default click event from triggering and stores where we touched
         * @inner
         * @param {object} jqEvent The normalised jQuery event object.
         */
        function touchStart(jqEvent) {
            //If we already in a touch event (a finger already in use) then ignore subsequent ones..
            if( getTouchInProgress() )
                return;

            //Check if this element matches any in the excluded elements selectors,  or its parent is excluded, if so, DONT swipe
            if( $(jqEvent.target).closest( options.excludedElements, $element ).length>0 )
                return;

            //As we use Jquery bind for events, we need to target the original event object
            //If these events are being programatically triggered, we dont have an orignal event object, so use the Jq one.
            var event = jqEvent.originalEvent ? jqEvent.originalEvent : jqEvent;

            var ret,
                evt = SUPPORTS_TOUCH ? event.touches[0] : event;

            phase = PHASE_START;

            //If we support touches, get the finger count
            if (SUPPORTS_TOUCH) {
                // get the total number of fingers touching the screen
                fingerCount = event.touches.length;
            }
            //Else this is the desktop, so stop the browser from dragging the image
            else {
                jqEvent.preventDefault(); //call this on jq event so we are cross browser
            }

            //clear vars..
            distance = 0;
            direction = null;
            pinchDirection=null;
            duration = 0;
            startTouchesDistance=0;
            endTouchesDistance=0;
            pinchZoom = 1;
            pinchDistance = 0;
            fingerData=createAllFingerData();
            maximumsMap=createMaximumsData();
            cancelMultiFingerRelease();


            // check the number of fingers is what we are looking for, or we are capturing pinches
            if (!SUPPORTS_TOUCH || (fingerCount === options.fingers || options.fingers === ALL_FINGERS) || hasPinches()) {
                // get the coordinates of the touch
                createFingerData( 0, evt );
                startTime = getTimeStamp();

                if(fingerCount==2) {
                    //Keep track of the initial pinch distance, so we can calculate the diff later
                    //Store second finger data as start
                    createFingerData( 1, event.touches[1] );
                    startTouchesDistance = endTouchesDistance = calculateTouchesDistance(fingerData[0].start, fingerData[1].start);
                }

                if (options.swipeStatus || options.pinchStatus) {
                    ret = triggerHandler(event, phase);
                }
            }
            else {
                //A touch with more or less than the fingers we are looking for, so cancel
                ret = false;
            }

            //If we have a return value from the users handler, then return and cancel
            if (ret === false) {
                phase = PHASE_CANCEL;
                triggerHandler(event, phase);
                return ret;
            }
            else {
                setTouchInProgress(true);
            }
        };



        /**
         * Event handler for a touch move event.
         * If we change fingers during move, then cancel the event
         * @inner
         * @param {object} jqEvent The normalised jQuery event object.
         */
        function touchMove(jqEvent) {

            //As we use Jquery bind for events, we need to target the original event object
            //If these events are being programatically triggered, we dont have an orignal event object, so use the Jq one.
            var event = jqEvent.originalEvent ? jqEvent.originalEvent : jqEvent;

            //If we are ending, cancelling, or within the threshold of 2 fingers being released, dont track anything..
            if (phase === PHASE_END || phase === PHASE_CANCEL || inMultiFingerRelease())
                return;

            var ret,
                evt = SUPPORTS_TOUCH ? event.touches[0] : event;


            //Update the  finger data
            var currentFinger = updateFingerData(evt);
            endTime = getTimeStamp();

            if (SUPPORTS_TOUCH) {
                fingerCount = event.touches.length;
            }

            phase = PHASE_MOVE;

            //If we have 2 fingers get Touches distance as well
            if(fingerCount==2) {

                //Keep track of the initial pinch distance, so we can calculate the diff later
                //We do this here as well as the start event, incase they start with 1 finger, and the press 2 fingers
                if(startTouchesDistance==0) {
                    //Create second finger if this is the first time...
                    createFingerData( 1, event.touches[1] );

                    startTouchesDistance = endTouchesDistance = calculateTouchesDistance(fingerData[0].start, fingerData[1].start);
                } else {
                    //Else just update the second finger
                    updateFingerData(event.touches[1]);

                    endTouchesDistance = calculateTouchesDistance(fingerData[0].end, fingerData[1].end);
                    pinchDirection = calculatePinchDirection(fingerData[0].end, fingerData[1].end);
                }


                pinchZoom = calculatePinchZoom(startTouchesDistance, endTouchesDistance);
                pinchDistance = Math.abs(startTouchesDistance - endTouchesDistance);
            }


            if ( (fingerCount === options.fingers || options.fingers === ALL_FINGERS) || !SUPPORTS_TOUCH || hasPinches() ) {

                direction = calculateDirection(currentFinger.start, currentFinger.end);

                //Check if we need to prevent default evnet (page scroll / pinch zoom) or not
                validateDefaultEvent(jqEvent, direction);

                //Distance and duration are all off the main finger
                distance = calculateDistance(currentFinger.start, currentFinger.end);
                duration = calculateDuration();

                //Cache the maximum distance we made in this direction
                setMaxDistance(direction, distance);


                if (options.swipeStatus || options.pinchStatus) {
                    ret = triggerHandler(event, phase);
                }


                //If we trigger end events when threshold are met, or trigger events when touch leves element
                if(!options.triggerOnTouchEnd || options.triggerOnTouchLeave) {

                    var inBounds = true;

                    //If checking if we leave the element, run the bounds check (we can use touchleave as its not supported on webkit)
                    if(options.triggerOnTouchLeave) {
                        var bounds = getbounds( this );
                        inBounds = isInBounds( currentFinger.end, bounds );
                    }

                    //Trigger end handles as we swipe if thresholds met or if we have left the element if the user has asked to check these..
                    if(!options.triggerOnTouchEnd && inBounds) {
                        phase = getNextPhase( PHASE_MOVE );
                    }
                    //We end if out of bounds here, so set current phase to END, and check if its modified
                    else if(options.triggerOnTouchLeave && !inBounds ) {
                        phase = getNextPhase( PHASE_END );
                    }

                    if(phase==PHASE_CANCEL || phase==PHASE_END)	{
                        triggerHandler(event, phase);
                    }
                }
            }
            else {
                phase = PHASE_CANCEL;
                triggerHandler(event, phase);
            }

            if (ret === false) {
                phase = PHASE_CANCEL;
                triggerHandler(event, phase);
            }
        }



        /**
         * Event handler for a touch end event.
         * Calculate the direction and trigger events
         * @inner
         * @param {object} jqEvent The normalised jQuery event object.
         */
        function touchEnd(jqEvent) {

            //As we use Jquery bind for events, we need to target the original event object
            var event = jqEvent.originalEvent;


            //If we are still in a touch with another finger return
            //This allows us to wait a fraction and see if the other finger comes up, if it does within the threshold, then we treat it as a multi release, not a single release.
            if (SUPPORTS_TOUCH) {
                if(event.touches.length>0) {
                    startMultiFingerRelease();
                    return true;
                }
            }

            //If a previous finger has been released, check how long ago, if within the threshold, then assume it was a multifinger release.
            //This is used to allow 2 fingers to release fractionally after each other, whilst maintainig the event as containg 2 fingers, not 1
            if(inMultiFingerRelease()) {
                fingerCount=previousTouchFingerCount;
            }


            //call this on jq event so we are cross browser
            //jqEvent.preventDefault();



            //Set end of swipe
            endTime = getTimeStamp();


            //If we trigger handlers at end of swipe OR, we trigger during, but they didnt trigger and we are still in the move phase
            if (options.triggerOnTouchEnd || (options.triggerOnTouchEnd == false && phase === PHASE_MOVE)) {
                phase = PHASE_END;

                //The number of fingers we want were matched, or on desktop we ignore
                var hasCorrectFingerCount = ((fingerCount === options.fingers || options.fingers === ALL_FINGERS) || !SUPPORTS_TOUCH);

                //We have an end value for the finger
                var hasEndPoint = fingerData[0].end.x !== 0;

                //Check if the above conditions are met to make this swipe count...
                var isSwipe = hasCorrectFingerCount && hasEndPoint && (validatePinch() || validateSwipe());

                //If we are in a swipe, validate the time and distance...
                if (isSwipe) {
                    jqEvent.preventDefault();
                    triggerHandler(event, phase);
                } else {
                    phase = PHASE_CANCEL;
                    triggerHandler(event, phase);
                }
            }


            //Special case - A tap should always fire on touch end regardless,
            //So here we manually trigger the tap end handler by itself
            //We dont run trigger handler as it will re-trigger events that may have fired already
            else if (!options.triggerOnTouchEnd && hasTap()) {
                //Trigger the pinch events...
                jqEvent.preventDefault();
                phase = PHASE_END;
                triggerHandlerForGesture(event, phase, TAP);
            }
            else if (phase === PHASE_MOVE) {
                jqEvent.preventDefault();
                phase = PHASE_CANCEL;
                triggerHandler(event, phase);
            }

            setTouchInProgress(false);
        }



        /**
         * Event handler for a touch cancel event.
         * Clears current vars
         * @inner
         */
        function touchCancel() {
            // reset the variables back to default values
            fingerCount = 0;
            endTime = 0;
            startTime = 0;
            startTouchesDistance=0;
            endTouchesDistance=0;
            pinchZoom=1;

            //If we were in progress of tracking a possible multi touch end, then re set it.
            cancelMultiFingerRelease();

            setTouchInProgress(false);
        }


        /**
         * Event handler for a touch leave event.
         * This is only triggered on desktops, in touch we work this out manually
         * as the touchleave event is not supported in webkit
         * @inner
         */
        function touchLeave(jqEvent) {
            var event = jqEvent.originalEvent;

            //If we have the trigger on leve property set....
            if(options.triggerOnTouchLeave) {
                phase = getNextPhase( PHASE_END );
                triggerHandler(event, phase);
            }
        }

        /**
         * Removes all listeners that were associated with the plugin
         * @inner
         */
        function removeListeners() {
            $element.unbind(START_EV, touchStart);
            $element.unbind(CANCEL_EV, touchCancel);
            $element.unbind(MOVE_EV, touchMove);
            $element.unbind(END_EV, touchEnd);

            //we only have leave events on desktop, we manually calcuate leave on touch as its not supported in webkit
            if(LEAVE_EV) {
                $element.unbind(LEAVE_EV, touchLeave);
            }

            setTouchInProgress(false);
        }


        /**
         * Checks if the time and distance thresholds have been met, and if so then the appropriate handlers are fired.
         */
        function getNextPhase(currentPhase) {

            var nextPhase = currentPhase;

            // Ensure we have valid swipe (under time and over distance  and check if we are out of bound...)
            var validTime = validateSwipeTime();
            var validDistance = validateSwipeDistance();


            //If we have exceeded our time, then cancel
            if(!validTime) {
                nextPhase = PHASE_CANCEL;
            }
            //Else if we are moving, and have reached distance then end
            else if (validDistance && currentPhase == PHASE_MOVE && (!options.triggerOnTouchEnd || options.triggerOnTouchLeave) ) {
                nextPhase = PHASE_END;
            }
            //Else if we have ended by leaving and didnt reach distance, then cancel
            else if (!validDistance && currentPhase==PHASE_END && options.triggerOnTouchLeave) {
                nextPhase = PHASE_CANCEL;
            }


            return nextPhase;
        }


        /**
         * Trigger the relevant event handler
         * The handlers are passed the original event, the element that was swiped, and in the case of the catch all handler, the direction that was swiped, "left", "right", "up", or "down"
         * @param {object} event the original event object
         * @param {string} phase the phase of the swipe (start, end cancel etc) {@link $.fn.swipe.phases}
         * @inner
         */
        function triggerHandler(event, phase) {

            var ret = undefined;

            // SWIPE GESTURES
            if(hasSwipes()) {
                //Trigger the swipe events...
                ret = triggerHandlerForGesture(event, phase, SWIPE);
            }

            // PINCH GESTURES (if the above didnt cancel)
            if(hasPinches() && ret!==false) {
                //Trigger the pinch events...
                ret = triggerHandlerForGesture(event, phase, PINCH);
            }

            // CLICKS / TAPS (if the above didnt cancel)
            if(hasTap() && ret!==false) {
                //Trigger the pinch events...
                ret = triggerHandlerForGesture(event, phase, TAP);
            }

            // If we are cancelling the gesture, then manually trigger the reset handler
            if (phase === PHASE_CANCEL) {
                touchCancel(event);
            }

            // If we are ending the gesture, then manually trigger the reset handler IF all fingers are off
            if(phase === PHASE_END) {
                //If we support touch, then check that all fingers are off before we cancel
                if (SUPPORTS_TOUCH) {
                    if(event.touches.length==0) {
                        touchCancel(event);
                    }
                }
                else {
                    touchCancel(event);
                }
            }

            return ret;
        }



        /**
         * Trigger the relevant event handler
         * The handlers are passed the original event, the element that was swiped, and in the case of the catch all handler, the direction that was swiped, "left", "right", "up", or "down"
         * @param {object} event the original event object
         * @param {string} phase the phase of the swipe (start, end cancel etc) {@link $.fn.swipe.phases}
         * @param {string} gesture the gesture to triger a handler for : PINCH or SWIPE {@link $.fn.swipe.gestures}
         * @return Boolean False, to indicate that the event should stop propagation, or void.
         * @inner
         */
        function triggerHandlerForGesture(event, phase, gesture) {

            var ret=undefined;

            //SWIPES....
            if(gesture==SWIPE) {
                //Trigger status every time..

                //Trigger the event...
                $element.trigger('swipeStatus', [phase, direction || null, distance || 0, duration || 0, fingerCount]);

                //Fire the callback
                if (options.swipeStatus) {
                    ret = options.swipeStatus.call($element, event, phase, direction || null, distance || 0, duration || 0, fingerCount);
                    //If the status cancels, then dont run the subsequent event handlers..
                    if(ret===false) return false;
                }




                if (phase == PHASE_END && validateSwipe()) {
                    //Fire the catch all event
                    $element.trigger('swipe', [direction, distance, duration, fingerCount]);

                    //Fire catch all callback
                    if (options.swipe) {
                        ret = options.swipe.call($element, event, direction, distance, duration, fingerCount);
                        //If the status cancels, then dont run the subsequent event handlers..
                        if(ret===false) return false;
                    }

                    //trigger direction specific event handlers
                    switch (direction) {
                        case LEFT:
                            //Trigger the event
                            $element.trigger('swipeLeft', [direction, distance, duration, fingerCount]);

                            //Fire the callback
                            if (options.swipeLeft) {
                                ret = options.swipeLeft.call($element, event, direction, distance, duration, fingerCount);
                            }
                            break;

                        case RIGHT:
                            //Trigger the event
                            $element.trigger('swipeRight', [direction, distance, duration, fingerCount]);

                            //Fire the callback
                            if (options.swipeRight) {
                                ret = options.swipeRight.call($element, event, direction, distance, duration, fingerCount);
                            }
                            break;

                        case UP:
                            //Trigger the event
                            $element.trigger('swipeUp', [direction, distance, duration, fingerCount]);

                            //Fire the callback
                            if (options.swipeUp) {
                                ret = options.swipeUp.call($element, event, direction, distance, duration, fingerCount);
                            }
                            break;

                        case DOWN:
                            //Trigger the event
                            $element.trigger('swipeDown', [direction, distance, duration, fingerCount]);

                            //Fire the callback
                            if (options.swipeDown) {
                                ret = options.swipeDown.call($element, event, direction, distance, duration, fingerCount);
                            }
                            break;
                    }
                }
            }


            //PINCHES....
            if(gesture==PINCH) {
                //Trigger the event
                $element.trigger('pinchStatus', [phase, pinchDirection || null, pinchDistance || 0, duration || 0, fingerCount, pinchZoom]);

                //Fire the callback
                if (options.pinchStatus) {
                    ret = options.pinchStatus.call($element, event, phase, pinchDirection || null, pinchDistance || 0, duration || 0, fingerCount, pinchZoom);
                    //If the status cancels, then dont run the subsequent event handlers..
                    if(ret===false) return false;
                }

                if(phase==PHASE_END && validatePinch()) {

                    switch (pinchDirection) {
                        case IN:
                            //Trigger the event
                            $element.trigger('pinchIn', [pinchDirection || null, pinchDistance || 0, duration || 0, fingerCount, pinchZoom]);

                            //Fire the callback
                            if (options.pinchIn) {
                                ret = options.pinchIn.call($element, event, pinchDirection || null, pinchDistance || 0, duration || 0, fingerCount, pinchZoom);
                            }
                            break;

                        case OUT:
                            //Trigger the event
                            $element.trigger('pinchOut', [pinchDirection || null, pinchDistance || 0, duration || 0, fingerCount, pinchZoom]);

                            //Fire the callback
                            if (options.pinchOut) {
                                ret = options.pinchOut.call($element, event, pinchDirection || null, pinchDistance || 0, duration || 0, fingerCount, pinchZoom);
                            }
                            break;
                    }
                }
            }


            //CLICKS...
            if(gesture==TAP) {
                if(phase === PHASE_CANCEL || phase === PHASE_END) {
                    if ((fingerCount === 1 || !SUPPORTS_TOUCH) && (isNaN(distance) || distance === 0)) {
                        //Trigger the event
                        $element.trigger('tap', [event.target]);

                        //Fire the callback
                        if(options.tap) {
                            ret = options.tap.call($element, event, event.target);
                        }
                    }
                }
            }

            return ret;
        }




        //
        // GESTURE VALIDATION
        //

        /**
         * Checks the user has swipe far enough
         * @return Boolean if <code>threshold</code> has been set, return true if the threshold was met, else false.
         * If no threshold was set, then we return true.
         * @inner
         */
        function validateSwipeDistance() {
            var valid = true;
            //If we made it past the min swipe distance..
            if (options.threshold !== null) {
                valid = distance >= options.threshold;
            }

            //And we didn't swipe back to cancel...
            if(valid && options.cancelThreshold !== null) {
                valid =  (getMaxDistance( direction ) - distance) < options.cancelThreshold;
            }

            return valid;
        }

        /**
         * Checks the user has pinched far enough
         * @return Boolean if <code>pinchThreshold</code> has been set, return true if the threshold was met, else false.
         * If no threshold was set, then we return true.
         * @inner
         */
        function validatePinchDistance() {
            if (options.pinchThreshold !== null) {
                return pinchDistance >= options.pinchThreshold;
            }
            return true;
        }

        /**
         * Checks that the time taken to swipe meets the minimum / maximum requirements
         * @return Boolean
         * @inner
         */
        function validateSwipeTime() {
            var result;
            //If no time set, then return true

            if (options.maxTimeThreshold) {
                if (duration >= options.maxTimeThreshold) {
                    result = false;
                } else {
                    result = true;
                }
            }
            else {
                result = true;
            }

            return result;
        }


        /**
         * Checks direction of the swipe and the value allowPageScroll to see if we should allow or prevent the default behaviour from occurring.
         * This will essentially allow page scrolling or not when the user is swiping on a touchSwipe object.
         * @param {object} jqEvent The normalised jQuery representation of the event object.
         * @param {string} direction The direction of the event. See {@link $.fn.swipe.directions}
         * @see $.fn.swipe.directions
         * @inner
         */
        function validateDefaultEvent(jqEvent, direction) {
            if (options.allowPageScroll === NONE || hasPinches()) {
                jqEvent.preventDefault();
            } else {
                var auto = options.allowPageScroll === AUTO;

                switch (direction) {
                    case LEFT:
                        if ((options.swipeLeft && auto) || (!auto && options.allowPageScroll != HORIZONTAL)) {
                            jqEvent.preventDefault();
                        }
                        break;

                    case RIGHT:
                        if ((options.swipeRight && auto) || (!auto && options.allowPageScroll != HORIZONTAL)) {
                            jqEvent.preventDefault();
                        }
                        break;

                    case UP:
                        if ((options.swipeUp && auto) || (!auto && options.allowPageScroll != VERTICAL)) {
                            jqEvent.preventDefault();
                        }
                        break;

                    case DOWN:
                        if ((options.swipeDown && auto) || (!auto && options.allowPageScroll != VERTICAL)) {
                            jqEvent.preventDefault();
                        }
                        break;
                }
            }

        }


        // PINCHES
        /**
         * Returns true of the current pinch meets the thresholds
         * @return Boolean
         * @inner
         */
        function validatePinch() {
            return validatePinchDistance();;
        }

        /**
         * Returns true if any Pinch events have been registered
         * @return Boolean
         * @inner
         */
        function hasPinches() {
            //Enure we dont return 0 or null for false values
            return !!(options.pinchStatus || options.pinchIn || options.pinchOut);
        }

        /**
         * Returns true if we are detecting pinches, and have one
         * @return Boolean
         * @inner
         */
        function didPinch() {
            //Enure we dont return 0 or null for false values
            return !!(validatePinch() && hasPinches());
        }




        // SWIPES
        /**
         * Returns true if the current swipe meets the thresholds
         * @return Boolean
         * @inner
         */
        function validateSwipe() {
            //Check validity of swipe
            var hasValidTime = validateSwipeTime();
            var hasValidDistance = validateSwipeDistance();

            // if the user swiped more than the minimum length, perform the appropriate action
            // hasValidDistance is null when no distance is set
            var valid =  hasValidDistance && hasValidTime;

            return valid;
        }

        /**
         * Returns true if any Swipe events have been registered
         * @return Boolean
         * @inner
         */
        function hasSwipes() {
            //Enure we dont return 0 or null for false values
            return !!(options.swipe || options.swipeStatus || options.swipeLeft || options.swipeRight || options.swipeUp || options.swipeDown);
        }


        /**
         * Returns true if we are detecting swipes and have one
         * @return Boolean
         * @inner
         */
        function didSwipe() {
            //Enure we dont return 0 or null for false values
            return !!(validateSwipe() && hasSwipes());
        }


        // TAP / CLICK
        /**
         * Returns true of any clcik / tap evetns have been registered
         * @return Boolean
         * @inner
         */
        function hasTap() {
            //Enure we dont return 0 or null for false values
            return !!(options.tap);
        }


        // MULTI FINGER TOUCH
        /**
         * Starts tracking the time between 2 finger releases, and keeps track of how many fingers we initially had up
         * @inner
         */
        function startMultiFingerRelease() {
            previousTouchEndTime = getTimeStamp();
            previousTouchFingerCount = event.touches.length+1;
        }

        /**
         * Cancels the tracking of time between 2 finger releases, and resets counters
         * @inner
         */
        function cancelMultiFingerRelease() {
            previousTouchEndTime = 0;
            previousTouchFingerCount = 0;
        }

        /**
         * Checks if we are in the threshold between 2 fingers being released
         * @return Boolean
         * @inner
         */
        function inMultiFingerRelease() {

            var withinThreshold = false;

            if(previousTouchEndTime) {
                var diff = getTimeStamp() - previousTouchEndTime
                if( diff<=options.fingerReleaseThreshold ) {
                    withinThreshold = true;
                }
            }

            return withinThreshold;
        }


        /**
         * gets a data flag to indicate that a touch is in progress
         * @return Boolean
         * @inner
         */
        function getTouchInProgress() {
            //strict equality to ensure only true and false are returned
            return !!($element.data(PLUGIN_NS+'_intouch') === true);
        }

        /**
         * Sets a data flag to indicate that a touch is in progress
         * @param {boolean} val The value to set the property to
         * @inner
         */
        function setTouchInProgress(val) {

            //Add or remove event listeners depending on touch status
            if(val===true) {
                $element.bind(MOVE_EV, touchMove);
                $element.bind(END_EV, touchEnd);

                //we only have leave events on desktop, we manually calcuate leave on touch as its not supported in webkit
                if(LEAVE_EV) {
                    $element.bind(LEAVE_EV, touchLeave);
                }
            } else {
                $element.unbind(MOVE_EV, touchMove, false);
                $element.unbind(END_EV, touchEnd, false);

                //we only have leave events on desktop, we manually calcuate leave on touch as its not supported in webkit
                if(LEAVE_EV) {
                    $element.unbind(LEAVE_EV, touchLeave, false);
                }
            }


            //strict equality to ensure only true and false can update the value
            $element.data(PLUGIN_NS+'_intouch', val === true);
        }


        /**
         * Creates the finger data for the touch/finger in the event object.
         * @param {int} index The index in the array to store the finger data (usually the order the fingers were pressed)
         * @param {object} evt The event object containing finger data
         * @return finger data object
         * @inner
         */
        function createFingerData( index, evt ) {
            var id = evt.identifier!==undefined ? evt.identifier : 0;

            fingerData[index].identifier = id;
            fingerData[index].start.x = fingerData[index].end.x = evt.pageX||evt.clientX;
            fingerData[index].start.y = fingerData[index].end.y = evt.pageY||evt.clientY;

            return fingerData[index];
        }

        /**
         * Updates the finger data for a particular event object
         * @param {object} evt The event object containing the touch/finger data to upadte
         * @return a finger data object.
         * @inner
         */
        function updateFingerData(evt) {

            var id = evt.identifier!==undefined ? evt.identifier : 0;
            var f = getFingerData( id );

            f.end.x = evt.pageX||evt.clientX;
            f.end.y = evt.pageY||evt.clientY;

            return f;
        }

        /**
         * Returns a finger data object by its event ID.
         * Each touch event has an identifier property, which is used
         * to track repeat touches
         * @param {int} id The unique id of the finger in the sequence of touch events.
         * @return a finger data object.
         * @inner
         */
        function getFingerData( id ) {
            for(var i=0; i<fingerData.length; i++) {
                if(fingerData[i].identifier == id) {
                    return fingerData[i];
                }
            }
        }

        /**
         * Creats all the finger onjects and returns an array of finger data
         * @return Array of finger objects
         * @inner
         */
        function createAllFingerData() {
            var fingerData=[];
            for (var i=0; i<=5; i++) {
                fingerData.push({
                    start:{ x: 0, y: 0 },
                    end:{ x: 0, y: 0 },
                    identifier:0
                });
            }

            return fingerData;
        }

        /**
         * Sets the maximum distance swiped in the given direction.
         * If the new value is lower than the current value, the max value is not changed.
         * @param {string}  direction The direction of the swipe
         * @param {int}  distance The distance of the swipe
         * @inner
         */
        function setMaxDistance(direction, distance) {
            distance = Math.max(distance, getMaxDistance(direction) );
            maximumsMap[direction].distance = distance;
        }

        /**
         * gets the maximum distance swiped in the given direction.
         * @param {string}  direction The direction of the swipe
         * @return int  The distance of the swipe
         * @inner
         */
        function getMaxDistance(direction) {
            return maximumsMap[direction].distance;
        }

        /**
         * Creats a map of directions to maximum swiped values.
         * @return Object A dictionary of maximum values, indexed by direction.
         * @inner
         */
        function createMaximumsData() {
            var maxData={};
            maxData[LEFT]=createMaximumVO(LEFT);
            maxData[RIGHT]=createMaximumVO(RIGHT);
            maxData[UP]=createMaximumVO(UP);
            maxData[DOWN]=createMaximumVO(DOWN);

            return maxData;
        }

        /**
         * Creates a map maximum swiped values for a given swipe direction
         * @param {string} The direction that these values will be associated with
         * @return Object Maximum values
         * @inner
         */
        function createMaximumVO(dir) {
            return {
                direction:dir,
                distance:0
            }
        }


        //
        // MATHS / UTILS
        //

        /**
         * Calculate the duration of the swipe
         * @return int
         * @inner
         */
        function calculateDuration() {
            return endTime - startTime;
        }

        /**
         * Calculate the distance between 2 touches (pinch)
         * @param {point} startPoint A point object containing x and y co-ordinates
         * @param {point} endPoint A point object containing x and y co-ordinates
         * @return int;
         * @inner
         */
        function calculateTouchesDistance(startPoint, endPoint) {
            var diffX = Math.abs(startPoint.x - endPoint.x);
            var diffY = Math.abs(startPoint.y - endPoint.y);

            return Math.round(Math.sqrt(diffX*diffX+diffY*diffY));
        }

        /**
         * Calculate the zoom factor between the start and end distances
         * @param {int} startDistance Distance (between 2 fingers) the user started pinching at
         * @param {int} endDistance Distance (between 2 fingers) the user ended pinching at
         * @return float The zoom value from 0 to 1.
         * @inner
         */
        function calculatePinchZoom(startDistance, endDistance) {
            var percent = (endDistance/startDistance) * 1;
            return percent.toFixed(2);
        }


        /**
         * Returns the pinch direction, either IN or OUT for the given points
         * @return string Either {@link $.fn.swipe.directions.IN} or {@link $.fn.swipe.directions.OUT}
         * @see $.fn.swipe.directions
         * @inner
         */
        function calculatePinchDirection() {
            if(pinchZoom<1) {
                return OUT;
            }
            else {
                return IN;
            }
        }


        /**
         * Calculate the length / distance of the swipe
         * @param {point} startPoint A point object containing x and y co-ordinates
         * @param {point} endPoint A point object containing x and y co-ordinates
         * @return int
         * @inner
         */
        function calculateDistance(startPoint, endPoint) {
            return Math.round(Math.sqrt(Math.pow(endPoint.x - startPoint.x, 2) + Math.pow(endPoint.y - startPoint.y, 2)));
        }

        /**
         * Calculate the angle of the swipe
         * @param {point} startPoint A point object containing x and y co-ordinates
         * @param {point} endPoint A point object containing x and y co-ordinates
         * @return int
         * @inner
         */
        function calculateAngle(startPoint, endPoint) {
            var x = startPoint.x - endPoint.x;
            var y = endPoint.y - startPoint.y;
            var r = Math.atan2(y, x); //radians
            var angle = Math.round(r * 180 / Math.PI); //degrees

            //ensure value is positive
            if (angle < 0) {
                angle = 360 - Math.abs(angle);
            }

            return angle;
        }

        /**
         * Calculate the direction of the swipe
         * This will also call calculateAngle to get the latest angle of swipe
         * @param {point} startPoint A point object containing x and y co-ordinates
         * @param {point} endPoint A point object containing x and y co-ordinates
         * @return string Either {@link $.fn.swipe.directions.LEFT} / {@link $.fn.swipe.directions.RIGHT} / {@link $.fn.swipe.directions.DOWN} / {@link $.fn.swipe.directions.UP}
         * @see $.fn.swipe.directions
         * @inner
         */
        function calculateDirection(startPoint, endPoint ) {
            var angle = calculateAngle(startPoint, endPoint);

            if ((angle <= 45) && (angle >= 0)) {
                return LEFT;
            } else if ((angle <= 360) && (angle >= 315)) {
                return LEFT;
            } else if ((angle >= 135) && (angle <= 225)) {
                return RIGHT;
            } else if ((angle > 45) && (angle < 135)) {
                return DOWN;
            } else {
                return UP;
            }
        }


        /**
         * Returns a MS time stamp of the current time
         * @return int
         * @inner
         */
        function getTimeStamp() {
            var now = new Date();
            return now.getTime();
        }



        /**
         * Returns a bounds object with left, right, top and bottom properties for the element specified.
         * @param {DomNode} The DOM node to get the bounds for.
         */
        function getbounds( el ) {
            el = $(el);
            var offset = el.offset();

            var bounds = {
                left:offset.left,
                right:offset.left+el.outerWidth(),
                top:offset.top,
                bottom:offset.top+el.outerHeight()
            }

            return bounds;
        }


        /**
         * Checks if the point object is in the bounds object.
         * @param {object} point A point object.
         * @param {int} point.x The x value of the point.
         * @param {int} point.y The x value of the point.
         * @param {object} bounds The bounds object to test
         * @param {int} bounds.left The leftmost value
         * @param {int} bounds.right The righttmost value
         * @param {int} bounds.top The topmost value
         * @param {int} bounds.bottom The bottommost value
         */
        function isInBounds(point, bounds) {
            return (point.x > bounds.left && point.x < bounds.right && point.y > bounds.top && point.y < bounds.bottom);
        };


    }




    /**
     * A catch all handler that is triggered for all swipe directions.
     * @name $.fn.swipe#swipe
     * @event
     * @default null
     * @param {EventObject} event The original event object
     * @param {int} direction The direction the user swiped in. See {@link $.fn.swipe.directions}
     * @param {int} distance The distance the user swiped
     * @param {int} duration The duration of the swipe in milliseconds
     * @param {int} fingerCount The number of fingers used. See {@link $.fn.swipe.fingers}
     */




    /**
     * A handler that is triggered for "left" swipes.
     * @name $.fn.swipe#swipeLeft
     * @event
     * @default null
     * @param {EventObject} event The original event object
     * @param {int} direction The direction the user swiped in. See {@link $.fn.swipe.directions}
     * @param {int} distance The distance the user swiped
     * @param {int} duration The duration of the swipe in milliseconds
     * @param {int} fingerCount The number of fingers used. See {@link $.fn.swipe.fingers}
     */

    /**
     * A handler that is triggered for "right" swipes.
     * @name $.fn.swipe#swipeRight
     * @event
     * @default null
     * @param {EventObject} event The original event object
     * @param {int} direction The direction the user swiped in. See {@link $.fn.swipe.directions}
     * @param {int} distance The distance the user swiped
     * @param {int} duration The duration of the swipe in milliseconds
     * @param {int} fingerCount The number of fingers used. See {@link $.fn.swipe.fingers}
     */

    /**
     * A handler that is triggered for "up" swipes.
     * @name $.fn.swipe#swipeUp
     * @event
     * @default null
     * @param {EventObject} event The original event object
     * @param {int} direction The direction the user swiped in. See {@link $.fn.swipe.directions}
     * @param {int} distance The distance the user swiped
     * @param {int} duration The duration of the swipe in milliseconds
     * @param {int} fingerCount The number of fingers used. See {@link $.fn.swipe.fingers}
     */

    /**
     * A handler that is triggered for "down" swipes.
     * @name $.fn.swipe#swipeDown
     * @event
     * @default null
     * @param {EventObject} event The original event object
     * @param {int} direction The direction the user swiped in. See {@link $.fn.swipe.directions}
     * @param {int} distance The distance the user swiped
     * @param {int} duration The duration of the swipe in milliseconds
     * @param {int} fingerCount The number of fingers used. See {@link $.fn.swipe.fingers}
     */

    /**
     * A handler triggered for every phase of the swipe. This handler is constantly fired for the duration of the pinch.
     * This is triggered regardless of swipe thresholds.
     * @name $.fn.swipe#swipeStatus
     * @event
     * @default null
     * @param {EventObject} event The original event object
     * @param {string} phase The phase of the swipe event. See {@link $.fn.swipe.phases}
     * @param {string} direction The direction the user swiped in. This is null if the user has yet to move. See {@link $.fn.swipe.directions}
     * @param {int} distance The distance the user swiped. This is 0 if the user has yet to move.
     * @param {int} duration The duration of the swipe in milliseconds
     * @param {int} fingerCount The number of fingers used. See {@link $.fn.swipe.fingers}
     */

    /**
     * A handler triggered for pinch in events.
     * @name $.fn.swipe#pinchIn
     * @event
     * @default null
     * @param {EventObject} event The original event object
     * @param {int} direction The direction the user pinched in. See {@link $.fn.swipe.directions}
     * @param {int} distance The distance the user pinched
     * @param {int} duration The duration of the swipe in milliseconds
     * @param {int} fingerCount The number of fingers used. See {@link $.fn.swipe.fingers}
     * @param {int} zoom The zoom/scale level the user pinched too, 0-1.
     */

    /**
     * A handler triggered for pinch out events.
     * @name $.fn.swipe#pinchOut
     * @event
     * @default null
     * @param {EventObject} event The original event object
     * @param {int} direction The direction the user pinched in. See {@link $.fn.swipe.directions}
     * @param {int} distance The distance the user pinched
     * @param {int} duration The duration of the swipe in milliseconds
     * @param {int} fingerCount The number of fingers used. See {@link $.fn.swipe.fingers}
     * @param {int} zoom The zoom/scale level the user pinched too, 0-1.
     */

    /**
     * A handler triggered for all pinch events. This handler is constantly fired for the duration of the pinch. This is triggered regardless of thresholds.
     * @name $.fn.swipe#pinchStatus
     * @event
     * @default null
     * @param {EventObject} event The original event object
     * @param {int} direction The direction the user pinched in. See {@link $.fn.swipe.directions}
     * @param {int} distance The distance the user pinched
     * @param {int} duration The duration of the swipe in milliseconds
     * @param {int} fingerCount The number of fingers used. See {@link $.fn.swipe.fingers}
     * @param {int} zoom The zoom/scale level the user pinched too, 0-1.
     */

    /**
     * A click handler triggered when a user simply clicks, rather than swipes on an element.
     * This is deprecated since version 1.6.2, any assignment to click will be assigned to the tap handler.
     * You cannot use <code>on</code> to bind to this event as the default jQ <code>click</code> event will be triggered.
     * Use the <code>tap</code> event instead.
     * @name $.fn.swipe#click
     * @event
     * @deprecated since version 1.6.2, please use {@link $.fn.swipe#tap} instead
     * @default null
     * @param {EventObject} event The original event object
     * @param {DomObject} target The element clicked on.
     */

    /**
     * A click / tap handler triggered when a user simply clicks or taps, rather than swipes on an element.
     * @name $.fn.swipe#tap
     * @event
     * @default null
     * @param {EventObject} event The original event object
     * @param {DomObject} target The element clicked on.
     */

})(jQuery);
/*! jQuery UI - v1.12.1 - 2016-09-14
* http://jqueryui.com
* Includes: widget.js, position.js, data.js, disable-selection.js, effect.js, effects/effect-blind.js, effects/effect-bounce.js, effects/effect-clip.js, effects/effect-drop.js, effects/effect-explode.js, effects/effect-fade.js, effects/effect-fold.js, effects/effect-highlight.js, effects/effect-puff.js, effects/effect-pulsate.js, effects/effect-scale.js, effects/effect-shake.js, effects/effect-size.js, effects/effect-slide.js, effects/effect-transfer.js, focusable.js, form-reset-mixin.js, jquery-1-7.js, keycode.js, labels.js, scroll-parent.js, tabbable.js, unique-id.js, widgets/accordion.js, widgets/autocomplete.js, widgets/button.js, widgets/checkboxradio.js, widgets/controlgroup.js, widgets/datepicker.js, widgets/dialog.js, widgets/draggable.js, widgets/droppable.js, widgets/menu.js, widgets/mouse.js, widgets/progressbar.js, widgets/resizable.js, widgets/selectable.js, widgets/selectmenu.js, widgets/slider.js, widgets/sortable.js, widgets/spinner.js, widgets/tabs.js, widgets/tooltip.js
* Copyright jQuery Foundation and other contributors; Licensed MIT */

(function( factory ) {
	if ( typeof define === "function" && define.amd ) {

		// AMD. Register as an anonymous module.
		define([ "jquery" ], factory );
	} else {

		// Browser globals
		factory( jQuery );
	}
}(function( $ ) {

$.ui = $.ui || {};

var version = $.ui.version = "1.12.1";


/*!
 * jQuery UI Widget 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Widget
//>>group: Core
//>>description: Provides a factory for creating stateful widgets with a common API.
//>>docs: http://api.jqueryui.com/jQuery.widget/
//>>demos: http://jqueryui.com/widget/



var widgetUuid = 0;
var widgetSlice = Array.prototype.slice;

$.cleanData = ( function( orig ) {
	return function( elems ) {
		var events, elem, i;
		for ( i = 0; ( elem = elems[ i ] ) != null; i++ ) {
			try {

				// Only trigger remove when necessary to save time
				events = $._data( elem, "events" );
				if ( events && events.remove ) {
					$( elem ).triggerHandler( "remove" );
				}

			// Http://bugs.jquery.com/ticket/8235
			} catch ( e ) {}
		}
		orig( elems );
	};
} )( $.cleanData );

$.widget = function( name, base, prototype ) {
	var existingConstructor, constructor, basePrototype;

	// ProxiedPrototype allows the provided prototype to remain unmodified
	// so that it can be used as a mixin for multiple widgets (#8876)
	var proxiedPrototype = {};

	var namespace = name.split( "." )[ 0 ];
	name = name.split( "." )[ 1 ];
	var fullName = namespace + "-" + name;

	if ( !prototype ) {
		prototype = base;
		base = $.Widget;
	}

	if ( $.isArray( prototype ) ) {
		prototype = $.extend.apply( null, [ {} ].concat( prototype ) );
	}

	// Create selector for plugin
	$.expr[ ":" ][ fullName.toLowerCase() ] = function( elem ) {
		return !!$.data( elem, fullName );
	};

	$[ namespace ] = $[ namespace ] || {};
	existingConstructor = $[ namespace ][ name ];
	constructor = $[ namespace ][ name ] = function( options, element ) {

		// Allow instantiation without "new" keyword
		if ( !this._createWidget ) {
			return new constructor( options, element );
		}

		// Allow instantiation without initializing for simple inheritance
		// must use "new" keyword (the code above always passes args)
		if ( arguments.length ) {
			this._createWidget( options, element );
		}
	};

	// Extend with the existing constructor to carry over any static properties
	$.extend( constructor, existingConstructor, {
		version: prototype.version,

		// Copy the object used to create the prototype in case we need to
		// redefine the widget later
		_proto: $.extend( {}, prototype ),

		// Track widgets that inherit from this widget in case this widget is
		// redefined after a widget inherits from it
		_childConstructors: []
	} );

	basePrototype = new base();

	// We need to make the options hash a property directly on the new instance
	// otherwise we'll modify the options hash on the prototype that we're
	// inheriting from
	basePrototype.options = $.widget.extend( {}, basePrototype.options );
	$.each( prototype, function( prop, value ) {
		if ( !$.isFunction( value ) ) {
			proxiedPrototype[ prop ] = value;
			return;
		}
		proxiedPrototype[ prop ] = ( function() {
			function _super() {
				return base.prototype[ prop ].apply( this, arguments );
			}

			function _superApply( args ) {
				return base.prototype[ prop ].apply( this, args );
			}

			return function() {
				var __super = this._super;
				var __superApply = this._superApply;
				var returnValue;

				this._super = _super;
				this._superApply = _superApply;

				returnValue = value.apply( this, arguments );

				this._super = __super;
				this._superApply = __superApply;

				return returnValue;
			};
		} )();
	} );
	constructor.prototype = $.widget.extend( basePrototype, {

		// TODO: remove support for widgetEventPrefix
		// always use the name + a colon as the prefix, e.g., draggable:start
		// don't prefix for widgets that aren't DOM-based
		widgetEventPrefix: existingConstructor ? ( basePrototype.widgetEventPrefix || name ) : name
	}, proxiedPrototype, {
		constructor: constructor,
		namespace: namespace,
		widgetName: name,
		widgetFullName: fullName
	} );

	// If this widget is being redefined then we need to find all widgets that
	// are inheriting from it and redefine all of them so that they inherit from
	// the new version of this widget. We're essentially trying to replace one
	// level in the prototype chain.
	if ( existingConstructor ) {
		$.each( existingConstructor._childConstructors, function( i, child ) {
			var childPrototype = child.prototype;

			// Redefine the child widget using the same prototype that was
			// originally used, but inherit from the new version of the base
			$.widget( childPrototype.namespace + "." + childPrototype.widgetName, constructor,
				child._proto );
		} );

		// Remove the list of existing child constructors from the old constructor
		// so the old child constructors can be garbage collected
		delete existingConstructor._childConstructors;
	} else {
		base._childConstructors.push( constructor );
	}

	$.widget.bridge( name, constructor );

	return constructor;
};

$.widget.extend = function( target ) {
	var input = widgetSlice.call( arguments, 1 );
	var inputIndex = 0;
	var inputLength = input.length;
	var key;
	var value;

	for ( ; inputIndex < inputLength; inputIndex++ ) {
		for ( key in input[ inputIndex ] ) {
			value = input[ inputIndex ][ key ];
			if ( input[ inputIndex ].hasOwnProperty( key ) && value !== undefined ) {

				// Clone objects
				if ( $.isPlainObject( value ) ) {
					target[ key ] = $.isPlainObject( target[ key ] ) ?
						$.widget.extend( {}, target[ key ], value ) :

						// Don't extend strings, arrays, etc. with objects
						$.widget.extend( {}, value );

				// Copy everything else by reference
				} else {
					target[ key ] = value;
				}
			}
		}
	}
	return target;
};

$.widget.bridge = function( name, object ) {
	var fullName = object.prototype.widgetFullName || name;
	$.fn[ name ] = function( options ) {
		var isMethodCall = typeof options === "string";
		var args = widgetSlice.call( arguments, 1 );
		var returnValue = this;

		if ( isMethodCall ) {

			// If this is an empty collection, we need to have the instance method
			// return undefined instead of the jQuery instance
			if ( !this.length && options === "instance" ) {
				returnValue = undefined;
			} else {
				this.each( function() {
					var methodValue;
					var instance = $.data( this, fullName );

					if ( options === "instance" ) {
						returnValue = instance;
						return false;
					}

					if ( !instance ) {
						return $.error( "cannot call methods on " + name +
							" prior to initialization; " +
							"attempted to call method '" + options + "'" );
					}

					if ( !$.isFunction( instance[ options ] ) || options.charAt( 0 ) === "_" ) {
						return $.error( "no such method '" + options + "' for " + name +
							" widget instance" );
					}

					methodValue = instance[ options ].apply( instance, args );

					if ( methodValue !== instance && methodValue !== undefined ) {
						returnValue = methodValue && methodValue.jquery ?
							returnValue.pushStack( methodValue.get() ) :
							methodValue;
						return false;
					}
				} );
			}
		} else {

			// Allow multiple hashes to be passed on init
			if ( args.length ) {
				options = $.widget.extend.apply( null, [ options ].concat( args ) );
			}

			this.each( function() {
				var instance = $.data( this, fullName );
				if ( instance ) {
					instance.option( options || {} );
					if ( instance._init ) {
						instance._init();
					}
				} else {
					$.data( this, fullName, new object( options, this ) );
				}
			} );
		}

		return returnValue;
	};
};

$.Widget = function( /* options, element */ ) {};
$.Widget._childConstructors = [];

$.Widget.prototype = {
	widgetName: "widget",
	widgetEventPrefix: "",
	defaultElement: "<div>",

	options: {
		classes: {},
		disabled: false,

		// Callbacks
		create: null
	},

	_createWidget: function( options, element ) {
		element = $( element || this.defaultElement || this )[ 0 ];
		this.element = $( element );
		this.uuid = widgetUuid++;
		this.eventNamespace = "." + this.widgetName + this.uuid;

		this.bindings = $();
		this.hoverable = $();
		this.focusable = $();
		this.classesElementLookup = {};

		if ( element !== this ) {
			$.data( element, this.widgetFullName, this );
			this._on( true, this.element, {
				remove: function( event ) {
					if ( event.target === element ) {
						this.destroy();
					}
				}
			} );
			this.document = $( element.style ?

				// Element within the document
				element.ownerDocument :

				// Element is window or document
				element.document || element );
			this.window = $( this.document[ 0 ].defaultView || this.document[ 0 ].parentWindow );
		}

		this.options = $.widget.extend( {},
			this.options,
			this._getCreateOptions(),
			options );

		this._create();

		if ( this.options.disabled ) {
			this._setOptionDisabled( this.options.disabled );
		}

		this._trigger( "create", null, this._getCreateEventData() );
		this._init();
	},

	_getCreateOptions: function() {
		return {};
	},

	_getCreateEventData: $.noop,

	_create: $.noop,

	_init: $.noop,

	destroy: function() {
		var that = this;

		this._destroy();
		$.each( this.classesElementLookup, function( key, value ) {
			that._removeClass( value, key );
		} );

		// We can probably remove the unbind calls in 2.0
		// all event bindings should go through this._on()
		this.element
			.off( this.eventNamespace )
			.removeData( this.widgetFullName );
		this.widget()
			.off( this.eventNamespace )
			.removeAttr( "aria-disabled" );

		// Clean up events and states
		this.bindings.off( this.eventNamespace );
	},

	_destroy: $.noop,

	widget: function() {
		return this.element;
	},

	option: function( key, value ) {
		var options = key;
		var parts;
		var curOption;
		var i;

		if ( arguments.length === 0 ) {

			// Don't return a reference to the internal hash
			return $.widget.extend( {}, this.options );
		}

		if ( typeof key === "string" ) {

			// Handle nested keys, e.g., "foo.bar" => { foo: { bar: ___ } }
			options = {};
			parts = key.split( "." );
			key = parts.shift();
			if ( parts.length ) {
				curOption = options[ key ] = $.widget.extend( {}, this.options[ key ] );
				for ( i = 0; i < parts.length - 1; i++ ) {
					curOption[ parts[ i ] ] = curOption[ parts[ i ] ] || {};
					curOption = curOption[ parts[ i ] ];
				}
				key = parts.pop();
				if ( arguments.length === 1 ) {
					return curOption[ key ] === undefined ? null : curOption[ key ];
				}
				curOption[ key ] = value;
			} else {
				if ( arguments.length === 1 ) {
					return this.options[ key ] === undefined ? null : this.options[ key ];
				}
				options[ key ] = value;
			}
		}

		this._setOptions( options );

		return this;
	},

	_setOptions: function( options ) {
		var key;

		for ( key in options ) {
			this._setOption( key, options[ key ] );
		}

		return this;
	},

	_setOption: function( key, value ) {
		if ( key === "classes" ) {
			this._setOptionClasses( value );
		}

		this.options[ key ] = value;

		if ( key === "disabled" ) {
			this._setOptionDisabled( value );
		}

		return this;
	},

	_setOptionClasses: function( value ) {
		var classKey, elements, currentElements;

		for ( classKey in value ) {
			currentElements = this.classesElementLookup[ classKey ];
			if ( value[ classKey ] === this.options.classes[ classKey ] ||
					!currentElements ||
					!currentElements.length ) {
				continue;
			}

			// We are doing this to create a new jQuery object because the _removeClass() call
			// on the next line is going to destroy the reference to the current elements being
			// tracked. We need to save a copy of this collection so that we can add the new classes
			// below.
			elements = $( currentElements.get() );
			this._removeClass( currentElements, classKey );

			// We don't use _addClass() here, because that uses this.options.classes
			// for generating the string of classes. We want to use the value passed in from
			// _setOption(), this is the new value of the classes option which was passed to
			// _setOption(). We pass this value directly to _classes().
			elements.addClass( this._classes( {
				element: elements,
				keys: classKey,
				classes: value,
				add: true
			} ) );
		}
	},

	_setOptionDisabled: function( value ) {
		this._toggleClass( this.widget(), this.widgetFullName + "-disabled", null, !!value );

		// If the widget is becoming disabled, then nothing is interactive
		if ( value ) {
			this._removeClass( this.hoverable, null, "ui-state-hover" );
			this._removeClass( this.focusable, null, "ui-state-focus" );
		}
	},

	enable: function() {
		return this._setOptions( { disabled: false } );
	},

	disable: function() {
		return this._setOptions( { disabled: true } );
	},

	_classes: function( options ) {
		var full = [];
		var that = this;

		options = $.extend( {
			element: this.element,
			classes: this.options.classes || {}
		}, options );

		function processClassString( classes, checkOption ) {
			var current, i;
			for ( i = 0; i < classes.length; i++ ) {
				current = that.classesElementLookup[ classes[ i ] ] || $();
				if ( options.add ) {
					current = $( $.unique( current.get().concat( options.element.get() ) ) );
				} else {
					current = $( current.not( options.element ).get() );
				}
				that.classesElementLookup[ classes[ i ] ] = current;
				full.push( classes[ i ] );
				if ( checkOption && options.classes[ classes[ i ] ] ) {
					full.push( options.classes[ classes[ i ] ] );
				}
			}
		}

		this._on( options.element, {
			"remove": "_untrackClassesElement"
		} );

		if ( options.keys ) {
			processClassString( options.keys.match( /\S+/g ) || [], true );
		}
		if ( options.extra ) {
			processClassString( options.extra.match( /\S+/g ) || [] );
		}

		return full.join( " " );
	},

	_untrackClassesElement: function( event ) {
		var that = this;
		$.each( that.classesElementLookup, function( key, value ) {
			if ( $.inArray( event.target, value ) !== -1 ) {
				that.classesElementLookup[ key ] = $( value.not( event.target ).get() );
			}
		} );
	},

	_removeClass: function( element, keys, extra ) {
		return this._toggleClass( element, keys, extra, false );
	},

	_addClass: function( element, keys, extra ) {
		return this._toggleClass( element, keys, extra, true );
	},

	_toggleClass: function( element, keys, extra, add ) {
		add = ( typeof add === "boolean" ) ? add : extra;
		var shift = ( typeof element === "string" || element === null ),
			options = {
				extra: shift ? keys : extra,
				keys: shift ? element : keys,
				element: shift ? this.element : element,
				add: add
			};
		options.element.toggleClass( this._classes( options ), add );
		return this;
	},

	_on: function( suppressDisabledCheck, element, handlers ) {
		var delegateElement;
		var instance = this;

		// No suppressDisabledCheck flag, shuffle arguments
		if ( typeof suppressDisabledCheck !== "boolean" ) {
			handlers = element;
			element = suppressDisabledCheck;
			suppressDisabledCheck = false;
		}

		// No element argument, shuffle and use this.element
		if ( !handlers ) {
			handlers = element;
			element = this.element;
			delegateElement = this.widget();
		} else {
			element = delegateElement = $( element );
			this.bindings = this.bindings.add( element );
		}

		$.each( handlers, function( event, handler ) {
			function handlerProxy() {

				// Allow widgets to customize the disabled handling
				// - disabled as an array instead of boolean
				// - disabled class as method for disabling individual parts
				if ( !suppressDisabledCheck &&
						( instance.options.disabled === true ||
						$( this ).hasClass( "ui-state-disabled" ) ) ) {
					return;
				}
				return ( typeof handler === "string" ? instance[ handler ] : handler )
					.apply( instance, arguments );
			}

			// Copy the guid so direct unbinding works
			if ( typeof handler !== "string" ) {
				handlerProxy.guid = handler.guid =
					handler.guid || handlerProxy.guid || $.guid++;
			}

			var match = event.match( /^([\w:-]*)\s*(.*)$/ );
			var eventName = match[ 1 ] + instance.eventNamespace;
			var selector = match[ 2 ];

			if ( selector ) {
				delegateElement.on( eventName, selector, handlerProxy );
			} else {
				element.on( eventName, handlerProxy );
			}
		} );
	},

	_off: function( element, eventName ) {
		eventName = ( eventName || "" ).split( " " ).join( this.eventNamespace + " " ) +
			this.eventNamespace;
		element.off( eventName ).off( eventName );

		// Clear the stack to avoid memory leaks (#10056)
		this.bindings = $( this.bindings.not( element ).get() );
		this.focusable = $( this.focusable.not( element ).get() );
		this.hoverable = $( this.hoverable.not( element ).get() );
	},

	_delay: function( handler, delay ) {
		function handlerProxy() {
			return ( typeof handler === "string" ? instance[ handler ] : handler )
				.apply( instance, arguments );
		}
		var instance = this;
		return setTimeout( handlerProxy, delay || 0 );
	},

	_hoverable: function( element ) {
		this.hoverable = this.hoverable.add( element );
		this._on( element, {
			mouseenter: function( event ) {
				this._addClass( $( event.currentTarget ), null, "ui-state-hover" );
			},
			mouseleave: function( event ) {
				this._removeClass( $( event.currentTarget ), null, "ui-state-hover" );
			}
		} );
	},

	_focusable: function( element ) {
		this.focusable = this.focusable.add( element );
		this._on( element, {
			focusin: function( event ) {
				this._addClass( $( event.currentTarget ), null, "ui-state-focus" );
			},
			focusout: function( event ) {
				this._removeClass( $( event.currentTarget ), null, "ui-state-focus" );
			}
		} );
	},

	_trigger: function( type, event, data ) {
		var prop, orig;
		var callback = this.options[ type ];

		data = data || {};
		event = $.Event( event );
		event.type = ( type === this.widgetEventPrefix ?
			type :
			this.widgetEventPrefix + type ).toLowerCase();

		// The original event may come from any element
		// so we need to reset the target on the new event
		event.target = this.element[ 0 ];

		// Copy original event properties over to the new event
		orig = event.originalEvent;
		if ( orig ) {
			for ( prop in orig ) {
				if ( !( prop in event ) ) {
					event[ prop ] = orig[ prop ];
				}
			}
		}

		this.element.trigger( event, data );
		return !( $.isFunction( callback ) &&
			callback.apply( this.element[ 0 ], [ event ].concat( data ) ) === false ||
			event.isDefaultPrevented() );
	}
};

$.each( { show: "fadeIn", hide: "fadeOut" }, function( method, defaultEffect ) {
	$.Widget.prototype[ "_" + method ] = function( element, options, callback ) {
		if ( typeof options === "string" ) {
			options = { effect: options };
		}

		var hasOptions;
		var effectName = !options ?
			method :
			options === true || typeof options === "number" ?
				defaultEffect :
				options.effect || defaultEffect;

		options = options || {};
		if ( typeof options === "number" ) {
			options = { duration: options };
		}

		hasOptions = !$.isEmptyObject( options );
		options.complete = callback;

		if ( options.delay ) {
			element.delay( options.delay );
		}

		if ( hasOptions && $.effects && $.effects.effect[ effectName ] ) {
			element[ method ]( options );
		} else if ( effectName !== method && element[ effectName ] ) {
			element[ effectName ]( options.duration, options.easing, callback );
		} else {
			element.queue( function( next ) {
				$( this )[ method ]();
				if ( callback ) {
					callback.call( element[ 0 ] );
				}
				next();
			} );
		}
	};
} );

var widget = $.widget;


/*!
 * jQuery UI Position 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/position/
 */

//>>label: Position
//>>group: Core
//>>description: Positions elements relative to other elements.
//>>docs: http://api.jqueryui.com/position/
//>>demos: http://jqueryui.com/position/


( function() {
var cachedScrollbarWidth,
	max = Math.max,
	abs = Math.abs,
	rhorizontal = /left|center|right/,
	rvertical = /top|center|bottom/,
	roffset = /[\+\-]\d+(\.[\d]+)?%?/,
	rposition = /^\w+/,
	rpercent = /%$/,
	_position = $.fn.position;

function getOffsets( offsets, width, height ) {
	return [
		parseFloat( offsets[ 0 ] ) * ( rpercent.test( offsets[ 0 ] ) ? width / 100 : 1 ),
		parseFloat( offsets[ 1 ] ) * ( rpercent.test( offsets[ 1 ] ) ? height / 100 : 1 )
	];
}

function parseCss( element, property ) {
	return parseInt( $.css( element, property ), 10 ) || 0;
}

function getDimensions( elem ) {
	var raw = elem[ 0 ];
	if ( raw.nodeType === 9 ) {
		return {
			width: elem.width(),
			height: elem.height(),
			offset: { top: 0, left: 0 }
		};
	}
	if ( $.isWindow( raw ) ) {
		return {
			width: elem.width(),
			height: elem.height(),
			offset: { top: elem.scrollTop(), left: elem.scrollLeft() }
		};
	}
	if ( raw.preventDefault ) {
		return {
			width: 0,
			height: 0,
			offset: { top: raw.pageY, left: raw.pageX }
		};
	}
	return {
		width: elem.outerWidth(),
		height: elem.outerHeight(),
		offset: elem.offset()
	};
}

$.position = {
	scrollbarWidth: function() {
		if ( cachedScrollbarWidth !== undefined ) {
			return cachedScrollbarWidth;
		}
		var w1, w2,
			div = $( "<div " +
				"style='display:block;position:absolute;width:50px;height:50px;overflow:hidden;'>" +
				"<div style='height:100px;width:auto;'></div></div>" ),
			innerDiv = div.children()[ 0 ];

		$( "body" ).append( div );
		w1 = innerDiv.offsetWidth;
		div.css( "overflow", "scroll" );

		w2 = innerDiv.offsetWidth;

		if ( w1 === w2 ) {
			w2 = div[ 0 ].clientWidth;
		}

		div.remove();

		return ( cachedScrollbarWidth = w1 - w2 );
	},
	getScrollInfo: function( within ) {
		var overflowX = within.isWindow || within.isDocument ? "" :
				within.element.css( "overflow-x" ),
			overflowY = within.isWindow || within.isDocument ? "" :
				within.element.css( "overflow-y" ),
			hasOverflowX = overflowX === "scroll" ||
				( overflowX === "auto" && within.width < within.element[ 0 ].scrollWidth ),
			hasOverflowY = overflowY === "scroll" ||
				( overflowY === "auto" && within.height < within.element[ 0 ].scrollHeight );
		return {
			width: hasOverflowY ? $.position.scrollbarWidth() : 0,
			height: hasOverflowX ? $.position.scrollbarWidth() : 0
		};
	},
	getWithinInfo: function( element ) {
		var withinElement = $( element || window ),
			isWindow = $.isWindow( withinElement[ 0 ] ),
			isDocument = !!withinElement[ 0 ] && withinElement[ 0 ].nodeType === 9,
			hasOffset = !isWindow && !isDocument;
		return {
			element: withinElement,
			isWindow: isWindow,
			isDocument: isDocument,
			offset: hasOffset ? $( element ).offset() : { left: 0, top: 0 },
			scrollLeft: withinElement.scrollLeft(),
			scrollTop: withinElement.scrollTop(),
			width: withinElement.outerWidth(),
			height: withinElement.outerHeight()
		};
	}
};

$.fn.position = function( options ) {
	if ( !options || !options.of ) {
		return _position.apply( this, arguments );
	}

	// Make a copy, we don't want to modify arguments
	options = $.extend( {}, options );

	var atOffset, targetWidth, targetHeight, targetOffset, basePosition, dimensions,
		target = $( options.of ),
		within = $.position.getWithinInfo( options.within ),
		scrollInfo = $.position.getScrollInfo( within ),
		collision = ( options.collision || "flip" ).split( " " ),
		offsets = {};

	dimensions = getDimensions( target );
	if ( target[ 0 ].preventDefault ) {

		// Force left top to allow flipping
		options.at = "left top";
	}
	targetWidth = dimensions.width;
	targetHeight = dimensions.height;
	targetOffset = dimensions.offset;

	// Clone to reuse original targetOffset later
	basePosition = $.extend( {}, targetOffset );

	// Force my and at to have valid horizontal and vertical positions
	// if a value is missing or invalid, it will be converted to center
	$.each( [ "my", "at" ], function() {
		var pos = ( options[ this ] || "" ).split( " " ),
			horizontalOffset,
			verticalOffset;

		if ( pos.length === 1 ) {
			pos = rhorizontal.test( pos[ 0 ] ) ?
				pos.concat( [ "center" ] ) :
				rvertical.test( pos[ 0 ] ) ?
					[ "center" ].concat( pos ) :
					[ "center", "center" ];
		}
		pos[ 0 ] = rhorizontal.test( pos[ 0 ] ) ? pos[ 0 ] : "center";
		pos[ 1 ] = rvertical.test( pos[ 1 ] ) ? pos[ 1 ] : "center";

		// Calculate offsets
		horizontalOffset = roffset.exec( pos[ 0 ] );
		verticalOffset = roffset.exec( pos[ 1 ] );
		offsets[ this ] = [
			horizontalOffset ? horizontalOffset[ 0 ] : 0,
			verticalOffset ? verticalOffset[ 0 ] : 0
		];

		// Reduce to just the positions without the offsets
		options[ this ] = [
			rposition.exec( pos[ 0 ] )[ 0 ],
			rposition.exec( pos[ 1 ] )[ 0 ]
		];
	} );

	// Normalize collision option
	if ( collision.length === 1 ) {
		collision[ 1 ] = collision[ 0 ];
	}

	if ( options.at[ 0 ] === "right" ) {
		basePosition.left += targetWidth;
	} else if ( options.at[ 0 ] === "center" ) {
		basePosition.left += targetWidth / 2;
	}

	if ( options.at[ 1 ] === "bottom" ) {
		basePosition.top += targetHeight;
	} else if ( options.at[ 1 ] === "center" ) {
		basePosition.top += targetHeight / 2;
	}

	atOffset = getOffsets( offsets.at, targetWidth, targetHeight );
	basePosition.left += atOffset[ 0 ];
	basePosition.top += atOffset[ 1 ];

	return this.each( function() {
		var collisionPosition, using,
			elem = $( this ),
			elemWidth = elem.outerWidth(),
			elemHeight = elem.outerHeight(),
			marginLeft = parseCss( this, "marginLeft" ),
			marginTop = parseCss( this, "marginTop" ),
			collisionWidth = elemWidth + marginLeft + parseCss( this, "marginRight" ) +
				scrollInfo.width,
			collisionHeight = elemHeight + marginTop + parseCss( this, "marginBottom" ) +
				scrollInfo.height,
			position = $.extend( {}, basePosition ),
			myOffset = getOffsets( offsets.my, elem.outerWidth(), elem.outerHeight() );

		if ( options.my[ 0 ] === "right" ) {
			position.left -= elemWidth;
		} else if ( options.my[ 0 ] === "center" ) {
			position.left -= elemWidth / 2;
		}

		if ( options.my[ 1 ] === "bottom" ) {
			position.top -= elemHeight;
		} else if ( options.my[ 1 ] === "center" ) {
			position.top -= elemHeight / 2;
		}

		position.left += myOffset[ 0 ];
		position.top += myOffset[ 1 ];

		collisionPosition = {
			marginLeft: marginLeft,
			marginTop: marginTop
		};

		$.each( [ "left", "top" ], function( i, dir ) {
			if ( $.ui.position[ collision[ i ] ] ) {
				$.ui.position[ collision[ i ] ][ dir ]( position, {
					targetWidth: targetWidth,
					targetHeight: targetHeight,
					elemWidth: elemWidth,
					elemHeight: elemHeight,
					collisionPosition: collisionPosition,
					collisionWidth: collisionWidth,
					collisionHeight: collisionHeight,
					offset: [ atOffset[ 0 ] + myOffset[ 0 ], atOffset [ 1 ] + myOffset[ 1 ] ],
					my: options.my,
					at: options.at,
					within: within,
					elem: elem
				} );
			}
		} );

		if ( options.using ) {

			// Adds feedback as second argument to using callback, if present
			using = function( props ) {
				var left = targetOffset.left - position.left,
					right = left + targetWidth - elemWidth,
					top = targetOffset.top - position.top,
					bottom = top + targetHeight - elemHeight,
					feedback = {
						target: {
							element: target,
							left: targetOffset.left,
							top: targetOffset.top,
							width: targetWidth,
							height: targetHeight
						},
						element: {
							element: elem,
							left: position.left,
							top: position.top,
							width: elemWidth,
							height: elemHeight
						},
						horizontal: right < 0 ? "left" : left > 0 ? "right" : "center",
						vertical: bottom < 0 ? "top" : top > 0 ? "bottom" : "middle"
					};
				if ( targetWidth < elemWidth && abs( left + right ) < targetWidth ) {
					feedback.horizontal = "center";
				}
				if ( targetHeight < elemHeight && abs( top + bottom ) < targetHeight ) {
					feedback.vertical = "middle";
				}
				if ( max( abs( left ), abs( right ) ) > max( abs( top ), abs( bottom ) ) ) {
					feedback.important = "horizontal";
				} else {
					feedback.important = "vertical";
				}
				options.using.call( this, props, feedback );
			};
		}

		elem.offset( $.extend( position, { using: using } ) );
	} );
};

$.ui.position = {
	fit: {
		left: function( position, data ) {
			var within = data.within,
				withinOffset = within.isWindow ? within.scrollLeft : within.offset.left,
				outerWidth = within.width,
				collisionPosLeft = position.left - data.collisionPosition.marginLeft,
				overLeft = withinOffset - collisionPosLeft,
				overRight = collisionPosLeft + data.collisionWidth - outerWidth - withinOffset,
				newOverRight;

			// Element is wider than within
			if ( data.collisionWidth > outerWidth ) {

				// Element is initially over the left side of within
				if ( overLeft > 0 && overRight <= 0 ) {
					newOverRight = position.left + overLeft + data.collisionWidth - outerWidth -
						withinOffset;
					position.left += overLeft - newOverRight;

				// Element is initially over right side of within
				} else if ( overRight > 0 && overLeft <= 0 ) {
					position.left = withinOffset;

				// Element is initially over both left and right sides of within
				} else {
					if ( overLeft > overRight ) {
						position.left = withinOffset + outerWidth - data.collisionWidth;
					} else {
						position.left = withinOffset;
					}
				}

			// Too far left -> align with left edge
			} else if ( overLeft > 0 ) {
				position.left += overLeft;

			// Too far right -> align with right edge
			} else if ( overRight > 0 ) {
				position.left -= overRight;

			// Adjust based on position and margin
			} else {
				position.left = max( position.left - collisionPosLeft, position.left );
			}
		},
		top: function( position, data ) {
			var within = data.within,
				withinOffset = within.isWindow ? within.scrollTop : within.offset.top,
				outerHeight = data.within.height,
				collisionPosTop = position.top - data.collisionPosition.marginTop,
				overTop = withinOffset - collisionPosTop,
				overBottom = collisionPosTop + data.collisionHeight - outerHeight - withinOffset,
				newOverBottom;

			// Element is taller than within
			if ( data.collisionHeight > outerHeight ) {

				// Element is initially over the top of within
				if ( overTop > 0 && overBottom <= 0 ) {
					newOverBottom = position.top + overTop + data.collisionHeight - outerHeight -
						withinOffset;
					position.top += overTop - newOverBottom;

				// Element is initially over bottom of within
				} else if ( overBottom > 0 && overTop <= 0 ) {
					position.top = withinOffset;

				// Element is initially over both top and bottom of within
				} else {
					if ( overTop > overBottom ) {
						position.top = withinOffset + outerHeight - data.collisionHeight;
					} else {
						position.top = withinOffset;
					}
				}

			// Too far up -> align with top
			} else if ( overTop > 0 ) {
				position.top += overTop;

			// Too far down -> align with bottom edge
			} else if ( overBottom > 0 ) {
				position.top -= overBottom;

			// Adjust based on position and margin
			} else {
				position.top = max( position.top - collisionPosTop, position.top );
			}
		}
	},
	flip: {
		left: function( position, data ) {
			var within = data.within,
				withinOffset = within.offset.left + within.scrollLeft,
				outerWidth = within.width,
				offsetLeft = within.isWindow ? within.scrollLeft : within.offset.left,
				collisionPosLeft = position.left - data.collisionPosition.marginLeft,
				overLeft = collisionPosLeft - offsetLeft,
				overRight = collisionPosLeft + data.collisionWidth - outerWidth - offsetLeft,
				myOffset = data.my[ 0 ] === "left" ?
					-data.elemWidth :
					data.my[ 0 ] === "right" ?
						data.elemWidth :
						0,
				atOffset = data.at[ 0 ] === "left" ?
					data.targetWidth :
					data.at[ 0 ] === "right" ?
						-data.targetWidth :
						0,
				offset = -2 * data.offset[ 0 ],
				newOverRight,
				newOverLeft;

			if ( overLeft < 0 ) {
				newOverRight = position.left + myOffset + atOffset + offset + data.collisionWidth -
					outerWidth - withinOffset;
				if ( newOverRight < 0 || newOverRight < abs( overLeft ) ) {
					position.left += myOffset + atOffset + offset;
				}
			} else if ( overRight > 0 ) {
				newOverLeft = position.left - data.collisionPosition.marginLeft + myOffset +
					atOffset + offset - offsetLeft;
				if ( newOverLeft > 0 || abs( newOverLeft ) < overRight ) {
					position.left += myOffset + atOffset + offset;
				}
			}
		},
		top: function( position, data ) {
			var within = data.within,
				withinOffset = within.offset.top + within.scrollTop,
				outerHeight = within.height,
				offsetTop = within.isWindow ? within.scrollTop : within.offset.top,
				collisionPosTop = position.top - data.collisionPosition.marginTop,
				overTop = collisionPosTop - offsetTop,
				overBottom = collisionPosTop + data.collisionHeight - outerHeight - offsetTop,
				top = data.my[ 1 ] === "top",
				myOffset = top ?
					-data.elemHeight :
					data.my[ 1 ] === "bottom" ?
						data.elemHeight :
						0,
				atOffset = data.at[ 1 ] === "top" ?
					data.targetHeight :
					data.at[ 1 ] === "bottom" ?
						-data.targetHeight :
						0,
				offset = -2 * data.offset[ 1 ],
				newOverTop,
				newOverBottom;
			if ( overTop < 0 ) {
				newOverBottom = position.top + myOffset + atOffset + offset + data.collisionHeight -
					outerHeight - withinOffset;
				if ( newOverBottom < 0 || newOverBottom < abs( overTop ) ) {
					position.top += myOffset + atOffset + offset;
				}
			} else if ( overBottom > 0 ) {
				newOverTop = position.top - data.collisionPosition.marginTop + myOffset + atOffset +
					offset - offsetTop;
				if ( newOverTop > 0 || abs( newOverTop ) < overBottom ) {
					position.top += myOffset + atOffset + offset;
				}
			}
		}
	},
	flipfit: {
		left: function() {
			$.ui.position.flip.left.apply( this, arguments );
			$.ui.position.fit.left.apply( this, arguments );
		},
		top: function() {
			$.ui.position.flip.top.apply( this, arguments );
			$.ui.position.fit.top.apply( this, arguments );
		}
	}
};

} )();

var position = $.ui.position;


/*!
 * jQuery UI :data 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: :data Selector
//>>group: Core
//>>description: Selects elements which have data stored under the specified key.
//>>docs: http://api.jqueryui.com/data-selector/


var data = $.extend( $.expr[ ":" ], {
	data: $.expr.createPseudo ?
		$.expr.createPseudo( function( dataName ) {
			return function( elem ) {
				return !!$.data( elem, dataName );
			};
		} ) :

		// Support: jQuery <1.8
		function( elem, i, match ) {
			return !!$.data( elem, match[ 3 ] );
		}
} );

/*!
 * jQuery UI Disable Selection 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: disableSelection
//>>group: Core
//>>description: Disable selection of text content within the set of matched elements.
//>>docs: http://api.jqueryui.com/disableSelection/

// This file is deprecated


var disableSelection = $.fn.extend( {
	disableSelection: ( function() {
		var eventType = "onselectstart" in document.createElement( "div" ) ?
			"selectstart" :
			"mousedown";

		return function() {
			return this.on( eventType + ".ui-disableSelection", function( event ) {
				event.preventDefault();
			} );
		};
	} )(),

	enableSelection: function() {
		return this.off( ".ui-disableSelection" );
	}
} );


/*!
 * jQuery UI Effects 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Effects Core
//>>group: Effects
// jscs:disable maximumLineLength
//>>description: Extends the internal jQuery effects. Includes morphing and easing. Required by all other effects.
// jscs:enable maximumLineLength
//>>docs: http://api.jqueryui.com/category/effects-core/
//>>demos: http://jqueryui.com/effect/



var dataSpace = "ui-effects-",
	dataSpaceStyle = "ui-effects-style",
	dataSpaceAnimated = "ui-effects-animated",

	// Create a local jQuery because jQuery Color relies on it and the
	// global may not exist with AMD and a custom build (#10199)
	jQuery = $;

$.effects = {
	effect: {}
};

/*!
 * jQuery Color Animations v2.1.2
 * https://github.com/jquery/jquery-color
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * Date: Wed Jan 16 08:47:09 2013 -0600
 */
( function( jQuery, undefined ) {

	var stepHooks = "backgroundColor borderBottomColor borderLeftColor borderRightColor " +
		"borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor",

	// Plusequals test for += 100 -= 100
	rplusequals = /^([\-+])=\s*(\d+\.?\d*)/,

	// A set of RE's that can match strings and generate color tuples.
	stringParsers = [ {
			re: /rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
			parse: function( execResult ) {
				return [
					execResult[ 1 ],
					execResult[ 2 ],
					execResult[ 3 ],
					execResult[ 4 ]
				];
			}
		}, {
			re: /rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
			parse: function( execResult ) {
				return [
					execResult[ 1 ] * 2.55,
					execResult[ 2 ] * 2.55,
					execResult[ 3 ] * 2.55,
					execResult[ 4 ]
				];
			}
		}, {

			// This regex ignores A-F because it's compared against an already lowercased string
			re: /#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,
			parse: function( execResult ) {
				return [
					parseInt( execResult[ 1 ], 16 ),
					parseInt( execResult[ 2 ], 16 ),
					parseInt( execResult[ 3 ], 16 )
				];
			}
		}, {

			// This regex ignores A-F because it's compared against an already lowercased string
			re: /#([a-f0-9])([a-f0-9])([a-f0-9])/,
			parse: function( execResult ) {
				return [
					parseInt( execResult[ 1 ] + execResult[ 1 ], 16 ),
					parseInt( execResult[ 2 ] + execResult[ 2 ], 16 ),
					parseInt( execResult[ 3 ] + execResult[ 3 ], 16 )
				];
			}
		}, {
			re: /hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
			space: "hsla",
			parse: function( execResult ) {
				return [
					execResult[ 1 ],
					execResult[ 2 ] / 100,
					execResult[ 3 ] / 100,
					execResult[ 4 ]
				];
			}
		} ],

	// JQuery.Color( )
	color = jQuery.Color = function( color, green, blue, alpha ) {
		return new jQuery.Color.fn.parse( color, green, blue, alpha );
	},
	spaces = {
		rgba: {
			props: {
				red: {
					idx: 0,
					type: "byte"
				},
				green: {
					idx: 1,
					type: "byte"
				},
				blue: {
					idx: 2,
					type: "byte"
				}
			}
		},

		hsla: {
			props: {
				hue: {
					idx: 0,
					type: "degrees"
				},
				saturation: {
					idx: 1,
					type: "percent"
				},
				lightness: {
					idx: 2,
					type: "percent"
				}
			}
		}
	},
	propTypes = {
		"byte": {
			floor: true,
			max: 255
		},
		"percent": {
			max: 1
		},
		"degrees": {
			mod: 360,
			floor: true
		}
	},
	support = color.support = {},

	// Element for support tests
	supportElem = jQuery( "<p>" )[ 0 ],

	// Colors = jQuery.Color.names
	colors,

	// Local aliases of functions called often
	each = jQuery.each;

// Determine rgba support immediately
supportElem.style.cssText = "background-color:rgba(1,1,1,.5)";
support.rgba = supportElem.style.backgroundColor.indexOf( "rgba" ) > -1;

// Define cache name and alpha properties
// for rgba and hsla spaces
each( spaces, function( spaceName, space ) {
	space.cache = "_" + spaceName;
	space.props.alpha = {
		idx: 3,
		type: "percent",
		def: 1
	};
} );

function clamp( value, prop, allowEmpty ) {
	var type = propTypes[ prop.type ] || {};

	if ( value == null ) {
		return ( allowEmpty || !prop.def ) ? null : prop.def;
	}

	// ~~ is an short way of doing floor for positive numbers
	value = type.floor ? ~~value : parseFloat( value );

	// IE will pass in empty strings as value for alpha,
	// which will hit this case
	if ( isNaN( value ) ) {
		return prop.def;
	}

	if ( type.mod ) {

		// We add mod before modding to make sure that negatives values
		// get converted properly: -10 -> 350
		return ( value + type.mod ) % type.mod;
	}

	// For now all property types without mod have min and max
	return 0 > value ? 0 : type.max < value ? type.max : value;
}

function stringParse( string ) {
	var inst = color(),
		rgba = inst._rgba = [];

	string = string.toLowerCase();

	each( stringParsers, function( i, parser ) {
		var parsed,
			match = parser.re.exec( string ),
			values = match && parser.parse( match ),
			spaceName = parser.space || "rgba";

		if ( values ) {
			parsed = inst[ spaceName ]( values );

			// If this was an rgba parse the assignment might happen twice
			// oh well....
			inst[ spaces[ spaceName ].cache ] = parsed[ spaces[ spaceName ].cache ];
			rgba = inst._rgba = parsed._rgba;

			// Exit each( stringParsers ) here because we matched
			return false;
		}
	} );

	// Found a stringParser that handled it
	if ( rgba.length ) {

		// If this came from a parsed string, force "transparent" when alpha is 0
		// chrome, (and maybe others) return "transparent" as rgba(0,0,0,0)
		if ( rgba.join() === "0,0,0,0" ) {
			jQuery.extend( rgba, colors.transparent );
		}
		return inst;
	}

	// Named colors
	return colors[ string ];
}

color.fn = jQuery.extend( color.prototype, {
	parse: function( red, green, blue, alpha ) {
		if ( red === undefined ) {
			this._rgba = [ null, null, null, null ];
			return this;
		}
		if ( red.jquery || red.nodeType ) {
			red = jQuery( red ).css( green );
			green = undefined;
		}

		var inst = this,
			type = jQuery.type( red ),
			rgba = this._rgba = [];

		// More than 1 argument specified - assume ( red, green, blue, alpha )
		if ( green !== undefined ) {
			red = [ red, green, blue, alpha ];
			type = "array";
		}

		if ( type === "string" ) {
			return this.parse( stringParse( red ) || colors._default );
		}

		if ( type === "array" ) {
			each( spaces.rgba.props, function( key, prop ) {
				rgba[ prop.idx ] = clamp( red[ prop.idx ], prop );
			} );
			return this;
		}

		if ( type === "object" ) {
			if ( red instanceof color ) {
				each( spaces, function( spaceName, space ) {
					if ( red[ space.cache ] ) {
						inst[ space.cache ] = red[ space.cache ].slice();
					}
				} );
			} else {
				each( spaces, function( spaceName, space ) {
					var cache = space.cache;
					each( space.props, function( key, prop ) {

						// If the cache doesn't exist, and we know how to convert
						if ( !inst[ cache ] && space.to ) {

							// If the value was null, we don't need to copy it
							// if the key was alpha, we don't need to copy it either
							if ( key === "alpha" || red[ key ] == null ) {
								return;
							}
							inst[ cache ] = space.to( inst._rgba );
						}

						// This is the only case where we allow nulls for ALL properties.
						// call clamp with alwaysAllowEmpty
						inst[ cache ][ prop.idx ] = clamp( red[ key ], prop, true );
					} );

					// Everything defined but alpha?
					if ( inst[ cache ] &&
							jQuery.inArray( null, inst[ cache ].slice( 0, 3 ) ) < 0 ) {

						// Use the default of 1
						inst[ cache ][ 3 ] = 1;
						if ( space.from ) {
							inst._rgba = space.from( inst[ cache ] );
						}
					}
				} );
			}
			return this;
		}
	},
	is: function( compare ) {
		var is = color( compare ),
			same = true,
			inst = this;

		each( spaces, function( _, space ) {
			var localCache,
				isCache = is[ space.cache ];
			if ( isCache ) {
				localCache = inst[ space.cache ] || space.to && space.to( inst._rgba ) || [];
				each( space.props, function( _, prop ) {
					if ( isCache[ prop.idx ] != null ) {
						same = ( isCache[ prop.idx ] === localCache[ prop.idx ] );
						return same;
					}
				} );
			}
			return same;
		} );
		return same;
	},
	_space: function() {
		var used = [],
			inst = this;
		each( spaces, function( spaceName, space ) {
			if ( inst[ space.cache ] ) {
				used.push( spaceName );
			}
		} );
		return used.pop();
	},
	transition: function( other, distance ) {
		var end = color( other ),
			spaceName = end._space(),
			space = spaces[ spaceName ],
			startColor = this.alpha() === 0 ? color( "transparent" ) : this,
			start = startColor[ space.cache ] || space.to( startColor._rgba ),
			result = start.slice();

		end = end[ space.cache ];
		each( space.props, function( key, prop ) {
			var index = prop.idx,
				startValue = start[ index ],
				endValue = end[ index ],
				type = propTypes[ prop.type ] || {};

			// If null, don't override start value
			if ( endValue === null ) {
				return;
			}

			// If null - use end
			if ( startValue === null ) {
				result[ index ] = endValue;
			} else {
				if ( type.mod ) {
					if ( endValue - startValue > type.mod / 2 ) {
						startValue += type.mod;
					} else if ( startValue - endValue > type.mod / 2 ) {
						startValue -= type.mod;
					}
				}
				result[ index ] = clamp( ( endValue - startValue ) * distance + startValue, prop );
			}
		} );
		return this[ spaceName ]( result );
	},
	blend: function( opaque ) {

		// If we are already opaque - return ourself
		if ( this._rgba[ 3 ] === 1 ) {
			return this;
		}

		var rgb = this._rgba.slice(),
			a = rgb.pop(),
			blend = color( opaque )._rgba;

		return color( jQuery.map( rgb, function( v, i ) {
			return ( 1 - a ) * blend[ i ] + a * v;
		} ) );
	},
	toRgbaString: function() {
		var prefix = "rgba(",
			rgba = jQuery.map( this._rgba, function( v, i ) {
				return v == null ? ( i > 2 ? 1 : 0 ) : v;
			} );

		if ( rgba[ 3 ] === 1 ) {
			rgba.pop();
			prefix = "rgb(";
		}

		return prefix + rgba.join() + ")";
	},
	toHslaString: function() {
		var prefix = "hsla(",
			hsla = jQuery.map( this.hsla(), function( v, i ) {
				if ( v == null ) {
					v = i > 2 ? 1 : 0;
				}

				// Catch 1 and 2
				if ( i && i < 3 ) {
					v = Math.round( v * 100 ) + "%";
				}
				return v;
			} );

		if ( hsla[ 3 ] === 1 ) {
			hsla.pop();
			prefix = "hsl(";
		}
		return prefix + hsla.join() + ")";
	},
	toHexString: function( includeAlpha ) {
		var rgba = this._rgba.slice(),
			alpha = rgba.pop();

		if ( includeAlpha ) {
			rgba.push( ~~( alpha * 255 ) );
		}

		return "#" + jQuery.map( rgba, function( v ) {

			// Default to 0 when nulls exist
			v = ( v || 0 ).toString( 16 );
			return v.length === 1 ? "0" + v : v;
		} ).join( "" );
	},
	toString: function() {
		return this._rgba[ 3 ] === 0 ? "transparent" : this.toRgbaString();
	}
} );
color.fn.parse.prototype = color.fn;

// Hsla conversions adapted from:
// https://code.google.com/p/maashaack/source/browse/packages/graphics/trunk/src/graphics/colors/HUE2RGB.as?r=5021

function hue2rgb( p, q, h ) {
	h = ( h + 1 ) % 1;
	if ( h * 6 < 1 ) {
		return p + ( q - p ) * h * 6;
	}
	if ( h * 2 < 1 ) {
		return q;
	}
	if ( h * 3 < 2 ) {
		return p + ( q - p ) * ( ( 2 / 3 ) - h ) * 6;
	}
	return p;
}

spaces.hsla.to = function( rgba ) {
	if ( rgba[ 0 ] == null || rgba[ 1 ] == null || rgba[ 2 ] == null ) {
		return [ null, null, null, rgba[ 3 ] ];
	}
	var r = rgba[ 0 ] / 255,
		g = rgba[ 1 ] / 255,
		b = rgba[ 2 ] / 255,
		a = rgba[ 3 ],
		max = Math.max( r, g, b ),
		min = Math.min( r, g, b ),
		diff = max - min,
		add = max + min,
		l = add * 0.5,
		h, s;

	if ( min === max ) {
		h = 0;
	} else if ( r === max ) {
		h = ( 60 * ( g - b ) / diff ) + 360;
	} else if ( g === max ) {
		h = ( 60 * ( b - r ) / diff ) + 120;
	} else {
		h = ( 60 * ( r - g ) / diff ) + 240;
	}

	// Chroma (diff) == 0 means greyscale which, by definition, saturation = 0%
	// otherwise, saturation is based on the ratio of chroma (diff) to lightness (add)
	if ( diff === 0 ) {
		s = 0;
	} else if ( l <= 0.5 ) {
		s = diff / add;
	} else {
		s = diff / ( 2 - add );
	}
	return [ Math.round( h ) % 360, s, l, a == null ? 1 : a ];
};

spaces.hsla.from = function( hsla ) {
	if ( hsla[ 0 ] == null || hsla[ 1 ] == null || hsla[ 2 ] == null ) {
		return [ null, null, null, hsla[ 3 ] ];
	}
	var h = hsla[ 0 ] / 360,
		s = hsla[ 1 ],
		l = hsla[ 2 ],
		a = hsla[ 3 ],
		q = l <= 0.5 ? l * ( 1 + s ) : l + s - l * s,
		p = 2 * l - q;

	return [
		Math.round( hue2rgb( p, q, h + ( 1 / 3 ) ) * 255 ),
		Math.round( hue2rgb( p, q, h ) * 255 ),
		Math.round( hue2rgb( p, q, h - ( 1 / 3 ) ) * 255 ),
		a
	];
};

each( spaces, function( spaceName, space ) {
	var props = space.props,
		cache = space.cache,
		to = space.to,
		from = space.from;

	// Makes rgba() and hsla()
	color.fn[ spaceName ] = function( value ) {

		// Generate a cache for this space if it doesn't exist
		if ( to && !this[ cache ] ) {
			this[ cache ] = to( this._rgba );
		}
		if ( value === undefined ) {
			return this[ cache ].slice();
		}

		var ret,
			type = jQuery.type( value ),
			arr = ( type === "array" || type === "object" ) ? value : arguments,
			local = this[ cache ].slice();

		each( props, function( key, prop ) {
			var val = arr[ type === "object" ? key : prop.idx ];
			if ( val == null ) {
				val = local[ prop.idx ];
			}
			local[ prop.idx ] = clamp( val, prop );
		} );

		if ( from ) {
			ret = color( from( local ) );
			ret[ cache ] = local;
			return ret;
		} else {
			return color( local );
		}
	};

	// Makes red() green() blue() alpha() hue() saturation() lightness()
	each( props, function( key, prop ) {

		// Alpha is included in more than one space
		if ( color.fn[ key ] ) {
			return;
		}
		color.fn[ key ] = function( value ) {
			var vtype = jQuery.type( value ),
				fn = ( key === "alpha" ? ( this._hsla ? "hsla" : "rgba" ) : spaceName ),
				local = this[ fn ](),
				cur = local[ prop.idx ],
				match;

			if ( vtype === "undefined" ) {
				return cur;
			}

			if ( vtype === "function" ) {
				value = value.call( this, cur );
				vtype = jQuery.type( value );
			}
			if ( value == null && prop.empty ) {
				return this;
			}
			if ( vtype === "string" ) {
				match = rplusequals.exec( value );
				if ( match ) {
					value = cur + parseFloat( match[ 2 ] ) * ( match[ 1 ] === "+" ? 1 : -1 );
				}
			}
			local[ prop.idx ] = value;
			return this[ fn ]( local );
		};
	} );
} );

// Add cssHook and .fx.step function for each named hook.
// accept a space separated string of properties
color.hook = function( hook ) {
	var hooks = hook.split( " " );
	each( hooks, function( i, hook ) {
		jQuery.cssHooks[ hook ] = {
			set: function( elem, value ) {
				var parsed, curElem,
					backgroundColor = "";

				if ( value !== "transparent" && ( jQuery.type( value ) !== "string" ||
						( parsed = stringParse( value ) ) ) ) {
					value = color( parsed || value );
					if ( !support.rgba && value._rgba[ 3 ] !== 1 ) {
						curElem = hook === "backgroundColor" ? elem.parentNode : elem;
						while (
							( backgroundColor === "" || backgroundColor === "transparent" ) &&
							curElem && curElem.style
						) {
							try {
								backgroundColor = jQuery.css( curElem, "backgroundColor" );
								curElem = curElem.parentNode;
							} catch ( e ) {
							}
						}

						value = value.blend( backgroundColor && backgroundColor !== "transparent" ?
							backgroundColor :
							"_default" );
					}

					value = value.toRgbaString();
				}
				try {
					elem.style[ hook ] = value;
				} catch ( e ) {

					// Wrapped to prevent IE from throwing errors on "invalid" values like
					// 'auto' or 'inherit'
				}
			}
		};
		jQuery.fx.step[ hook ] = function( fx ) {
			if ( !fx.colorInit ) {
				fx.start = color( fx.elem, hook );
				fx.end = color( fx.end );
				fx.colorInit = true;
			}
			jQuery.cssHooks[ hook ].set( fx.elem, fx.start.transition( fx.end, fx.pos ) );
		};
	} );

};

color.hook( stepHooks );

jQuery.cssHooks.borderColor = {
	expand: function( value ) {
		var expanded = {};

		each( [ "Top", "Right", "Bottom", "Left" ], function( i, part ) {
			expanded[ "border" + part + "Color" ] = value;
		} );
		return expanded;
	}
};

// Basic color names only.
// Usage of any of the other color names requires adding yourself or including
// jquery.color.svg-names.js.
colors = jQuery.Color.names = {

	// 4.1. Basic color keywords
	aqua: "#00ffff",
	black: "#000000",
	blue: "#0000ff",
	fuchsia: "#ff00ff",
	gray: "#808080",
	green: "#008000",
	lime: "#00ff00",
	maroon: "#800000",
	navy: "#000080",
	olive: "#808000",
	purple: "#800080",
	red: "#ff0000",
	silver: "#c0c0c0",
	teal: "#008080",
	white: "#ffffff",
	yellow: "#ffff00",

	// 4.2.3. "transparent" color keyword
	transparent: [ null, null, null, 0 ],

	_default: "#ffffff"
};

} )( jQuery );

/******************************************************************************/
/****************************** CLASS ANIMATIONS ******************************/
/******************************************************************************/
( function() {

var classAnimationActions = [ "add", "remove", "toggle" ],
	shorthandStyles = {
		border: 1,
		borderBottom: 1,
		borderColor: 1,
		borderLeft: 1,
		borderRight: 1,
		borderTop: 1,
		borderWidth: 1,
		margin: 1,
		padding: 1
	};

$.each(
	[ "borderLeftStyle", "borderRightStyle", "borderBottomStyle", "borderTopStyle" ],
	function( _, prop ) {
		$.fx.step[ prop ] = function( fx ) {
			if ( fx.end !== "none" && !fx.setAttr || fx.pos === 1 && !fx.setAttr ) {
				jQuery.style( fx.elem, prop, fx.end );
				fx.setAttr = true;
			}
		};
	}
);

function getElementStyles( elem ) {
	var key, len,
		style = elem.ownerDocument.defaultView ?
			elem.ownerDocument.defaultView.getComputedStyle( elem, null ) :
			elem.currentStyle,
		styles = {};

	if ( style && style.length && style[ 0 ] && style[ style[ 0 ] ] ) {
		len = style.length;
		while ( len-- ) {
			key = style[ len ];
			if ( typeof style[ key ] === "string" ) {
				styles[ $.camelCase( key ) ] = style[ key ];
			}
		}

	// Support: Opera, IE <9
	} else {
		for ( key in style ) {
			if ( typeof style[ key ] === "string" ) {
				styles[ key ] = style[ key ];
			}
		}
	}

	return styles;
}

function styleDifference( oldStyle, newStyle ) {
	var diff = {},
		name, value;

	for ( name in newStyle ) {
		value = newStyle[ name ];
		if ( oldStyle[ name ] !== value ) {
			if ( !shorthandStyles[ name ] ) {
				if ( $.fx.step[ name ] || !isNaN( parseFloat( value ) ) ) {
					diff[ name ] = value;
				}
			}
		}
	}

	return diff;
}

// Support: jQuery <1.8
if ( !$.fn.addBack ) {
	$.fn.addBack = function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	};
}

$.effects.animateClass = function( value, duration, easing, callback ) {
	var o = $.speed( duration, easing, callback );

	return this.queue( function() {
		var animated = $( this ),
			baseClass = animated.attr( "class" ) || "",
			applyClassChange,
			allAnimations = o.children ? animated.find( "*" ).addBack() : animated;

		// Map the animated objects to store the original styles.
		allAnimations = allAnimations.map( function() {
			var el = $( this );
			return {
				el: el,
				start: getElementStyles( this )
			};
		} );

		// Apply class change
		applyClassChange = function() {
			$.each( classAnimationActions, function( i, action ) {
				if ( value[ action ] ) {
					animated[ action + "Class" ]( value[ action ] );
				}
			} );
		};
		applyClassChange();

		// Map all animated objects again - calculate new styles and diff
		allAnimations = allAnimations.map( function() {
			this.end = getElementStyles( this.el[ 0 ] );
			this.diff = styleDifference( this.start, this.end );
			return this;
		} );

		// Apply original class
		animated.attr( "class", baseClass );

		// Map all animated objects again - this time collecting a promise
		allAnimations = allAnimations.map( function() {
			var styleInfo = this,
				dfd = $.Deferred(),
				opts = $.extend( {}, o, {
					queue: false,
					complete: function() {
						dfd.resolve( styleInfo );
					}
				} );

			this.el.animate( this.diff, opts );
			return dfd.promise();
		} );

		// Once all animations have completed:
		$.when.apply( $, allAnimations.get() ).done( function() {

			// Set the final class
			applyClassChange();

			// For each animated element,
			// clear all css properties that were animated
			$.each( arguments, function() {
				var el = this.el;
				$.each( this.diff, function( key ) {
					el.css( key, "" );
				} );
			} );

			// This is guarnteed to be there if you use jQuery.speed()
			// it also handles dequeuing the next anim...
			o.complete.call( animated[ 0 ] );
		} );
	} );
};

$.fn.extend( {
	addClass: ( function( orig ) {
		return function( classNames, speed, easing, callback ) {
			return speed ?
				$.effects.animateClass.call( this,
					{ add: classNames }, speed, easing, callback ) :
				orig.apply( this, arguments );
		};
	} )( $.fn.addClass ),

	removeClass: ( function( orig ) {
		return function( classNames, speed, easing, callback ) {
			return arguments.length > 1 ?
				$.effects.animateClass.call( this,
					{ remove: classNames }, speed, easing, callback ) :
				orig.apply( this, arguments );
		};
	} )( $.fn.removeClass ),

	toggleClass: ( function( orig ) {
		return function( classNames, force, speed, easing, callback ) {
			if ( typeof force === "boolean" || force === undefined ) {
				if ( !speed ) {

					// Without speed parameter
					return orig.apply( this, arguments );
				} else {
					return $.effects.animateClass.call( this,
						( force ? { add: classNames } : { remove: classNames } ),
						speed, easing, callback );
				}
			} else {

				// Without force parameter
				return $.effects.animateClass.call( this,
					{ toggle: classNames }, force, speed, easing );
			}
		};
	} )( $.fn.toggleClass ),

	switchClass: function( remove, add, speed, easing, callback ) {
		return $.effects.animateClass.call( this, {
			add: add,
			remove: remove
		}, speed, easing, callback );
	}
} );

} )();

/******************************************************************************/
/*********************************** EFFECTS **********************************/
/******************************************************************************/

( function() {

if ( $.expr && $.expr.filters && $.expr.filters.animated ) {
	$.expr.filters.animated = ( function( orig ) {
		return function( elem ) {
			return !!$( elem ).data( dataSpaceAnimated ) || orig( elem );
		};
	} )( $.expr.filters.animated );
}

if ( $.uiBackCompat !== false ) {
	$.extend( $.effects, {

		// Saves a set of properties in a data storage
		save: function( element, set ) {
			var i = 0, length = set.length;
			for ( ; i < length; i++ ) {
				if ( set[ i ] !== null ) {
					element.data( dataSpace + set[ i ], element[ 0 ].style[ set[ i ] ] );
				}
			}
		},

		// Restores a set of previously saved properties from a data storage
		restore: function( element, set ) {
			var val, i = 0, length = set.length;
			for ( ; i < length; i++ ) {
				if ( set[ i ] !== null ) {
					val = element.data( dataSpace + set[ i ] );
					element.css( set[ i ], val );
				}
			}
		},

		setMode: function( el, mode ) {
			if ( mode === "toggle" ) {
				mode = el.is( ":hidden" ) ? "show" : "hide";
			}
			return mode;
		},

		// Wraps the element around a wrapper that copies position properties
		createWrapper: function( element ) {

			// If the element is already wrapped, return it
			if ( element.parent().is( ".ui-effects-wrapper" ) ) {
				return element.parent();
			}

			// Wrap the element
			var props = {
					width: element.outerWidth( true ),
					height: element.outerHeight( true ),
					"float": element.css( "float" )
				},
				wrapper = $( "<div></div>" )
					.addClass( "ui-effects-wrapper" )
					.css( {
						fontSize: "100%",
						background: "transparent",
						border: "none",
						margin: 0,
						padding: 0
					} ),

				// Store the size in case width/height are defined in % - Fixes #5245
				size = {
					width: element.width(),
					height: element.height()
				},
				active = document.activeElement;

			// Support: Firefox
			// Firefox incorrectly exposes anonymous content
			// https://bugzilla.mozilla.org/show_bug.cgi?id=561664
			try {
				active.id;
			} catch ( e ) {
				active = document.body;
			}

			element.wrap( wrapper );

			// Fixes #7595 - Elements lose focus when wrapped.
			if ( element[ 0 ] === active || $.contains( element[ 0 ], active ) ) {
				$( active ).trigger( "focus" );
			}

			// Hotfix for jQuery 1.4 since some change in wrap() seems to actually
			// lose the reference to the wrapped element
			wrapper = element.parent();

			// Transfer positioning properties to the wrapper
			if ( element.css( "position" ) === "static" ) {
				wrapper.css( { position: "relative" } );
				element.css( { position: "relative" } );
			} else {
				$.extend( props, {
					position: element.css( "position" ),
					zIndex: element.css( "z-index" )
				} );
				$.each( [ "top", "left", "bottom", "right" ], function( i, pos ) {
					props[ pos ] = element.css( pos );
					if ( isNaN( parseInt( props[ pos ], 10 ) ) ) {
						props[ pos ] = "auto";
					}
				} );
				element.css( {
					position: "relative",
					top: 0,
					left: 0,
					right: "auto",
					bottom: "auto"
				} );
			}
			element.css( size );

			return wrapper.css( props ).show();
		},

		removeWrapper: function( element ) {
			var active = document.activeElement;

			if ( element.parent().is( ".ui-effects-wrapper" ) ) {
				element.parent().replaceWith( element );

				// Fixes #7595 - Elements lose focus when wrapped.
				if ( element[ 0 ] === active || $.contains( element[ 0 ], active ) ) {
					$( active ).trigger( "focus" );
				}
			}

			return element;
		}
	} );
}

$.extend( $.effects, {
	version: "1.12.1",

	define: function( name, mode, effect ) {
		if ( !effect ) {
			effect = mode;
			mode = "effect";
		}

		$.effects.effect[ name ] = effect;
		$.effects.effect[ name ].mode = mode;

		return effect;
	},

	scaledDimensions: function( element, percent, direction ) {
		if ( percent === 0 ) {
			return {
				height: 0,
				width: 0,
				outerHeight: 0,
				outerWidth: 0
			};
		}

		var x = direction !== "horizontal" ? ( ( percent || 100 ) / 100 ) : 1,
			y = direction !== "vertical" ? ( ( percent || 100 ) / 100 ) : 1;

		return {
			height: element.height() * y,
			width: element.width() * x,
			outerHeight: element.outerHeight() * y,
			outerWidth: element.outerWidth() * x
		};

	},

	clipToBox: function( animation ) {
		return {
			width: animation.clip.right - animation.clip.left,
			height: animation.clip.bottom - animation.clip.top,
			left: animation.clip.left,
			top: animation.clip.top
		};
	},

	// Injects recently queued functions to be first in line (after "inprogress")
	unshift: function( element, queueLength, count ) {
		var queue = element.queue();

		if ( queueLength > 1 ) {
			queue.splice.apply( queue,
				[ 1, 0 ].concat( queue.splice( queueLength, count ) ) );
		}
		element.dequeue();
	},

	saveStyle: function( element ) {
		element.data( dataSpaceStyle, element[ 0 ].style.cssText );
	},

	restoreStyle: function( element ) {
		element[ 0 ].style.cssText = element.data( dataSpaceStyle ) || "";
		element.removeData( dataSpaceStyle );
	},

	mode: function( element, mode ) {
		var hidden = element.is( ":hidden" );

		if ( mode === "toggle" ) {
			mode = hidden ? "show" : "hide";
		}
		if ( hidden ? mode === "hide" : mode === "show" ) {
			mode = "none";
		}
		return mode;
	},

	// Translates a [top,left] array into a baseline value
	getBaseline: function( origin, original ) {
		var y, x;

		switch ( origin[ 0 ] ) {
		case "top":
			y = 0;
			break;
		case "middle":
			y = 0.5;
			break;
		case "bottom":
			y = 1;
			break;
		default:
			y = origin[ 0 ] / original.height;
		}

		switch ( origin[ 1 ] ) {
		case "left":
			x = 0;
			break;
		case "center":
			x = 0.5;
			break;
		case "right":
			x = 1;
			break;
		default:
			x = origin[ 1 ] / original.width;
		}

		return {
			x: x,
			y: y
		};
	},

	// Creates a placeholder element so that the original element can be made absolute
	createPlaceholder: function( element ) {
		var placeholder,
			cssPosition = element.css( "position" ),
			position = element.position();

		// Lock in margins first to account for form elements, which
		// will change margin if you explicitly set height
		// see: http://jsfiddle.net/JZSMt/3/ https://bugs.webkit.org/show_bug.cgi?id=107380
		// Support: Safari
		element.css( {
			marginTop: element.css( "marginTop" ),
			marginBottom: element.css( "marginBottom" ),
			marginLeft: element.css( "marginLeft" ),
			marginRight: element.css( "marginRight" )
		} )
		.outerWidth( element.outerWidth() )
		.outerHeight( element.outerHeight() );

		if ( /^(static|relative)/.test( cssPosition ) ) {
			cssPosition = "absolute";

			placeholder = $( "<" + element[ 0 ].nodeName + ">" ).insertAfter( element ).css( {

				// Convert inline to inline block to account for inline elements
				// that turn to inline block based on content (like img)
				display: /^(inline|ruby)/.test( element.css( "display" ) ) ?
					"inline-block" :
					"block",
				visibility: "hidden",

				// Margins need to be set to account for margin collapse
				marginTop: element.css( "marginTop" ),
				marginBottom: element.css( "marginBottom" ),
				marginLeft: element.css( "marginLeft" ),
				marginRight: element.css( "marginRight" ),
				"float": element.css( "float" )
			} )
			.outerWidth( element.outerWidth() )
			.outerHeight( element.outerHeight() )
			.addClass( "ui-effects-placeholder" );

			element.data( dataSpace + "placeholder", placeholder );
		}

		element.css( {
			position: cssPosition,
			left: position.left,
			top: position.top
		} );

		return placeholder;
	},

	removePlaceholder: function( element ) {
		var dataKey = dataSpace + "placeholder",
				placeholder = element.data( dataKey );

		if ( placeholder ) {
			placeholder.remove();
			element.removeData( dataKey );
		}
	},

	// Removes a placeholder if it exists and restores
	// properties that were modified during placeholder creation
	cleanUp: function( element ) {
		$.effects.restoreStyle( element );
		$.effects.removePlaceholder( element );
	},

	setTransition: function( element, list, factor, value ) {
		value = value || {};
		$.each( list, function( i, x ) {
			var unit = element.cssUnit( x );
			if ( unit[ 0 ] > 0 ) {
				value[ x ] = unit[ 0 ] * factor + unit[ 1 ];
			}
		} );
		return value;
	}
} );

// Return an effect options object for the given parameters:
function _normalizeArguments( effect, options, speed, callback ) {

	// Allow passing all options as the first parameter
	if ( $.isPlainObject( effect ) ) {
		options = effect;
		effect = effect.effect;
	}

	// Convert to an object
	effect = { effect: effect };

	// Catch (effect, null, ...)
	if ( options == null ) {
		options = {};
	}

	// Catch (effect, callback)
	if ( $.isFunction( options ) ) {
		callback = options;
		speed = null;
		options = {};
	}

	// Catch (effect, speed, ?)
	if ( typeof options === "number" || $.fx.speeds[ options ] ) {
		callback = speed;
		speed = options;
		options = {};
	}

	// Catch (effect, options, callback)
	if ( $.isFunction( speed ) ) {
		callback = speed;
		speed = null;
	}

	// Add options to effect
	if ( options ) {
		$.extend( effect, options );
	}

	speed = speed || options.duration;
	effect.duration = $.fx.off ? 0 :
		typeof speed === "number" ? speed :
		speed in $.fx.speeds ? $.fx.speeds[ speed ] :
		$.fx.speeds._default;

	effect.complete = callback || options.complete;

	return effect;
}

function standardAnimationOption( option ) {

	// Valid standard speeds (nothing, number, named speed)
	if ( !option || typeof option === "number" || $.fx.speeds[ option ] ) {
		return true;
	}

	// Invalid strings - treat as "normal" speed
	if ( typeof option === "string" && !$.effects.effect[ option ] ) {
		return true;
	}

	// Complete callback
	if ( $.isFunction( option ) ) {
		return true;
	}

	// Options hash (but not naming an effect)
	if ( typeof option === "object" && !option.effect ) {
		return true;
	}

	// Didn't match any standard API
	return false;
}

$.fn.extend( {
	effect: function( /* effect, options, speed, callback */ ) {
		var args = _normalizeArguments.apply( this, arguments ),
			effectMethod = $.effects.effect[ args.effect ],
			defaultMode = effectMethod.mode,
			queue = args.queue,
			queueName = queue || "fx",
			complete = args.complete,
			mode = args.mode,
			modes = [],
			prefilter = function( next ) {
				var el = $( this ),
					normalizedMode = $.effects.mode( el, mode ) || defaultMode;

				// Sentinel for duck-punching the :animated psuedo-selector
				el.data( dataSpaceAnimated, true );

				// Save effect mode for later use,
				// we can't just call $.effects.mode again later,
				// as the .show() below destroys the initial state
				modes.push( normalizedMode );

				// See $.uiBackCompat inside of run() for removal of defaultMode in 1.13
				if ( defaultMode && ( normalizedMode === "show" ||
						( normalizedMode === defaultMode && normalizedMode === "hide" ) ) ) {
					el.show();
				}

				if ( !defaultMode || normalizedMode !== "none" ) {
					$.effects.saveStyle( el );
				}

				if ( $.isFunction( next ) ) {
					next();
				}
			};

		if ( $.fx.off || !effectMethod ) {

			// Delegate to the original method (e.g., .show()) if possible
			if ( mode ) {
				return this[ mode ]( args.duration, complete );
			} else {
				return this.each( function() {
					if ( complete ) {
						complete.call( this );
					}
				} );
			}
		}

		function run( next ) {
			var elem = $( this );

			function cleanup() {
				elem.removeData( dataSpaceAnimated );

				$.effects.cleanUp( elem );

				if ( args.mode === "hide" ) {
					elem.hide();
				}

				done();
			}

			function done() {
				if ( $.isFunction( complete ) ) {
					complete.call( elem[ 0 ] );
				}

				if ( $.isFunction( next ) ) {
					next();
				}
			}

			// Override mode option on a per element basis,
			// as toggle can be either show or hide depending on element state
			args.mode = modes.shift();

			if ( $.uiBackCompat !== false && !defaultMode ) {
				if ( elem.is( ":hidden" ) ? mode === "hide" : mode === "show" ) {

					// Call the core method to track "olddisplay" properly
					elem[ mode ]();
					done();
				} else {
					effectMethod.call( elem[ 0 ], args, done );
				}
			} else {
				if ( args.mode === "none" ) {

					// Call the core method to track "olddisplay" properly
					elem[ mode ]();
					done();
				} else {
					effectMethod.call( elem[ 0 ], args, cleanup );
				}
			}
		}

		// Run prefilter on all elements first to ensure that
		// any showing or hiding happens before placeholder creation,
		// which ensures that any layout changes are correctly captured.
		return queue === false ?
			this.each( prefilter ).each( run ) :
			this.queue( queueName, prefilter ).queue( queueName, run );
	},

	show: ( function( orig ) {
		return function( option ) {
			if ( standardAnimationOption( option ) ) {
				return orig.apply( this, arguments );
			} else {
				var args = _normalizeArguments.apply( this, arguments );
				args.mode = "show";
				return this.effect.call( this, args );
			}
		};
	} )( $.fn.show ),

	hide: ( function( orig ) {
		return function( option ) {
			if ( standardAnimationOption( option ) ) {
				return orig.apply( this, arguments );
			} else {
				var args = _normalizeArguments.apply( this, arguments );
				args.mode = "hide";
				return this.effect.call( this, args );
			}
		};
	} )( $.fn.hide ),

	toggle: ( function( orig ) {
		return function( option ) {
			if ( standardAnimationOption( option ) || typeof option === "boolean" ) {
				return orig.apply( this, arguments );
			} else {
				var args = _normalizeArguments.apply( this, arguments );
				args.mode = "toggle";
				return this.effect.call( this, args );
			}
		};
	} )( $.fn.toggle ),

	cssUnit: function( key ) {
		var style = this.css( key ),
			val = [];

		$.each( [ "em", "px", "%", "pt" ], function( i, unit ) {
			if ( style.indexOf( unit ) > 0 ) {
				val = [ parseFloat( style ), unit ];
			}
		} );
		return val;
	},

	cssClip: function( clipObj ) {
		if ( clipObj ) {
			return this.css( "clip", "rect(" + clipObj.top + "px " + clipObj.right + "px " +
				clipObj.bottom + "px " + clipObj.left + "px)" );
		}
		return parseClip( this.css( "clip" ), this );
	},

	transfer: function( options, done ) {
		var element = $( this ),
			target = $( options.to ),
			targetFixed = target.css( "position" ) === "fixed",
			body = $( "body" ),
			fixTop = targetFixed ? body.scrollTop() : 0,
			fixLeft = targetFixed ? body.scrollLeft() : 0,
			endPosition = target.offset(),
			animation = {
				top: endPosition.top - fixTop,
				left: endPosition.left - fixLeft,
				height: target.innerHeight(),
				width: target.innerWidth()
			},
			startPosition = element.offset(),
			transfer = $( "<div class='ui-effects-transfer'></div>" )
				.appendTo( "body" )
				.addClass( options.className )
				.css( {
					top: startPosition.top - fixTop,
					left: startPosition.left - fixLeft,
					height: element.innerHeight(),
					width: element.innerWidth(),
					position: targetFixed ? "fixed" : "absolute"
				} )
				.animate( animation, options.duration, options.easing, function() {
					transfer.remove();
					if ( $.isFunction( done ) ) {
						done();
					}
				} );
	}
} );

function parseClip( str, element ) {
		var outerWidth = element.outerWidth(),
			outerHeight = element.outerHeight(),
			clipRegex = /^rect\((-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto)\)$/,
			values = clipRegex.exec( str ) || [ "", 0, outerWidth, outerHeight, 0 ];

		return {
			top: parseFloat( values[ 1 ] ) || 0,
			right: values[ 2 ] === "auto" ? outerWidth : parseFloat( values[ 2 ] ),
			bottom: values[ 3 ] === "auto" ? outerHeight : parseFloat( values[ 3 ] ),
			left: parseFloat( values[ 4 ] ) || 0
		};
}

$.fx.step.clip = function( fx ) {
	if ( !fx.clipInit ) {
		fx.start = $( fx.elem ).cssClip();
		if ( typeof fx.end === "string" ) {
			fx.end = parseClip( fx.end, fx.elem );
		}
		fx.clipInit = true;
	}

	$( fx.elem ).cssClip( {
		top: fx.pos * ( fx.end.top - fx.start.top ) + fx.start.top,
		right: fx.pos * ( fx.end.right - fx.start.right ) + fx.start.right,
		bottom: fx.pos * ( fx.end.bottom - fx.start.bottom ) + fx.start.bottom,
		left: fx.pos * ( fx.end.left - fx.start.left ) + fx.start.left
	} );
};

} )();

/******************************************************************************/
/*********************************** EASING ***********************************/
/******************************************************************************/

( function() {

// Based on easing equations from Robert Penner (http://www.robertpenner.com/easing)

var baseEasings = {};

$.each( [ "Quad", "Cubic", "Quart", "Quint", "Expo" ], function( i, name ) {
	baseEasings[ name ] = function( p ) {
		return Math.pow( p, i + 2 );
	};
} );

$.extend( baseEasings, {
	Sine: function( p ) {
		return 1 - Math.cos( p * Math.PI / 2 );
	},
	Circ: function( p ) {
		return 1 - Math.sqrt( 1 - p * p );
	},
	Elastic: function( p ) {
		return p === 0 || p === 1 ? p :
			-Math.pow( 2, 8 * ( p - 1 ) ) * Math.sin( ( ( p - 1 ) * 80 - 7.5 ) * Math.PI / 15 );
	},
	Back: function( p ) {
		return p * p * ( 3 * p - 2 );
	},
	Bounce: function( p ) {
		var pow2,
			bounce = 4;

		while ( p < ( ( pow2 = Math.pow( 2, --bounce ) ) - 1 ) / 11 ) {}
		return 1 / Math.pow( 4, 3 - bounce ) - 7.5625 * Math.pow( ( pow2 * 3 - 2 ) / 22 - p, 2 );
	}
} );

$.each( baseEasings, function( name, easeIn ) {
	$.easing[ "easeIn" + name ] = easeIn;
	$.easing[ "easeOut" + name ] = function( p ) {
		return 1 - easeIn( 1 - p );
	};
	$.easing[ "easeInOut" + name ] = function( p ) {
		return p < 0.5 ?
			easeIn( p * 2 ) / 2 :
			1 - easeIn( p * -2 + 2 ) / 2;
	};
} );

} )();

var effect = $.effects;


/*!
 * jQuery UI Effects Blind 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Blind Effect
//>>group: Effects
//>>description: Blinds the element.
//>>docs: http://api.jqueryui.com/blind-effect/
//>>demos: http://jqueryui.com/effect/



var effectsEffectBlind = $.effects.define( "blind", "hide", function( options, done ) {
	var map = {
			up: [ "bottom", "top" ],
			vertical: [ "bottom", "top" ],
			down: [ "top", "bottom" ],
			left: [ "right", "left" ],
			horizontal: [ "right", "left" ],
			right: [ "left", "right" ]
		},
		element = $( this ),
		direction = options.direction || "up",
		start = element.cssClip(),
		animate = { clip: $.extend( {}, start ) },
		placeholder = $.effects.createPlaceholder( element );

	animate.clip[ map[ direction ][ 0 ] ] = animate.clip[ map[ direction ][ 1 ] ];

	if ( options.mode === "show" ) {
		element.cssClip( animate.clip );
		if ( placeholder ) {
			placeholder.css( $.effects.clipToBox( animate ) );
		}

		animate.clip = start;
	}

	if ( placeholder ) {
		placeholder.animate( $.effects.clipToBox( animate ), options.duration, options.easing );
	}

	element.animate( animate, {
		queue: false,
		duration: options.duration,
		easing: options.easing,
		complete: done
	} );
} );


/*!
 * jQuery UI Effects Bounce 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Bounce Effect
//>>group: Effects
//>>description: Bounces an element horizontally or vertically n times.
//>>docs: http://api.jqueryui.com/bounce-effect/
//>>demos: http://jqueryui.com/effect/



var effectsEffectBounce = $.effects.define( "bounce", function( options, done ) {
	var upAnim, downAnim, refValue,
		element = $( this ),

		// Defaults:
		mode = options.mode,
		hide = mode === "hide",
		show = mode === "show",
		direction = options.direction || "up",
		distance = options.distance,
		times = options.times || 5,

		// Number of internal animations
		anims = times * 2 + ( show || hide ? 1 : 0 ),
		speed = options.duration / anims,
		easing = options.easing,

		// Utility:
		ref = ( direction === "up" || direction === "down" ) ? "top" : "left",
		motion = ( direction === "up" || direction === "left" ),
		i = 0,

		queuelen = element.queue().length;

	$.effects.createPlaceholder( element );

	refValue = element.css( ref );

	// Default distance for the BIGGEST bounce is the outer Distance / 3
	if ( !distance ) {
		distance = element[ ref === "top" ? "outerHeight" : "outerWidth" ]() / 3;
	}

	if ( show ) {
		downAnim = { opacity: 1 };
		downAnim[ ref ] = refValue;

		// If we are showing, force opacity 0 and set the initial position
		// then do the "first" animation
		element
			.css( "opacity", 0 )
			.css( ref, motion ? -distance * 2 : distance * 2 )
			.animate( downAnim, speed, easing );
	}

	// Start at the smallest distance if we are hiding
	if ( hide ) {
		distance = distance / Math.pow( 2, times - 1 );
	}

	downAnim = {};
	downAnim[ ref ] = refValue;

	// Bounces up/down/left/right then back to 0 -- times * 2 animations happen here
	for ( ; i < times; i++ ) {
		upAnim = {};
		upAnim[ ref ] = ( motion ? "-=" : "+=" ) + distance;

		element
			.animate( upAnim, speed, easing )
			.animate( downAnim, speed, easing );

		distance = hide ? distance * 2 : distance / 2;
	}

	// Last Bounce when Hiding
	if ( hide ) {
		upAnim = { opacity: 0 };
		upAnim[ ref ] = ( motion ? "-=" : "+=" ) + distance;

		element.animate( upAnim, speed, easing );
	}

	element.queue( done );

	$.effects.unshift( element, queuelen, anims + 1 );
} );


/*!
 * jQuery UI Effects Clip 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Clip Effect
//>>group: Effects
//>>description: Clips the element on and off like an old TV.
//>>docs: http://api.jqueryui.com/clip-effect/
//>>demos: http://jqueryui.com/effect/



var effectsEffectClip = $.effects.define( "clip", "hide", function( options, done ) {
	var start,
		animate = {},
		element = $( this ),
		direction = options.direction || "vertical",
		both = direction === "both",
		horizontal = both || direction === "horizontal",
		vertical = both || direction === "vertical";

	start = element.cssClip();
	animate.clip = {
		top: vertical ? ( start.bottom - start.top ) / 2 : start.top,
		right: horizontal ? ( start.right - start.left ) / 2 : start.right,
		bottom: vertical ? ( start.bottom - start.top ) / 2 : start.bottom,
		left: horizontal ? ( start.right - start.left ) / 2 : start.left
	};

	$.effects.createPlaceholder( element );

	if ( options.mode === "show" ) {
		element.cssClip( animate.clip );
		animate.clip = start;
	}

	element.animate( animate, {
		queue: false,
		duration: options.duration,
		easing: options.easing,
		complete: done
	} );

} );


/*!
 * jQuery UI Effects Drop 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Drop Effect
//>>group: Effects
//>>description: Moves an element in one direction and hides it at the same time.
//>>docs: http://api.jqueryui.com/drop-effect/
//>>demos: http://jqueryui.com/effect/



var effectsEffectDrop = $.effects.define( "drop", "hide", function( options, done ) {

	var distance,
		element = $( this ),
		mode = options.mode,
		show = mode === "show",
		direction = options.direction || "left",
		ref = ( direction === "up" || direction === "down" ) ? "top" : "left",
		motion = ( direction === "up" || direction === "left" ) ? "-=" : "+=",
		oppositeMotion = ( motion === "+=" ) ? "-=" : "+=",
		animation = {
			opacity: 0
		};

	$.effects.createPlaceholder( element );

	distance = options.distance ||
		element[ ref === "top" ? "outerHeight" : "outerWidth" ]( true ) / 2;

	animation[ ref ] = motion + distance;

	if ( show ) {
		element.css( animation );

		animation[ ref ] = oppositeMotion + distance;
		animation.opacity = 1;
	}

	// Animate
	element.animate( animation, {
		queue: false,
		duration: options.duration,
		easing: options.easing,
		complete: done
	} );
} );


/*!
 * jQuery UI Effects Explode 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Explode Effect
//>>group: Effects
// jscs:disable maximumLineLength
//>>description: Explodes an element in all directions into n pieces. Implodes an element to its original wholeness.
// jscs:enable maximumLineLength
//>>docs: http://api.jqueryui.com/explode-effect/
//>>demos: http://jqueryui.com/effect/



var effectsEffectExplode = $.effects.define( "explode", "hide", function( options, done ) {

	var i, j, left, top, mx, my,
		rows = options.pieces ? Math.round( Math.sqrt( options.pieces ) ) : 3,
		cells = rows,
		element = $( this ),
		mode = options.mode,
		show = mode === "show",

		// Show and then visibility:hidden the element before calculating offset
		offset = element.show().css( "visibility", "hidden" ).offset(),

		// Width and height of a piece
		width = Math.ceil( element.outerWidth() / cells ),
		height = Math.ceil( element.outerHeight() / rows ),
		pieces = [];

	// Children animate complete:
	function childComplete() {
		pieces.push( this );
		if ( pieces.length === rows * cells ) {
			animComplete();
		}
	}

	// Clone the element for each row and cell.
	for ( i = 0; i < rows; i++ ) { // ===>
		top = offset.top + i * height;
		my = i - ( rows - 1 ) / 2;

		for ( j = 0; j < cells; j++ ) { // |||
			left = offset.left + j * width;
			mx = j - ( cells - 1 ) / 2;

			// Create a clone of the now hidden main element that will be absolute positioned
			// within a wrapper div off the -left and -top equal to size of our pieces
			element
				.clone()
				.appendTo( "body" )
				.wrap( "<div></div>" )
				.css( {
					position: "absolute",
					visibility: "visible",
					left: -j * width,
					top: -i * height
				} )

				// Select the wrapper - make it overflow: hidden and absolute positioned based on
				// where the original was located +left and +top equal to the size of pieces
				.parent()
					.addClass( "ui-effects-explode" )
					.css( {
						position: "absolute",
						overflow: "hidden",
						width: width,
						height: height,
						left: left + ( show ? mx * width : 0 ),
						top: top + ( show ? my * height : 0 ),
						opacity: show ? 0 : 1
					} )
					.animate( {
						left: left + ( show ? 0 : mx * width ),
						top: top + ( show ? 0 : my * height ),
						opacity: show ? 1 : 0
					}, options.duration || 500, options.easing, childComplete );
		}
	}

	function animComplete() {
		element.css( {
			visibility: "visible"
		} );
		$( pieces ).remove();
		done();
	}
} );


/*!
 * jQuery UI Effects Fade 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Fade Effect
//>>group: Effects
//>>description: Fades the element.
//>>docs: http://api.jqueryui.com/fade-effect/
//>>demos: http://jqueryui.com/effect/



var effectsEffectFade = $.effects.define( "fade", "toggle", function( options, done ) {
	var show = options.mode === "show";

	$( this )
		.css( "opacity", show ? 0 : 1 )
		.animate( {
			opacity: show ? 1 : 0
		}, {
			queue: false,
			duration: options.duration,
			easing: options.easing,
			complete: done
		} );
} );


/*!
 * jQuery UI Effects Fold 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Fold Effect
//>>group: Effects
//>>description: Folds an element first horizontally and then vertically.
//>>docs: http://api.jqueryui.com/fold-effect/
//>>demos: http://jqueryui.com/effect/



var effectsEffectFold = $.effects.define( "fold", "hide", function( options, done ) {

	// Create element
	var element = $( this ),
		mode = options.mode,
		show = mode === "show",
		hide = mode === "hide",
		size = options.size || 15,
		percent = /([0-9]+)%/.exec( size ),
		horizFirst = !!options.horizFirst,
		ref = horizFirst ? [ "right", "bottom" ] : [ "bottom", "right" ],
		duration = options.duration / 2,

		placeholder = $.effects.createPlaceholder( element ),

		start = element.cssClip(),
		animation1 = { clip: $.extend( {}, start ) },
		animation2 = { clip: $.extend( {}, start ) },

		distance = [ start[ ref[ 0 ] ], start[ ref[ 1 ] ] ],

		queuelen = element.queue().length;

	if ( percent ) {
		size = parseInt( percent[ 1 ], 10 ) / 100 * distance[ hide ? 0 : 1 ];
	}
	animation1.clip[ ref[ 0 ] ] = size;
	animation2.clip[ ref[ 0 ] ] = size;
	animation2.clip[ ref[ 1 ] ] = 0;

	if ( show ) {
		element.cssClip( animation2.clip );
		if ( placeholder ) {
			placeholder.css( $.effects.clipToBox( animation2 ) );
		}

		animation2.clip = start;
	}

	// Animate
	element
		.queue( function( next ) {
			if ( placeholder ) {
				placeholder
					.animate( $.effects.clipToBox( animation1 ), duration, options.easing )
					.animate( $.effects.clipToBox( animation2 ), duration, options.easing );
			}

			next();
		} )
		.animate( animation1, duration, options.easing )
		.animate( animation2, duration, options.easing )
		.queue( done );

	$.effects.unshift( element, queuelen, 4 );
} );


/*!
 * jQuery UI Effects Highlight 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Highlight Effect
//>>group: Effects
//>>description: Highlights the background of an element in a defined color for a custom duration.
//>>docs: http://api.jqueryui.com/highlight-effect/
//>>demos: http://jqueryui.com/effect/



var effectsEffectHighlight = $.effects.define( "highlight", "show", function( options, done ) {
	var element = $( this ),
		animation = {
			backgroundColor: element.css( "backgroundColor" )
		};

	if ( options.mode === "hide" ) {
		animation.opacity = 0;
	}

	$.effects.saveStyle( element );

	element
		.css( {
			backgroundImage: "none",
			backgroundColor: options.color || "#ffff99"
		} )
		.animate( animation, {
			queue: false,
			duration: options.duration,
			easing: options.easing,
			complete: done
		} );
} );


/*!
 * jQuery UI Effects Size 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Size Effect
//>>group: Effects
//>>description: Resize an element to a specified width and height.
//>>docs: http://api.jqueryui.com/size-effect/
//>>demos: http://jqueryui.com/effect/



var effectsEffectSize = $.effects.define( "size", function( options, done ) {

	// Create element
	var baseline, factor, temp,
		element = $( this ),

		// Copy for children
		cProps = [ "fontSize" ],
		vProps = [ "borderTopWidth", "borderBottomWidth", "paddingTop", "paddingBottom" ],
		hProps = [ "borderLeftWidth", "borderRightWidth", "paddingLeft", "paddingRight" ],

		// Set options
		mode = options.mode,
		restore = mode !== "effect",
		scale = options.scale || "both",
		origin = options.origin || [ "middle", "center" ],
		position = element.css( "position" ),
		pos = element.position(),
		original = $.effects.scaledDimensions( element ),
		from = options.from || original,
		to = options.to || $.effects.scaledDimensions( element, 0 );

	$.effects.createPlaceholder( element );

	if ( mode === "show" ) {
		temp = from;
		from = to;
		to = temp;
	}

	// Set scaling factor
	factor = {
		from: {
			y: from.height / original.height,
			x: from.width / original.width
		},
		to: {
			y: to.height / original.height,
			x: to.width / original.width
		}
	};

	// Scale the css box
	if ( scale === "box" || scale === "both" ) {

		// Vertical props scaling
		if ( factor.from.y !== factor.to.y ) {
			from = $.effects.setTransition( element, vProps, factor.from.y, from );
			to = $.effects.setTransition( element, vProps, factor.to.y, to );
		}

		// Horizontal props scaling
		if ( factor.from.x !== factor.to.x ) {
			from = $.effects.setTransition( element, hProps, factor.from.x, from );
			to = $.effects.setTransition( element, hProps, factor.to.x, to );
		}
	}

	// Scale the content
	if ( scale === "content" || scale === "both" ) {

		// Vertical props scaling
		if ( factor.from.y !== factor.to.y ) {
			from = $.effects.setTransition( element, cProps, factor.from.y, from );
			to = $.effects.setTransition( element, cProps, factor.to.y, to );
		}
	}

	// Adjust the position properties based on the provided origin points
	if ( origin ) {
		baseline = $.effects.getBaseline( origin, original );
		from.top = ( original.outerHeight - from.outerHeight ) * baseline.y + pos.top;
		from.left = ( original.outerWidth - from.outerWidth ) * baseline.x + pos.left;
		to.top = ( original.outerHeight - to.outerHeight ) * baseline.y + pos.top;
		to.left = ( original.outerWidth - to.outerWidth ) * baseline.x + pos.left;
	}
	element.css( from );

	// Animate the children if desired
	if ( scale === "content" || scale === "both" ) {

		vProps = vProps.concat( [ "marginTop", "marginBottom" ] ).concat( cProps );
		hProps = hProps.concat( [ "marginLeft", "marginRight" ] );

		// Only animate children with width attributes specified
		// TODO: is this right? should we include anything with css width specified as well
		element.find( "*[width]" ).each( function() {
			var child = $( this ),
				childOriginal = $.effects.scaledDimensions( child ),
				childFrom = {
					height: childOriginal.height * factor.from.y,
					width: childOriginal.width * factor.from.x,
					outerHeight: childOriginal.outerHeight * factor.from.y,
					outerWidth: childOriginal.outerWidth * factor.from.x
				},
				childTo = {
					height: childOriginal.height * factor.to.y,
					width: childOriginal.width * factor.to.x,
					outerHeight: childOriginal.height * factor.to.y,
					outerWidth: childOriginal.width * factor.to.x
				};

			// Vertical props scaling
			if ( factor.from.y !== factor.to.y ) {
				childFrom = $.effects.setTransition( child, vProps, factor.from.y, childFrom );
				childTo = $.effects.setTransition( child, vProps, factor.to.y, childTo );
			}

			// Horizontal props scaling
			if ( factor.from.x !== factor.to.x ) {
				childFrom = $.effects.setTransition( child, hProps, factor.from.x, childFrom );
				childTo = $.effects.setTransition( child, hProps, factor.to.x, childTo );
			}

			if ( restore ) {
				$.effects.saveStyle( child );
			}

			// Animate children
			child.css( childFrom );
			child.animate( childTo, options.duration, options.easing, function() {

				// Restore children
				if ( restore ) {
					$.effects.restoreStyle( child );
				}
			} );
		} );
	}

	// Animate
	element.animate( to, {
		queue: false,
		duration: options.duration,
		easing: options.easing,
		complete: function() {

			var offset = element.offset();

			if ( to.opacity === 0 ) {
				element.css( "opacity", from.opacity );
			}

			if ( !restore ) {
				element
					.css( "position", position === "static" ? "relative" : position )
					.offset( offset );

				// Need to save style here so that automatic style restoration
				// doesn't restore to the original styles from before the animation.
				$.effects.saveStyle( element );
			}

			done();
		}
	} );

} );


/*!
 * jQuery UI Effects Scale 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Scale Effect
//>>group: Effects
//>>description: Grows or shrinks an element and its content.
//>>docs: http://api.jqueryui.com/scale-effect/
//>>demos: http://jqueryui.com/effect/



var effectsEffectScale = $.effects.define( "scale", function( options, done ) {

	// Create element
	var el = $( this ),
		mode = options.mode,
		percent = parseInt( options.percent, 10 ) ||
			( parseInt( options.percent, 10 ) === 0 ? 0 : ( mode !== "effect" ? 0 : 100 ) ),

		newOptions = $.extend( true, {
			from: $.effects.scaledDimensions( el ),
			to: $.effects.scaledDimensions( el, percent, options.direction || "both" ),
			origin: options.origin || [ "middle", "center" ]
		}, options );

	// Fade option to support puff
	if ( options.fade ) {
		newOptions.from.opacity = 1;
		newOptions.to.opacity = 0;
	}

	$.effects.effect.size.call( this, newOptions, done );
} );


/*!
 * jQuery UI Effects Puff 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Puff Effect
//>>group: Effects
//>>description: Creates a puff effect by scaling the element up and hiding it at the same time.
//>>docs: http://api.jqueryui.com/puff-effect/
//>>demos: http://jqueryui.com/effect/



var effectsEffectPuff = $.effects.define( "puff", "hide", function( options, done ) {
	var newOptions = $.extend( true, {}, options, {
		fade: true,
		percent: parseInt( options.percent, 10 ) || 150
	} );

	$.effects.effect.scale.call( this, newOptions, done );
} );


/*!
 * jQuery UI Effects Pulsate 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Pulsate Effect
//>>group: Effects
//>>description: Pulsates an element n times by changing the opacity to zero and back.
//>>docs: http://api.jqueryui.com/pulsate-effect/
//>>demos: http://jqueryui.com/effect/



var effectsEffectPulsate = $.effects.define( "pulsate", "show", function( options, done ) {
	var element = $( this ),
		mode = options.mode,
		show = mode === "show",
		hide = mode === "hide",
		showhide = show || hide,

		// Showing or hiding leaves off the "last" animation
		anims = ( ( options.times || 5 ) * 2 ) + ( showhide ? 1 : 0 ),
		duration = options.duration / anims,
		animateTo = 0,
		i = 1,
		queuelen = element.queue().length;

	if ( show || !element.is( ":visible" ) ) {
		element.css( "opacity", 0 ).show();
		animateTo = 1;
	}

	// Anims - 1 opacity "toggles"
	for ( ; i < anims; i++ ) {
		element.animate( { opacity: animateTo }, duration, options.easing );
		animateTo = 1 - animateTo;
	}

	element.animate( { opacity: animateTo }, duration, options.easing );

	element.queue( done );

	$.effects.unshift( element, queuelen, anims + 1 );
} );


/*!
 * jQuery UI Effects Shake 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Shake Effect
//>>group: Effects
//>>description: Shakes an element horizontally or vertically n times.
//>>docs: http://api.jqueryui.com/shake-effect/
//>>demos: http://jqueryui.com/effect/



var effectsEffectShake = $.effects.define( "shake", function( options, done ) {

	var i = 1,
		element = $( this ),
		direction = options.direction || "left",
		distance = options.distance || 20,
		times = options.times || 3,
		anims = times * 2 + 1,
		speed = Math.round( options.duration / anims ),
		ref = ( direction === "up" || direction === "down" ) ? "top" : "left",
		positiveMotion = ( direction === "up" || direction === "left" ),
		animation = {},
		animation1 = {},
		animation2 = {},

		queuelen = element.queue().length;

	$.effects.createPlaceholder( element );

	// Animation
	animation[ ref ] = ( positiveMotion ? "-=" : "+=" ) + distance;
	animation1[ ref ] = ( positiveMotion ? "+=" : "-=" ) + distance * 2;
	animation2[ ref ] = ( positiveMotion ? "-=" : "+=" ) + distance * 2;

	// Animate
	element.animate( animation, speed, options.easing );

	// Shakes
	for ( ; i < times; i++ ) {
		element
			.animate( animation1, speed, options.easing )
			.animate( animation2, speed, options.easing );
	}

	element
		.animate( animation1, speed, options.easing )
		.animate( animation, speed / 2, options.easing )
		.queue( done );

	$.effects.unshift( element, queuelen, anims + 1 );
} );


/*!
 * jQuery UI Effects Slide 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Slide Effect
//>>group: Effects
//>>description: Slides an element in and out of the viewport.
//>>docs: http://api.jqueryui.com/slide-effect/
//>>demos: http://jqueryui.com/effect/



var effectsEffectSlide = $.effects.define( "slide", "show", function( options, done ) {
	var startClip, startRef,
		element = $( this ),
		map = {
			up: [ "bottom", "top" ],
			down: [ "top", "bottom" ],
			left: [ "right", "left" ],
			right: [ "left", "right" ]
		},
		mode = options.mode,
		direction = options.direction || "left",
		ref = ( direction === "up" || direction === "down" ) ? "top" : "left",
		positiveMotion = ( direction === "up" || direction === "left" ),
		distance = options.distance ||
			element[ ref === "top" ? "outerHeight" : "outerWidth" ]( true ),
		animation = {};

	$.effects.createPlaceholder( element );

	startClip = element.cssClip();
	startRef = element.position()[ ref ];

	// Define hide animation
	animation[ ref ] = ( positiveMotion ? -1 : 1 ) * distance + startRef;
	animation.clip = element.cssClip();
	animation.clip[ map[ direction ][ 1 ] ] = animation.clip[ map[ direction ][ 0 ] ];

	// Reverse the animation if we're showing
	if ( mode === "show" ) {
		element.cssClip( animation.clip );
		element.css( ref, animation[ ref ] );
		animation.clip = startClip;
		animation[ ref ] = startRef;
	}

	// Actually animate
	element.animate( animation, {
		queue: false,
		duration: options.duration,
		easing: options.easing,
		complete: done
	} );
} );


/*!
 * jQuery UI Effects Transfer 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Transfer Effect
//>>group: Effects
//>>description: Displays a transfer effect from one element to another.
//>>docs: http://api.jqueryui.com/transfer-effect/
//>>demos: http://jqueryui.com/effect/



var effect;
if ( $.uiBackCompat !== false ) {
	effect = $.effects.define( "transfer", function( options, done ) {
		$( this ).transfer( options, done );
	} );
}
var effectsEffectTransfer = effect;


/*!
 * jQuery UI Focusable 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: :focusable Selector
//>>group: Core
//>>description: Selects elements which can be focused.
//>>docs: http://api.jqueryui.com/focusable-selector/



// Selectors
$.ui.focusable = function( element, hasTabindex ) {
	var map, mapName, img, focusableIfVisible, fieldset,
		nodeName = element.nodeName.toLowerCase();

	if ( "area" === nodeName ) {
		map = element.parentNode;
		mapName = map.name;
		if ( !element.href || !mapName || map.nodeName.toLowerCase() !== "map" ) {
			return false;
		}
		img = $( "img[usemap='#" + mapName + "']" );
		return img.length > 0 && img.is( ":visible" );
	}

	if ( /^(input|select|textarea|button|object)$/.test( nodeName ) ) {
		focusableIfVisible = !element.disabled;

		if ( focusableIfVisible ) {

			// Form controls within a disabled fieldset are disabled.
			// However, controls within the fieldset's legend do not get disabled.
			// Since controls generally aren't placed inside legends, we skip
			// this portion of the check.
			fieldset = $( element ).closest( "fieldset" )[ 0 ];
			if ( fieldset ) {
				focusableIfVisible = !fieldset.disabled;
			}
		}
	} else if ( "a" === nodeName ) {
		focusableIfVisible = element.href || hasTabindex;
	} else {
		focusableIfVisible = hasTabindex;
	}

	return focusableIfVisible && $( element ).is( ":visible" ) && visible( $( element ) );
};

// Support: IE 8 only
// IE 8 doesn't resolve inherit to visible/hidden for computed values
function visible( element ) {
	var visibility = element.css( "visibility" );
	while ( visibility === "inherit" ) {
		element = element.parent();
		visibility = element.css( "visibility" );
	}
	return visibility !== "hidden";
}

$.extend( $.expr[ ":" ], {
	focusable: function( element ) {
		return $.ui.focusable( element, $.attr( element, "tabindex" ) != null );
	}
} );

var focusable = $.ui.focusable;




// Support: IE8 Only
// IE8 does not support the form attribute and when it is supplied. It overwrites the form prop
// with a string, so we need to find the proper form.
var form = $.fn.form = function() {
	return typeof this[ 0 ].form === "string" ? this.closest( "form" ) : $( this[ 0 ].form );
};


/*!
 * jQuery UI Form Reset Mixin 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Form Reset Mixin
//>>group: Core
//>>description: Refresh input widgets when their form is reset
//>>docs: http://api.jqueryui.com/form-reset-mixin/



var formResetMixin = $.ui.formResetMixin = {
	_formResetHandler: function() {
		var form = $( this );

		// Wait for the form reset to actually happen before refreshing
		setTimeout( function() {
			var instances = form.data( "ui-form-reset-instances" );
			$.each( instances, function() {
				this.refresh();
			} );
		} );
	},

	_bindFormResetHandler: function() {
		this.form = this.element.form();
		if ( !this.form.length ) {
			return;
		}

		var instances = this.form.data( "ui-form-reset-instances" ) || [];
		if ( !instances.length ) {

			// We don't use _on() here because we use a single event handler per form
			this.form.on( "reset.ui-form-reset", this._formResetHandler );
		}
		instances.push( this );
		this.form.data( "ui-form-reset-instances", instances );
	},

	_unbindFormResetHandler: function() {
		if ( !this.form.length ) {
			return;
		}

		var instances = this.form.data( "ui-form-reset-instances" );
		instances.splice( $.inArray( this, instances ), 1 );
		if ( instances.length ) {
			this.form.data( "ui-form-reset-instances", instances );
		} else {
			this.form
				.removeData( "ui-form-reset-instances" )
				.off( "reset.ui-form-reset" );
		}
	}
};


/*!
 * jQuery UI Support for jQuery core 1.7.x 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 */

//>>label: jQuery 1.7 Support
//>>group: Core
//>>description: Support version 1.7.x of jQuery core



// Support: jQuery 1.7 only
// Not a great way to check versions, but since we only support 1.7+ and only
// need to detect <1.8, this is a simple check that should suffice. Checking
// for "1.7." would be a bit safer, but the version string is 1.7, not 1.7.0
// and we'll never reach 1.70.0 (if we do, we certainly won't be supporting
// 1.7 anymore). See #11197 for why we're not using feature detection.
if ( $.fn.jquery.substring( 0, 3 ) === "1.7" ) {

	// Setters for .innerWidth(), .innerHeight(), .outerWidth(), .outerHeight()
	// Unlike jQuery Core 1.8+, these only support numeric values to set the
	// dimensions in pixels
	$.each( [ "Width", "Height" ], function( i, name ) {
		var side = name === "Width" ? [ "Left", "Right" ] : [ "Top", "Bottom" ],
			type = name.toLowerCase(),
			orig = {
				innerWidth: $.fn.innerWidth,
				innerHeight: $.fn.innerHeight,
				outerWidth: $.fn.outerWidth,
				outerHeight: $.fn.outerHeight
			};

		function reduce( elem, size, border, margin ) {
			$.each( side, function() {
				size -= parseFloat( $.css( elem, "padding" + this ) ) || 0;
				if ( border ) {
					size -= parseFloat( $.css( elem, "border" + this + "Width" ) ) || 0;
				}
				if ( margin ) {
					size -= parseFloat( $.css( elem, "margin" + this ) ) || 0;
				}
			} );
			return size;
		}

		$.fn[ "inner" + name ] = function( size ) {
			if ( size === undefined ) {
				return orig[ "inner" + name ].call( this );
			}

			return this.each( function() {
				$( this ).css( type, reduce( this, size ) + "px" );
			} );
		};

		$.fn[ "outer" + name ] = function( size, margin ) {
			if ( typeof size !== "number" ) {
				return orig[ "outer" + name ].call( this, size );
			}

			return this.each( function() {
				$( this ).css( type, reduce( this, size, true, margin ) + "px" );
			} );
		};
	} );

	$.fn.addBack = function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	};
}

;
/*!
 * jQuery UI Keycode 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Keycode
//>>group: Core
//>>description: Provide keycodes as keynames
//>>docs: http://api.jqueryui.com/jQuery.ui.keyCode/


var keycode = $.ui.keyCode = {
	BACKSPACE: 8,
	COMMA: 188,
	DELETE: 46,
	DOWN: 40,
	END: 35,
	ENTER: 13,
	ESCAPE: 27,
	HOME: 36,
	LEFT: 37,
	PAGE_DOWN: 34,
	PAGE_UP: 33,
	PERIOD: 190,
	RIGHT: 39,
	SPACE: 32,
	TAB: 9,
	UP: 38
};




// Internal use only
var escapeSelector = $.ui.escapeSelector = ( function() {
	var selectorEscape = /([!"#$%&'()*+,./:;<=>?@[\]^`{|}~])/g;
	return function( selector ) {
		return selector.replace( selectorEscape, "\\$1" );
	};
} )();


/*!
 * jQuery UI Labels 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: labels
//>>group: Core
//>>description: Find all the labels associated with a given input
//>>docs: http://api.jqueryui.com/labels/



var labels = $.fn.labels = function() {
	var ancestor, selector, id, labels, ancestors;

	// Check control.labels first
	if ( this[ 0 ].labels && this[ 0 ].labels.length ) {
		return this.pushStack( this[ 0 ].labels );
	}

	// Support: IE <= 11, FF <= 37, Android <= 2.3 only
	// Above browsers do not support control.labels. Everything below is to support them
	// as well as document fragments. control.labels does not work on document fragments
	labels = this.eq( 0 ).parents( "label" );

	// Look for the label based on the id
	id = this.attr( "id" );
	if ( id ) {

		// We don't search against the document in case the element
		// is disconnected from the DOM
		ancestor = this.eq( 0 ).parents().last();

		// Get a full set of top level ancestors
		ancestors = ancestor.add( ancestor.length ? ancestor.siblings() : this.siblings() );

		// Create a selector for the label based on the id
		selector = "label[for='" + $.ui.escapeSelector( id ) + "']";

		labels = labels.add( ancestors.find( selector ).addBack( selector ) );

	}

	// Return whatever we have found for labels
	return this.pushStack( labels );
};


/*!
 * jQuery UI Scroll Parent 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: scrollParent
//>>group: Core
//>>description: Get the closest ancestor element that is scrollable.
//>>docs: http://api.jqueryui.com/scrollParent/



var scrollParent = $.fn.scrollParent = function( includeHidden ) {
	var position = this.css( "position" ),
		excludeStaticParent = position === "absolute",
		overflowRegex = includeHidden ? /(auto|scroll|hidden)/ : /(auto|scroll)/,
		scrollParent = this.parents().filter( function() {
			var parent = $( this );
			if ( excludeStaticParent && parent.css( "position" ) === "static" ) {
				return false;
			}
			return overflowRegex.test( parent.css( "overflow" ) + parent.css( "overflow-y" ) +
				parent.css( "overflow-x" ) );
		} ).eq( 0 );

	return position === "fixed" || !scrollParent.length ?
		$( this[ 0 ].ownerDocument || document ) :
		scrollParent;
};


/*!
 * jQuery UI Tabbable 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: :tabbable Selector
//>>group: Core
//>>description: Selects elements which can be tabbed to.
//>>docs: http://api.jqueryui.com/tabbable-selector/



var tabbable = $.extend( $.expr[ ":" ], {
	tabbable: function( element ) {
		var tabIndex = $.attr( element, "tabindex" ),
			hasTabindex = tabIndex != null;
		return ( !hasTabindex || tabIndex >= 0 ) && $.ui.focusable( element, hasTabindex );
	}
} );


/*!
 * jQuery UI Unique ID 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: uniqueId
//>>group: Core
//>>description: Functions to generate and remove uniqueId's
//>>docs: http://api.jqueryui.com/uniqueId/



var uniqueId = $.fn.extend( {
	uniqueId: ( function() {
		var uuid = 0;

		return function() {
			return this.each( function() {
				if ( !this.id ) {
					this.id = "ui-id-" + ( ++uuid );
				}
			} );
		};
	} )(),

	removeUniqueId: function() {
		return this.each( function() {
			if ( /^ui-id-\d+$/.test( this.id ) ) {
				$( this ).removeAttr( "id" );
			}
		} );
	}
} );


/*!
 * jQuery UI Accordion 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Accordion
//>>group: Widgets
// jscs:disable maximumLineLength
//>>description: Displays collapsible content panels for presenting information in a limited amount of space.
// jscs:enable maximumLineLength
//>>docs: http://api.jqueryui.com/accordion/
//>>demos: http://jqueryui.com/accordion/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/accordion.css
//>>css.theme: ../../themes/base/theme.css



var widgetsAccordion = $.widget( "ui.accordion", {
	version: "1.12.1",
	options: {
		active: 0,
		animate: {},
		classes: {
			"ui-accordion-header": "ui-corner-top",
			"ui-accordion-header-collapsed": "ui-corner-all",
			"ui-accordion-content": "ui-corner-bottom"
		},
		collapsible: false,
		event: "click",
		header: "> li > :first-child, > :not(li):even",
		heightStyle: "auto",
		icons: {
			activeHeader: "ui-icon-triangle-1-s",
			header: "ui-icon-triangle-1-e"
		},

		// Callbacks
		activate: null,
		beforeActivate: null
	},

	hideProps: {
		borderTopWidth: "hide",
		borderBottomWidth: "hide",
		paddingTop: "hide",
		paddingBottom: "hide",
		height: "hide"
	},

	showProps: {
		borderTopWidth: "show",
		borderBottomWidth: "show",
		paddingTop: "show",
		paddingBottom: "show",
		height: "show"
	},

	_create: function() {
		var options = this.options;

		this.prevShow = this.prevHide = $();
		this._addClass( "ui-accordion", "ui-widget ui-helper-reset" );
		this.element.attr( "role", "tablist" );

		// Don't allow collapsible: false and active: false / null
		if ( !options.collapsible && ( options.active === false || options.active == null ) ) {
			options.active = 0;
		}

		this._processPanels();

		// handle negative values
		if ( options.active < 0 ) {
			options.active += this.headers.length;
		}
		this._refresh();
	},

	_getCreateEventData: function() {
		return {
			header: this.active,
			panel: !this.active.length ? $() : this.active.next()
		};
	},

	_createIcons: function() {
		var icon, children,
			icons = this.options.icons;

		if ( icons ) {
			icon = $( "<span>" );
			this._addClass( icon, "ui-accordion-header-icon", "ui-icon " + icons.header );
			icon.prependTo( this.headers );
			children = this.active.children( ".ui-accordion-header-icon" );
			this._removeClass( children, icons.header )
				._addClass( children, null, icons.activeHeader )
				._addClass( this.headers, "ui-accordion-icons" );
		}
	},

	_destroyIcons: function() {
		this._removeClass( this.headers, "ui-accordion-icons" );
		this.headers.children( ".ui-accordion-header-icon" ).remove();
	},

	_destroy: function() {
		var contents;

		// Clean up main element
		this.element.removeAttr( "role" );

		// Clean up headers
		this.headers
			.removeAttr( "role aria-expanded aria-selected aria-controls tabIndex" )
			.removeUniqueId();

		this._destroyIcons();

		// Clean up content panels
		contents = this.headers.next()
			.css( "display", "" )
			.removeAttr( "role aria-hidden aria-labelledby" )
			.removeUniqueId();

		if ( this.options.heightStyle !== "content" ) {
			contents.css( "height", "" );
		}
	},

	_setOption: function( key, value ) {
		if ( key === "active" ) {

			// _activate() will handle invalid values and update this.options
			this._activate( value );
			return;
		}

		if ( key === "event" ) {
			if ( this.options.event ) {
				this._off( this.headers, this.options.event );
			}
			this._setupEvents( value );
		}

		this._super( key, value );

		// Setting collapsible: false while collapsed; open first panel
		if ( key === "collapsible" && !value && this.options.active === false ) {
			this._activate( 0 );
		}

		if ( key === "icons" ) {
			this._destroyIcons();
			if ( value ) {
				this._createIcons();
			}
		}
	},

	_setOptionDisabled: function( value ) {
		this._super( value );

		this.element.attr( "aria-disabled", value );

		// Support: IE8 Only
		// #5332 / #6059 - opacity doesn't cascade to positioned elements in IE
		// so we need to add the disabled class to the headers and panels
		this._toggleClass( null, "ui-state-disabled", !!value );
		this._toggleClass( this.headers.add( this.headers.next() ), null, "ui-state-disabled",
			!!value );
	},

	_keydown: function( event ) {
		if ( event.altKey || event.ctrlKey ) {
			return;
		}

		var keyCode = $.ui.keyCode,
			length = this.headers.length,
			currentIndex = this.headers.index( event.target ),
			toFocus = false;

		switch ( event.keyCode ) {
		case keyCode.RIGHT:
		case keyCode.DOWN:
			toFocus = this.headers[ ( currentIndex + 1 ) % length ];
			break;
		case keyCode.LEFT:
		case keyCode.UP:
			toFocus = this.headers[ ( currentIndex - 1 + length ) % length ];
			break;
		case keyCode.SPACE:
		case keyCode.ENTER:
			this._eventHandler( event );
			break;
		case keyCode.HOME:
			toFocus = this.headers[ 0 ];
			break;
		case keyCode.END:
			toFocus = this.headers[ length - 1 ];
			break;
		}

		if ( toFocus ) {
			$( event.target ).attr( "tabIndex", -1 );
			$( toFocus ).attr( "tabIndex", 0 );
			$( toFocus ).trigger( "focus" );
			event.preventDefault();
		}
	},

	_panelKeyDown: function( event ) {
		if ( event.keyCode === $.ui.keyCode.UP && event.ctrlKey ) {
			$( event.currentTarget ).prev().trigger( "focus" );
		}
	},

	refresh: function() {
		var options = this.options;
		this._processPanels();

		// Was collapsed or no panel
		if ( ( options.active === false && options.collapsible === true ) ||
				!this.headers.length ) {
			options.active = false;
			this.active = $();

		// active false only when collapsible is true
		} else if ( options.active === false ) {
			this._activate( 0 );

		// was active, but active panel is gone
		} else if ( this.active.length && !$.contains( this.element[ 0 ], this.active[ 0 ] ) ) {

			// all remaining panel are disabled
			if ( this.headers.length === this.headers.find( ".ui-state-disabled" ).length ) {
				options.active = false;
				this.active = $();

			// activate previous panel
			} else {
				this._activate( Math.max( 0, options.active - 1 ) );
			}

		// was active, active panel still exists
		} else {

			// make sure active index is correct
			options.active = this.headers.index( this.active );
		}

		this._destroyIcons();

		this._refresh();
	},

	_processPanels: function() {
		var prevHeaders = this.headers,
			prevPanels = this.panels;

		this.headers = this.element.find( this.options.header );
		this._addClass( this.headers, "ui-accordion-header ui-accordion-header-collapsed",
			"ui-state-default" );

		this.panels = this.headers.next().filter( ":not(.ui-accordion-content-active)" ).hide();
		this._addClass( this.panels, "ui-accordion-content", "ui-helper-reset ui-widget-content" );

		// Avoid memory leaks (#10056)
		if ( prevPanels ) {
			this._off( prevHeaders.not( this.headers ) );
			this._off( prevPanels.not( this.panels ) );
		}
	},

	_refresh: function() {
		var maxHeight,
			options = this.options,
			heightStyle = options.heightStyle,
			parent = this.element.parent();

		this.active = this._findActive( options.active );
		this._addClass( this.active, "ui-accordion-header-active", "ui-state-active" )
			._removeClass( this.active, "ui-accordion-header-collapsed" );
		this._addClass( this.active.next(), "ui-accordion-content-active" );
		this.active.next().show();

		this.headers
			.attr( "role", "tab" )
			.each( function() {
				var header = $( this ),
					headerId = header.uniqueId().attr( "id" ),
					panel = header.next(),
					panelId = panel.uniqueId().attr( "id" );
				header.attr( "aria-controls", panelId );
				panel.attr( "aria-labelledby", headerId );
			} )
			.next()
				.attr( "role", "tabpanel" );

		this.headers
			.not( this.active )
				.attr( {
					"aria-selected": "false",
					"aria-expanded": "false",
					tabIndex: -1
				} )
				.next()
					.attr( {
						"aria-hidden": "true"
					} )
					.hide();

		// Make sure at least one header is in the tab order
		if ( !this.active.length ) {
			this.headers.eq( 0 ).attr( "tabIndex", 0 );
		} else {
			this.active.attr( {
				"aria-selected": "true",
				"aria-expanded": "true",
				tabIndex: 0
			} )
				.next()
					.attr( {
						"aria-hidden": "false"
					} );
		}

		this._createIcons();

		this._setupEvents( options.event );

		if ( heightStyle === "fill" ) {
			maxHeight = parent.height();
			this.element.siblings( ":visible" ).each( function() {
				var elem = $( this ),
					position = elem.css( "position" );

				if ( position === "absolute" || position === "fixed" ) {
					return;
				}
				maxHeight -= elem.outerHeight( true );
			} );

			this.headers.each( function() {
				maxHeight -= $( this ).outerHeight( true );
			} );

			this.headers.next()
				.each( function() {
					$( this ).height( Math.max( 0, maxHeight -
						$( this ).innerHeight() + $( this ).height() ) );
				} )
				.css( "overflow", "auto" );
		} else if ( heightStyle === "auto" ) {
			maxHeight = 0;
			this.headers.next()
				.each( function() {
					var isVisible = $( this ).is( ":visible" );
					if ( !isVisible ) {
						$( this ).show();
					}
					maxHeight = Math.max( maxHeight, $( this ).css( "height", "" ).height() );
					if ( !isVisible ) {
						$( this ).hide();
					}
				} )
				.height( maxHeight );
		}
	},

	_activate: function( index ) {
		var active = this._findActive( index )[ 0 ];

		// Trying to activate the already active panel
		if ( active === this.active[ 0 ] ) {
			return;
		}

		// Trying to collapse, simulate a click on the currently active header
		active = active || this.active[ 0 ];

		this._eventHandler( {
			target: active,
			currentTarget: active,
			preventDefault: $.noop
		} );
	},

	_findActive: function( selector ) {
		return typeof selector === "number" ? this.headers.eq( selector ) : $();
	},

	_setupEvents: function( event ) {
		var events = {
			keydown: "_keydown"
		};
		if ( event ) {
			$.each( event.split( " " ), function( index, eventName ) {
				events[ eventName ] = "_eventHandler";
			} );
		}

		this._off( this.headers.add( this.headers.next() ) );
		this._on( this.headers, events );
		this._on( this.headers.next(), { keydown: "_panelKeyDown" } );
		this._hoverable( this.headers );
		this._focusable( this.headers );
	},

	_eventHandler: function( event ) {
		var activeChildren, clickedChildren,
			options = this.options,
			active = this.active,
			clicked = $( event.currentTarget ),
			clickedIsActive = clicked[ 0 ] === active[ 0 ],
			collapsing = clickedIsActive && options.collapsible,
			toShow = collapsing ? $() : clicked.next(),
			toHide = active.next(),
			eventData = {
				oldHeader: active,
				oldPanel: toHide,
				newHeader: collapsing ? $() : clicked,
				newPanel: toShow
			};

		event.preventDefault();

		if (

				// click on active header, but not collapsible
				( clickedIsActive && !options.collapsible ) ||

				// allow canceling activation
				( this._trigger( "beforeActivate", event, eventData ) === false ) ) {
			return;
		}

		options.active = collapsing ? false : this.headers.index( clicked );

		// When the call to ._toggle() comes after the class changes
		// it causes a very odd bug in IE 8 (see #6720)
		this.active = clickedIsActive ? $() : clicked;
		this._toggle( eventData );

		// Switch classes
		// corner classes on the previously active header stay after the animation
		this._removeClass( active, "ui-accordion-header-active", "ui-state-active" );
		if ( options.icons ) {
			activeChildren = active.children( ".ui-accordion-header-icon" );
			this._removeClass( activeChildren, null, options.icons.activeHeader )
				._addClass( activeChildren, null, options.icons.header );
		}

		if ( !clickedIsActive ) {
			this._removeClass( clicked, "ui-accordion-header-collapsed" )
				._addClass( clicked, "ui-accordion-header-active", "ui-state-active" );
			if ( options.icons ) {
				clickedChildren = clicked.children( ".ui-accordion-header-icon" );
				this._removeClass( clickedChildren, null, options.icons.header )
					._addClass( clickedChildren, null, options.icons.activeHeader );
			}

			this._addClass( clicked.next(), "ui-accordion-content-active" );
		}
	},

	_toggle: function( data ) {
		var toShow = data.newPanel,
			toHide = this.prevShow.length ? this.prevShow : data.oldPanel;

		// Handle activating a panel during the animation for another activation
		this.prevShow.add( this.prevHide ).stop( true, true );
		this.prevShow = toShow;
		this.prevHide = toHide;

		if ( this.options.animate ) {
			this._animate( toShow, toHide, data );
		} else {
			toHide.hide();
			toShow.show();
			this._toggleComplete( data );
		}

		toHide.attr( {
			"aria-hidden": "true"
		} );
		toHide.prev().attr( {
			"aria-selected": "false",
			"aria-expanded": "false"
		} );

		// if we're switching panels, remove the old header from the tab order
		// if we're opening from collapsed state, remove the previous header from the tab order
		// if we're collapsing, then keep the collapsing header in the tab order
		if ( toShow.length && toHide.length ) {
			toHide.prev().attr( {
				"tabIndex": -1,
				"aria-expanded": "false"
			} );
		} else if ( toShow.length ) {
			this.headers.filter( function() {
				return parseInt( $( this ).attr( "tabIndex" ), 10 ) === 0;
			} )
				.attr( "tabIndex", -1 );
		}

		toShow
			.attr( "aria-hidden", "false" )
			.prev()
				.attr( {
					"aria-selected": "true",
					"aria-expanded": "true",
					tabIndex: 0
				} );
	},

	_animate: function( toShow, toHide, data ) {
		var total, easing, duration,
			that = this,
			adjust = 0,
			boxSizing = toShow.css( "box-sizing" ),
			down = toShow.length &&
				( !toHide.length || ( toShow.index() < toHide.index() ) ),
			animate = this.options.animate || {},
			options = down && animate.down || animate,
			complete = function() {
				that._toggleComplete( data );
			};

		if ( typeof options === "number" ) {
			duration = options;
		}
		if ( typeof options === "string" ) {
			easing = options;
		}

		// fall back from options to animation in case of partial down settings
		easing = easing || options.easing || animate.easing;
		duration = duration || options.duration || animate.duration;

		if ( !toHide.length ) {
			return toShow.animate( this.showProps, duration, easing, complete );
		}
		if ( !toShow.length ) {
			return toHide.animate( this.hideProps, duration, easing, complete );
		}

		total = toShow.show().outerHeight();
		toHide.animate( this.hideProps, {
			duration: duration,
			easing: easing,
			step: function( now, fx ) {
				fx.now = Math.round( now );
			}
		} );
		toShow
			.hide()
			.animate( this.showProps, {
				duration: duration,
				easing: easing,
				complete: complete,
				step: function( now, fx ) {
					fx.now = Math.round( now );
					if ( fx.prop !== "height" ) {
						if ( boxSizing === "content-box" ) {
							adjust += fx.now;
						}
					} else if ( that.options.heightStyle !== "content" ) {
						fx.now = Math.round( total - toHide.outerHeight() - adjust );
						adjust = 0;
					}
				}
			} );
	},

	_toggleComplete: function( data ) {
		var toHide = data.oldPanel,
			prev = toHide.prev();

		this._removeClass( toHide, "ui-accordion-content-active" );
		this._removeClass( prev, "ui-accordion-header-active" )
			._addClass( prev, "ui-accordion-header-collapsed" );

		// Work around for rendering bug in IE (#5421)
		if ( toHide.length ) {
			toHide.parent()[ 0 ].className = toHide.parent()[ 0 ].className;
		}
		this._trigger( "activate", null, data );
	}
} );



var safeActiveElement = $.ui.safeActiveElement = function( document ) {
	var activeElement;

	// Support: IE 9 only
	// IE9 throws an "Unspecified error" accessing document.activeElement from an <iframe>
	try {
		activeElement = document.activeElement;
	} catch ( error ) {
		activeElement = document.body;
	}

	// Support: IE 9 - 11 only
	// IE may return null instead of an element
	// Interestingly, this only seems to occur when NOT in an iframe
	if ( !activeElement ) {
		activeElement = document.body;
	}

	// Support: IE 11 only
	// IE11 returns a seemingly empty object in some cases when accessing
	// document.activeElement from an <iframe>
	if ( !activeElement.nodeName ) {
		activeElement = document.body;
	}

	return activeElement;
};


/*!
 * jQuery UI Menu 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Menu
//>>group: Widgets
//>>description: Creates nestable menus.
//>>docs: http://api.jqueryui.com/menu/
//>>demos: http://jqueryui.com/menu/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/menu.css
//>>css.theme: ../../themes/base/theme.css



var widgetsMenu = $.widget( "ui.menu", {
	version: "1.12.1",
	defaultElement: "<ul>",
	delay: 300,
	options: {
		icons: {
			submenu: "ui-icon-caret-1-e"
		},
		items: "> *",
		menus: "ul",
		position: {
			my: "left top",
			at: "right top"
		},
		role: "menu",

		// Callbacks
		blur: null,
		focus: null,
		select: null
	},

	_create: function() {
		this.activeMenu = this.element;

		// Flag used to prevent firing of the click handler
		// as the event bubbles up through nested menus
		this.mouseHandled = false;
		this.element
			.uniqueId()
			.attr( {
				role: this.options.role,
				tabIndex: 0
			} );

		this._addClass( "ui-menu", "ui-widget ui-widget-content" );
		this._on( {

			// Prevent focus from sticking to links inside menu after clicking
			// them (focus should always stay on UL during navigation).
			"mousedown .ui-menu-item": function( event ) {
				event.preventDefault();
			},
			"click .ui-menu-item": function( event ) {
				var target = $( event.target );
				var active = $( $.ui.safeActiveElement( this.document[ 0 ] ) );
				if ( !this.mouseHandled && target.not( ".ui-state-disabled" ).length ) {
					this.select( event );

					// Only set the mouseHandled flag if the event will bubble, see #9469.
					if ( !event.isPropagationStopped() ) {
						this.mouseHandled = true;
					}

					// Open submenu on click
					if ( target.has( ".ui-menu" ).length ) {
						this.expand( event );
					} else if ( !this.element.is( ":focus" ) &&
							active.closest( ".ui-menu" ).length ) {

						// Redirect focus to the menu
						this.element.trigger( "focus", [ true ] );

						// If the active item is on the top level, let it stay active.
						// Otherwise, blur the active item since it is no longer visible.
						if ( this.active && this.active.parents( ".ui-menu" ).length === 1 ) {
							clearTimeout( this.timer );
						}
					}
				}
			},
			"mouseenter .ui-menu-item": function( event ) {

				// Ignore mouse events while typeahead is active, see #10458.
				// Prevents focusing the wrong item when typeahead causes a scroll while the mouse
				// is over an item in the menu
				if ( this.previousFilter ) {
					return;
				}

				var actualTarget = $( event.target ).closest( ".ui-menu-item" ),
					target = $( event.currentTarget );

				// Ignore bubbled events on parent items, see #11641
				if ( actualTarget[ 0 ] !== target[ 0 ] ) {
					return;
				}

				// Remove ui-state-active class from siblings of the newly focused menu item
				// to avoid a jump caused by adjacent elements both having a class with a border
				this._removeClass( target.siblings().children( ".ui-state-active" ),
					null, "ui-state-active" );
				this.focus( event, target );
			},
			mouseleave: "collapseAll",
			"mouseleave .ui-menu": "collapseAll",
			focus: function( event, keepActiveItem ) {

				// If there's already an active item, keep it active
				// If not, activate the first item
				var item = this.active || this.element.find( this.options.items ).eq( 0 );

				if ( !keepActiveItem ) {
					this.focus( event, item );
				}
			},
			blur: function( event ) {
				this._delay( function() {
					var notContained = !$.contains(
						this.element[ 0 ],
						$.ui.safeActiveElement( this.document[ 0 ] )
					);
					if ( notContained ) {
						this.collapseAll( event );
					}
				} );
			},
			keydown: "_keydown"
		} );

		this.refresh();

		// Clicks outside of a menu collapse any open menus
		this._on( this.document, {
			click: function( event ) {
				if ( this._closeOnDocumentClick( event ) ) {
					this.collapseAll( event );
				}

				// Reset the mouseHandled flag
				this.mouseHandled = false;
			}
		} );
	},

	_destroy: function() {
		var items = this.element.find( ".ui-menu-item" )
				.removeAttr( "role aria-disabled" ),
			submenus = items.children( ".ui-menu-item-wrapper" )
				.removeUniqueId()
				.removeAttr( "tabIndex role aria-haspopup" );

		// Destroy (sub)menus
		this.element
			.removeAttr( "aria-activedescendant" )
			.find( ".ui-menu" ).addBack()
				.removeAttr( "role aria-labelledby aria-expanded aria-hidden aria-disabled " +
					"tabIndex" )
				.removeUniqueId()
				.show();

		submenus.children().each( function() {
			var elem = $( this );
			if ( elem.data( "ui-menu-submenu-caret" ) ) {
				elem.remove();
			}
		} );
	},

	_keydown: function( event ) {
		var match, prev, character, skip,
			preventDefault = true;

		switch ( event.keyCode ) {
		case $.ui.keyCode.PAGE_UP:
			this.previousPage( event );
			break;
		case $.ui.keyCode.PAGE_DOWN:
			this.nextPage( event );
			break;
		case $.ui.keyCode.HOME:
			this._move( "first", "first", event );
			break;
		case $.ui.keyCode.END:
			this._move( "last", "last", event );
			break;
		case $.ui.keyCode.UP:
			this.previous( event );
			break;
		case $.ui.keyCode.DOWN:
			this.next( event );
			break;
		case $.ui.keyCode.LEFT:
			this.collapse( event );
			break;
		case $.ui.keyCode.RIGHT:
			if ( this.active && !this.active.is( ".ui-state-disabled" ) ) {
				this.expand( event );
			}
			break;
		case $.ui.keyCode.ENTER:
		case $.ui.keyCode.SPACE:
			this._activate( event );
			break;
		case $.ui.keyCode.ESCAPE:
			this.collapse( event );
			break;
		default:
			preventDefault = false;
			prev = this.previousFilter || "";
			skip = false;

			// Support number pad values
			character = event.keyCode >= 96 && event.keyCode <= 105 ?
				( event.keyCode - 96 ).toString() : String.fromCharCode( event.keyCode );

			clearTimeout( this.filterTimer );

			if ( character === prev ) {
				skip = true;
			} else {
				character = prev + character;
			}

			match = this._filterMenuItems( character );
			match = skip && match.index( this.active.next() ) !== -1 ?
				this.active.nextAll( ".ui-menu-item" ) :
				match;

			// If no matches on the current filter, reset to the last character pressed
			// to move down the menu to the first item that starts with that character
			if ( !match.length ) {
				character = String.fromCharCode( event.keyCode );
				match = this._filterMenuItems( character );
			}

			if ( match.length ) {
				this.focus( event, match );
				this.previousFilter = character;
				this.filterTimer = this._delay( function() {
					delete this.previousFilter;
				}, 1000 );
			} else {
				delete this.previousFilter;
			}
		}

		if ( preventDefault ) {
			event.preventDefault();
		}
	},

	_activate: function( event ) {
		if ( this.active && !this.active.is( ".ui-state-disabled" ) ) {
			if ( this.active.children( "[aria-haspopup='true']" ).length ) {
				this.expand( event );
			} else {
				this.select( event );
			}
		}
	},

	refresh: function() {
		var menus, items, newSubmenus, newItems, newWrappers,
			that = this,
			icon = this.options.icons.submenu,
			submenus = this.element.find( this.options.menus );

		this._toggleClass( "ui-menu-icons", null, !!this.element.find( ".ui-icon" ).length );

		// Initialize nested menus
		newSubmenus = submenus.filter( ":not(.ui-menu)" )
			.hide()
			.attr( {
				role: this.options.role,
				"aria-hidden": "true",
				"aria-expanded": "false"
			} )
			.each( function() {
				var menu = $( this ),
					item = menu.prev(),
					submenuCaret = $( "<span>" ).data( "ui-menu-submenu-caret", true );

				that._addClass( submenuCaret, "ui-menu-icon", "ui-icon " + icon );
				item
					.attr( "aria-haspopup", "true" )
					.prepend( submenuCaret );
				menu.attr( "aria-labelledby", item.attr( "id" ) );
			} );

		this._addClass( newSubmenus, "ui-menu", "ui-widget ui-widget-content ui-front" );

		menus = submenus.add( this.element );
		items = menus.find( this.options.items );

		// Initialize menu-items containing spaces and/or dashes only as dividers
		items.not( ".ui-menu-item" ).each( function() {
			var item = $( this );
			if ( that._isDivider( item ) ) {
				that._addClass( item, "ui-menu-divider", "ui-widget-content" );
			}
		} );

		// Don't refresh list items that are already adapted
		newItems = items.not( ".ui-menu-item, .ui-menu-divider" );
		newWrappers = newItems.children()
			.not( ".ui-menu" )
				.uniqueId()
				.attr( {
					tabIndex: -1,
					role: this._itemRole()
				} );
		this._addClass( newItems, "ui-menu-item" )
			._addClass( newWrappers, "ui-menu-item-wrapper" );

		// Add aria-disabled attribute to any disabled menu item
		items.filter( ".ui-state-disabled" ).attr( "aria-disabled", "true" );

		// If the active item has been removed, blur the menu
		if ( this.active && !$.contains( this.element[ 0 ], this.active[ 0 ] ) ) {
			this.blur();
		}
	},

	_itemRole: function() {
		return {
			menu: "menuitem",
			listbox: "option"
		}[ this.options.role ];
	},

	_setOption: function( key, value ) {
		if ( key === "icons" ) {
			var icons = this.element.find( ".ui-menu-icon" );
			this._removeClass( icons, null, this.options.icons.submenu )
				._addClass( icons, null, value.submenu );
		}
		this._super( key, value );
	},

	_setOptionDisabled: function( value ) {
		this._super( value );

		this.element.attr( "aria-disabled", String( value ) );
		this._toggleClass( null, "ui-state-disabled", !!value );
	},

	focus: function( event, item ) {
		var nested, focused, activeParent;
		this.blur( event, event && event.type === "focus" );

		this._scrollIntoView( item );

		this.active = item.first();

		focused = this.active.children( ".ui-menu-item-wrapper" );
		this._addClass( focused, null, "ui-state-active" );

		// Only update aria-activedescendant if there's a role
		// otherwise we assume focus is managed elsewhere
		if ( this.options.role ) {
			this.element.attr( "aria-activedescendant", focused.attr( "id" ) );
		}

		// Highlight active parent menu item, if any
		activeParent = this.active
			.parent()
				.closest( ".ui-menu-item" )
					.children( ".ui-menu-item-wrapper" );
		this._addClass( activeParent, null, "ui-state-active" );

		if ( event && event.type === "keydown" ) {
			this._close();
		} else {
			this.timer = this._delay( function() {
				this._close();
			}, this.delay );
		}

		nested = item.children( ".ui-menu" );
		if ( nested.length && event && ( /^mouse/.test( event.type ) ) ) {
			this._startOpening( nested );
		}
		this.activeMenu = item.parent();

		this._trigger( "focus", event, { item: item } );
	},

	_scrollIntoView: function( item ) {
		var borderTop, paddingTop, offset, scroll, elementHeight, itemHeight;
		if ( this._hasScroll() ) {
			borderTop = parseFloat( $.css( this.activeMenu[ 0 ], "borderTopWidth" ) ) || 0;
			paddingTop = parseFloat( $.css( this.activeMenu[ 0 ], "paddingTop" ) ) || 0;
			offset = item.offset().top - this.activeMenu.offset().top - borderTop - paddingTop;
			scroll = this.activeMenu.scrollTop();
			elementHeight = this.activeMenu.height();
			itemHeight = item.outerHeight();

			if ( offset < 0 ) {
				this.activeMenu.scrollTop( scroll + offset );
			} else if ( offset + itemHeight > elementHeight ) {
				this.activeMenu.scrollTop( scroll + offset - elementHeight + itemHeight );
			}
		}
	},

	blur: function( event, fromFocus ) {
		if ( !fromFocus ) {
			clearTimeout( this.timer );
		}

		if ( !this.active ) {
			return;
		}

		this._removeClass( this.active.children( ".ui-menu-item-wrapper" ),
			null, "ui-state-active" );

		this._trigger( "blur", event, { item: this.active } );
		this.active = null;
	},

	_startOpening: function( submenu ) {
		clearTimeout( this.timer );

		// Don't open if already open fixes a Firefox bug that caused a .5 pixel
		// shift in the submenu position when mousing over the caret icon
		if ( submenu.attr( "aria-hidden" ) !== "true" ) {
			return;
		}

		this.timer = this._delay( function() {
			this._close();
			this._open( submenu );
		}, this.delay );
	},

	_open: function( submenu ) {
		var position = $.extend( {
			of: this.active
		}, this.options.position );

		clearTimeout( this.timer );
		this.element.find( ".ui-menu" ).not( submenu.parents( ".ui-menu" ) )
			.hide()
			.attr( "aria-hidden", "true" );

		submenu
			.show()
			.removeAttr( "aria-hidden" )
			.attr( "aria-expanded", "true" )
			.position( position );
	},

	collapseAll: function( event, all ) {
		clearTimeout( this.timer );
		this.timer = this._delay( function() {

			// If we were passed an event, look for the submenu that contains the event
			var currentMenu = all ? this.element :
				$( event && event.target ).closest( this.element.find( ".ui-menu" ) );

			// If we found no valid submenu ancestor, use the main menu to close all
			// sub menus anyway
			if ( !currentMenu.length ) {
				currentMenu = this.element;
			}

			this._close( currentMenu );

			this.blur( event );

			// Work around active item staying active after menu is blurred
			this._removeClass( currentMenu.find( ".ui-state-active" ), null, "ui-state-active" );

			this.activeMenu = currentMenu;
		}, this.delay );
	},

	// With no arguments, closes the currently active menu - if nothing is active
	// it closes all menus.  If passed an argument, it will search for menus BELOW
	_close: function( startMenu ) {
		if ( !startMenu ) {
			startMenu = this.active ? this.active.parent() : this.element;
		}

		startMenu.find( ".ui-menu" )
			.hide()
			.attr( "aria-hidden", "true" )
			.attr( "aria-expanded", "false" );
	},

	_closeOnDocumentClick: function( event ) {
		return !$( event.target ).closest( ".ui-menu" ).length;
	},

	_isDivider: function( item ) {

		// Match hyphen, em dash, en dash
		return !/[^\-\u2014\u2013\s]/.test( item.text() );
	},

	collapse: function( event ) {
		var newItem = this.active &&
			this.active.parent().closest( ".ui-menu-item", this.element );
		if ( newItem && newItem.length ) {
			this._close();
			this.focus( event, newItem );
		}
	},

	expand: function( event ) {
		var newItem = this.active &&
			this.active
				.children( ".ui-menu " )
					.find( this.options.items )
						.first();

		if ( newItem && newItem.length ) {
			this._open( newItem.parent() );

			// Delay so Firefox will not hide activedescendant change in expanding submenu from AT
			this._delay( function() {
				this.focus( event, newItem );
			} );
		}
	},

	next: function( event ) {
		this._move( "next", "first", event );
	},

	previous: function( event ) {
		this._move( "prev", "last", event );
	},

	isFirstItem: function() {
		return this.active && !this.active.prevAll( ".ui-menu-item" ).length;
	},

	isLastItem: function() {
		return this.active && !this.active.nextAll( ".ui-menu-item" ).length;
	},

	_move: function( direction, filter, event ) {
		var next;
		if ( this.active ) {
			if ( direction === "first" || direction === "last" ) {
				next = this.active
					[ direction === "first" ? "prevAll" : "nextAll" ]( ".ui-menu-item" )
					.eq( -1 );
			} else {
				next = this.active
					[ direction + "All" ]( ".ui-menu-item" )
					.eq( 0 );
			}
		}
		if ( !next || !next.length || !this.active ) {
			next = this.activeMenu.find( this.options.items )[ filter ]();
		}

		this.focus( event, next );
	},

	nextPage: function( event ) {
		var item, base, height;

		if ( !this.active ) {
			this.next( event );
			return;
		}
		if ( this.isLastItem() ) {
			return;
		}
		if ( this._hasScroll() ) {
			base = this.active.offset().top;
			height = this.element.height();
			this.active.nextAll( ".ui-menu-item" ).each( function() {
				item = $( this );
				return item.offset().top - base - height < 0;
			} );

			this.focus( event, item );
		} else {
			this.focus( event, this.activeMenu.find( this.options.items )
				[ !this.active ? "first" : "last" ]() );
		}
	},

	previousPage: function( event ) {
		var item, base, height;
		if ( !this.active ) {
			this.next( event );
			return;
		}
		if ( this.isFirstItem() ) {
			return;
		}
		if ( this._hasScroll() ) {
			base = this.active.offset().top;
			height = this.element.height();
			this.active.prevAll( ".ui-menu-item" ).each( function() {
				item = $( this );
				return item.offset().top - base + height > 0;
			} );

			this.focus( event, item );
		} else {
			this.focus( event, this.activeMenu.find( this.options.items ).first() );
		}
	},

	_hasScroll: function() {
		return this.element.outerHeight() < this.element.prop( "scrollHeight" );
	},

	select: function( event ) {

		// TODO: It should never be possible to not have an active item at this
		// point, but the tests don't trigger mouseenter before click.
		this.active = this.active || $( event.target ).closest( ".ui-menu-item" );
		var ui = { item: this.active };
		if ( !this.active.has( ".ui-menu" ).length ) {
			this.collapseAll( event, true );
		}
		this._trigger( "select", event, ui );
	},

	_filterMenuItems: function( character ) {
		var escapedCharacter = character.replace( /[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&" ),
			regex = new RegExp( "^" + escapedCharacter, "i" );

		return this.activeMenu
			.find( this.options.items )

				// Only match on items, not dividers or other content (#10571)
				.filter( ".ui-menu-item" )
					.filter( function() {
						return regex.test(
							$.trim( $( this ).children( ".ui-menu-item-wrapper" ).text() ) );
					} );
	}
} );


/*!
 * jQuery UI Autocomplete 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Autocomplete
//>>group: Widgets
//>>description: Lists suggested words as the user is typing.
//>>docs: http://api.jqueryui.com/autocomplete/
//>>demos: http://jqueryui.com/autocomplete/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/autocomplete.css
//>>css.theme: ../../themes/base/theme.css



$.widget( "ui.autocomplete", {
	version: "1.12.1",
	defaultElement: "<input>",
	options: {
		appendTo: null,
		autoFocus: false,
		delay: 300,
		minLength: 1,
		position: {
			my: "left top",
			at: "left bottom",
			collision: "none"
		},
		source: null,

		// Callbacks
		change: null,
		close: null,
		focus: null,
		open: null,
		response: null,
		search: null,
		select: null
	},

	requestIndex: 0,
	pending: 0,

	_create: function() {

		// Some browsers only repeat keydown events, not keypress events,
		// so we use the suppressKeyPress flag to determine if we've already
		// handled the keydown event. #7269
		// Unfortunately the code for & in keypress is the same as the up arrow,
		// so we use the suppressKeyPressRepeat flag to avoid handling keypress
		// events when we know the keydown event was used to modify the
		// search term. #7799
		var suppressKeyPress, suppressKeyPressRepeat, suppressInput,
			nodeName = this.element[ 0 ].nodeName.toLowerCase(),
			isTextarea = nodeName === "textarea",
			isInput = nodeName === "input";

		// Textareas are always multi-line
		// Inputs are always single-line, even if inside a contentEditable element
		// IE also treats inputs as contentEditable
		// All other element types are determined by whether or not they're contentEditable
		this.isMultiLine = isTextarea || !isInput && this._isContentEditable( this.element );

		this.valueMethod = this.element[ isTextarea || isInput ? "val" : "text" ];
		this.isNewMenu = true;

		this._addClass( "ui-autocomplete-input" );
		this.element.attr( "autocomplete", "off" );

		this._on( this.element, {
			keydown: function( event ) {
				if ( this.element.prop( "readOnly" ) ) {
					suppressKeyPress = true;
					suppressInput = true;
					suppressKeyPressRepeat = true;
					return;
				}

				suppressKeyPress = false;
				suppressInput = false;
				suppressKeyPressRepeat = false;
				var keyCode = $.ui.keyCode;
				switch ( event.keyCode ) {
				case keyCode.PAGE_UP:
					suppressKeyPress = true;
					this._move( "previousPage", event );
					break;
				case keyCode.PAGE_DOWN:
					suppressKeyPress = true;
					this._move( "nextPage", event );
					break;
				case keyCode.UP:
					suppressKeyPress = true;
					this._keyEvent( "previous", event );
					break;
				case keyCode.DOWN:
					suppressKeyPress = true;
					this._keyEvent( "next", event );
					break;
				case keyCode.ENTER:

					// when menu is open and has focus
					if ( this.menu.active ) {

						// #6055 - Opera still allows the keypress to occur
						// which causes forms to submit
						suppressKeyPress = true;
						event.preventDefault();
						this.menu.select( event );
					}
					break;
				case keyCode.TAB:
					if ( this.menu.active ) {
						this.menu.select( event );
					}
					break;
				case keyCode.ESCAPE:
					if ( this.menu.element.is( ":visible" ) ) {
						if ( !this.isMultiLine ) {
							this._value( this.term );
						}
						this.close( event );

						// Different browsers have different default behavior for escape
						// Single press can mean undo or clear
						// Double press in IE means clear the whole form
						event.preventDefault();
					}
					break;
				default:
					suppressKeyPressRepeat = true;

					// search timeout should be triggered before the input value is changed
					this._searchTimeout( event );
					break;
				}
			},
			keypress: function( event ) {
				if ( suppressKeyPress ) {
					suppressKeyPress = false;
					if ( !this.isMultiLine || this.menu.element.is( ":visible" ) ) {
						event.preventDefault();
					}
					return;
				}
				if ( suppressKeyPressRepeat ) {
					return;
				}

				// Replicate some key handlers to allow them to repeat in Firefox and Opera
				var keyCode = $.ui.keyCode;
				switch ( event.keyCode ) {
				case keyCode.PAGE_UP:
					this._move( "previousPage", event );
					break;
				case keyCode.PAGE_DOWN:
					this._move( "nextPage", event );
					break;
				case keyCode.UP:
					this._keyEvent( "previous", event );
					break;
				case keyCode.DOWN:
					this._keyEvent( "next", event );
					break;
				}
			},
			input: function( event ) {
				if ( suppressInput ) {
					suppressInput = false;
					event.preventDefault();
					return;
				}
				this._searchTimeout( event );
			},
			focus: function() {
				this.selectedItem = null;
				this.previous = this._value();
			},
			blur: function( event ) {
				if ( this.cancelBlur ) {
					delete this.cancelBlur;
					return;
				}

				clearTimeout( this.searching );
				this.close( event );
				this._change( event );
			}
		} );

		this._initSource();
		this.menu = $( "<ul>" )
			.appendTo( this._appendTo() )
			.menu( {

				// disable ARIA support, the live region takes care of that
				role: null
			} )
			.hide()
			.menu( "instance" );

		this._addClass( this.menu.element, "ui-autocomplete", "ui-front" );
		this._on( this.menu.element, {
			mousedown: function( event ) {

				// prevent moving focus out of the text field
				event.preventDefault();

				// IE doesn't prevent moving focus even with event.preventDefault()
				// so we set a flag to know when we should ignore the blur event
				this.cancelBlur = true;
				this._delay( function() {
					delete this.cancelBlur;

					// Support: IE 8 only
					// Right clicking a menu item or selecting text from the menu items will
					// result in focus moving out of the input. However, we've already received
					// and ignored the blur event because of the cancelBlur flag set above. So
					// we restore focus to ensure that the menu closes properly based on the user's
					// next actions.
					if ( this.element[ 0 ] !== $.ui.safeActiveElement( this.document[ 0 ] ) ) {
						this.element.trigger( "focus" );
					}
				} );
			},
			menufocus: function( event, ui ) {
				var label, item;

				// support: Firefox
				// Prevent accidental activation of menu items in Firefox (#7024 #9118)
				if ( this.isNewMenu ) {
					this.isNewMenu = false;
					if ( event.originalEvent && /^mouse/.test( event.originalEvent.type ) ) {
						this.menu.blur();

						this.document.one( "mousemove", function() {
							$( event.target ).trigger( event.originalEvent );
						} );

						return;
					}
				}

				item = ui.item.data( "ui-autocomplete-item" );
				if ( false !== this._trigger( "focus", event, { item: item } ) ) {

					// use value to match what will end up in the input, if it was a key event
					if ( event.originalEvent && /^key/.test( event.originalEvent.type ) ) {
						this._value( item.value );
					}
				}

				// Announce the value in the liveRegion
				label = ui.item.attr( "aria-label" ) || item.value;
				if ( label && $.trim( label ).length ) {
					this.liveRegion.children().hide();
					$( "<div>" ).text( label ).appendTo( this.liveRegion );
				}
			},
			menuselect: function( event, ui ) {
				var item = ui.item.data( "ui-autocomplete-item" ),
					previous = this.previous;

				// Only trigger when focus was lost (click on menu)
				if ( this.element[ 0 ] !== $.ui.safeActiveElement( this.document[ 0 ] ) ) {
					this.element.trigger( "focus" );
					this.previous = previous;

					// #6109 - IE triggers two focus events and the second
					// is asynchronous, so we need to reset the previous
					// term synchronously and asynchronously :-(
					this._delay( function() {
						this.previous = previous;
						this.selectedItem = item;
					} );
				}

				if ( false !== this._trigger( "select", event, { item: item } ) ) {
					this._value( item.value );
				}

				// reset the term after the select event
				// this allows custom select handling to work properly
				this.term = this._value();

				this.close( event );
				this.selectedItem = item;
			}
		} );

		this.liveRegion = $( "<div>", {
			role: "status",
			"aria-live": "assertive",
			"aria-relevant": "additions"
		} )
			.appendTo( this.document[ 0 ].body );

		this._addClass( this.liveRegion, null, "ui-helper-hidden-accessible" );

		// Turning off autocomplete prevents the browser from remembering the
		// value when navigating through history, so we re-enable autocomplete
		// if the page is unloaded before the widget is destroyed. #7790
		this._on( this.window, {
			beforeunload: function() {
				this.element.removeAttr( "autocomplete" );
			}
		} );
	},

	_destroy: function() {
		clearTimeout( this.searching );
		this.element.removeAttr( "autocomplete" );
		this.menu.element.remove();
		this.liveRegion.remove();
	},

	_setOption: function( key, value ) {
		this._super( key, value );
		if ( key === "source" ) {
			this._initSource();
		}
		if ( key === "appendTo" ) {
			this.menu.element.appendTo( this._appendTo() );
		}
		if ( key === "disabled" && value && this.xhr ) {
			this.xhr.abort();
		}
	},

	_isEventTargetInWidget: function( event ) {
		var menuElement = this.menu.element[ 0 ];

		return event.target === this.element[ 0 ] ||
			event.target === menuElement ||
			$.contains( menuElement, event.target );
	},

	_closeOnClickOutside: function( event ) {
		if ( !this._isEventTargetInWidget( event ) ) {
			this.close();
		}
	},

	_appendTo: function() {
		var element = this.options.appendTo;

		if ( element ) {
			element = element.jquery || element.nodeType ?
				$( element ) :
				this.document.find( element ).eq( 0 );
		}

		if ( !element || !element[ 0 ] ) {
			element = this.element.closest( ".ui-front, dialog" );
		}

		if ( !element.length ) {
			element = this.document[ 0 ].body;
		}

		return element;
	},

	_initSource: function() {
		var array, url,
			that = this;
		if ( $.isArray( this.options.source ) ) {
			array = this.options.source;
			this.source = function( request, response ) {
				response( $.ui.autocomplete.filter( array, request.term ) );
			};
		} else if ( typeof this.options.source === "string" ) {
			url = this.options.source;
			this.source = function( request, response ) {
				if ( that.xhr ) {
					that.xhr.abort();
				}
				that.xhr = $.ajax( {
					url: url,
					data: request,
					dataType: "json",
					success: function( data ) {
						response( data );
					},
					error: function() {
						response( [] );
					}
				} );
			};
		} else {
			this.source = this.options.source;
		}
	},

	_searchTimeout: function( event ) {
		clearTimeout( this.searching );
		this.searching = this._delay( function() {

			// Search if the value has changed, or if the user retypes the same value (see #7434)
			var equalValues = this.term === this._value(),
				menuVisible = this.menu.element.is( ":visible" ),
				modifierKey = event.altKey || event.ctrlKey || event.metaKey || event.shiftKey;

			if ( !equalValues || ( equalValues && !menuVisible && !modifierKey ) ) {
				this.selectedItem = null;
				this.search( null, event );
			}
		}, this.options.delay );
	},

	search: function( value, event ) {
		value = value != null ? value : this._value();

		// Always save the actual value, not the one passed as an argument
		this.term = this._value();

		if ( value.length < this.options.minLength ) {
			return this.close( event );
		}

		if ( this._trigger( "search", event ) === false ) {
			return;
		}

		return this._search( value );
	},

	_search: function( value ) {
		this.pending++;
		this._addClass( "ui-autocomplete-loading" );
		this.cancelSearch = false;

		this.source( { term: value }, this._response() );
	},

	_response: function() {
		var index = ++this.requestIndex;

		return $.proxy( function( content ) {
			if ( index === this.requestIndex ) {
				this.__response( content );
			}

			this.pending--;
			if ( !this.pending ) {
				this._removeClass( "ui-autocomplete-loading" );
			}
		}, this );
	},

	__response: function( content ) {
		if ( content ) {
			content = this._normalize( content );
		}
		this._trigger( "response", null, { content: content } );
		if ( !this.options.disabled && content && content.length && !this.cancelSearch ) {
			this._suggest( content );
			this._trigger( "open" );
		} else {

			// use ._close() instead of .close() so we don't cancel future searches
			this._close();
		}
	},

	close: function( event ) {
		this.cancelSearch = true;
		this._close( event );
	},

	_close: function( event ) {

		// Remove the handler that closes the menu on outside clicks
		this._off( this.document, "mousedown" );

		if ( this.menu.element.is( ":visible" ) ) {
			this.menu.element.hide();
			this.menu.blur();
			this.isNewMenu = true;
			this._trigger( "close", event );
		}
	},

	_change: function( event ) {
		if ( this.previous !== this._value() ) {
			this._trigger( "change", event, { item: this.selectedItem } );
		}
	},

	_normalize: function( items ) {

		// assume all items have the right format when the first item is complete
		if ( items.length && items[ 0 ].label && items[ 0 ].value ) {
			return items;
		}
		return $.map( items, function( item ) {
			if ( typeof item === "string" ) {
				return {
					label: item,
					value: item
				};
			}
			return $.extend( {}, item, {
				label: item.label || item.value,
				value: item.value || item.label
			} );
		} );
	},

	_suggest: function( items ) {
		var ul = this.menu.element.empty();
		this._renderMenu( ul, items );
		this.isNewMenu = true;
		this.menu.refresh();

		// Size and position menu
		ul.show();
		this._resizeMenu();
		ul.position( $.extend( {
			of: this.element
		}, this.options.position ) );

		if ( this.options.autoFocus ) {
			this.menu.next();
		}

		// Listen for interactions outside of the widget (#6642)
		this._on( this.document, {
			mousedown: "_closeOnClickOutside"
		} );
	},

	_resizeMenu: function() {
		var ul = this.menu.element;
		ul.outerWidth( Math.max(

			// Firefox wraps long text (possibly a rounding bug)
			// so we add 1px to avoid the wrapping (#7513)
			ul.width( "" ).outerWidth() + 1,
			this.element.outerWidth()
		) );
	},

	_renderMenu: function( ul, items ) {
		var that = this;
		$.each( items, function( index, item ) {
			that._renderItemData( ul, item );
		} );
	},

	_renderItemData: function( ul, item ) {
		return this._renderItem( ul, item ).data( "ui-autocomplete-item", item );
	},

	_renderItem: function( ul, item ) {
		return $( "<li>" )
			.append( $( "<div>" ).text( item.label ) )
			.appendTo( ul );
	},

	_move: function( direction, event ) {
		if ( !this.menu.element.is( ":visible" ) ) {
			this.search( null, event );
			return;
		}
		if ( this.menu.isFirstItem() && /^previous/.test( direction ) ||
				this.menu.isLastItem() && /^next/.test( direction ) ) {

			if ( !this.isMultiLine ) {
				this._value( this.term );
			}

			this.menu.blur();
			return;
		}
		this.menu[ direction ]( event );
	},

	widget: function() {
		return this.menu.element;
	},

	_value: function() {
		return this.valueMethod.apply( this.element, arguments );
	},

	_keyEvent: function( keyEvent, event ) {
		if ( !this.isMultiLine || this.menu.element.is( ":visible" ) ) {
			this._move( keyEvent, event );

			// Prevents moving cursor to beginning/end of the text field in some browsers
			event.preventDefault();
		}
	},

	// Support: Chrome <=50
	// We should be able to just use this.element.prop( "isContentEditable" )
	// but hidden elements always report false in Chrome.
	// https://code.google.com/p/chromium/issues/detail?id=313082
	_isContentEditable: function( element ) {
		if ( !element.length ) {
			return false;
		}

		var editable = element.prop( "contentEditable" );

		if ( editable === "inherit" ) {
		  return this._isContentEditable( element.parent() );
		}

		return editable === "true";
	}
} );

$.extend( $.ui.autocomplete, {
	escapeRegex: function( value ) {
		return value.replace( /[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&" );
	},
	filter: function( array, term ) {
		var matcher = new RegExp( $.ui.autocomplete.escapeRegex( term ), "i" );
		return $.grep( array, function( value ) {
			return matcher.test( value.label || value.value || value );
		} );
	}
} );

// Live region extension, adding a `messages` option
// NOTE: This is an experimental API. We are still investigating
// a full solution for string manipulation and internationalization.
$.widget( "ui.autocomplete", $.ui.autocomplete, {
	options: {
		messages: {
			noResults: "No search results.",
			results: function( amount ) {
				return amount + ( amount > 1 ? " results are" : " result is" ) +
					" available, use up and down arrow keys to navigate.";
			}
		}
	},

	__response: function( content ) {
		var message;
		this._superApply( arguments );
		if ( this.options.disabled || this.cancelSearch ) {
			return;
		}
		if ( content && content.length ) {
			message = this.options.messages.results( content.length );
		} else {
			message = this.options.messages.noResults;
		}
		this.liveRegion.children().hide();
		$( "<div>" ).text( message ).appendTo( this.liveRegion );
	}
} );

var widgetsAutocomplete = $.ui.autocomplete;


/*!
 * jQuery UI Controlgroup 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Controlgroup
//>>group: Widgets
//>>description: Visually groups form control widgets
//>>docs: http://api.jqueryui.com/controlgroup/
//>>demos: http://jqueryui.com/controlgroup/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/controlgroup.css
//>>css.theme: ../../themes/base/theme.css


var controlgroupCornerRegex = /ui-corner-([a-z]){2,6}/g;

var widgetsControlgroup = $.widget( "ui.controlgroup", {
	version: "1.12.1",
	defaultElement: "<div>",
	options: {
		direction: "horizontal",
		disabled: null,
		onlyVisible: true,
		items: {
			"button": "input[type=button], input[type=submit], input[type=reset], button, a",
			"controlgroupLabel": ".ui-controlgroup-label",
			"checkboxradio": "input[type='checkbox'], input[type='radio']",
			"selectmenu": "select",
			"spinner": ".ui-spinner-input"
		}
	},

	_create: function() {
		this._enhance();
	},

	// To support the enhanced option in jQuery Mobile, we isolate DOM manipulation
	_enhance: function() {
		this.element.attr( "role", "toolbar" );
		this.refresh();
	},

	_destroy: function() {
		this._callChildMethod( "destroy" );
		this.childWidgets.removeData( "ui-controlgroup-data" );
		this.element.removeAttr( "role" );
		if ( this.options.items.controlgroupLabel ) {
			this.element
				.find( this.options.items.controlgroupLabel )
				.find( ".ui-controlgroup-label-contents" )
				.contents().unwrap();
		}
	},

	_initWidgets: function() {
		var that = this,
			childWidgets = [];

		// First we iterate over each of the items options
		$.each( this.options.items, function( widget, selector ) {
			var labels;
			var options = {};

			// Make sure the widget has a selector set
			if ( !selector ) {
				return;
			}

			if ( widget === "controlgroupLabel" ) {
				labels = that.element.find( selector );
				labels.each( function() {
					var element = $( this );

					if ( element.children( ".ui-controlgroup-label-contents" ).length ) {
						return;
					}
					element.contents()
						.wrapAll( "<span class='ui-controlgroup-label-contents'></span>" );
				} );
				that._addClass( labels, null, "ui-widget ui-widget-content ui-state-default" );
				childWidgets = childWidgets.concat( labels.get() );
				return;
			}

			// Make sure the widget actually exists
			if ( !$.fn[ widget ] ) {
				return;
			}

			// We assume everything is in the middle to start because we can't determine
			// first / last elements until all enhancments are done.
			if ( that[ "_" + widget + "Options" ] ) {
				options = that[ "_" + widget + "Options" ]( "middle" );
			} else {
				options = { classes: {} };
			}

			// Find instances of this widget inside controlgroup and init them
			that.element
				.find( selector )
				.each( function() {
					var element = $( this );
					var instance = element[ widget ]( "instance" );

					// We need to clone the default options for this type of widget to avoid
					// polluting the variable options which has a wider scope than a single widget.
					var instanceOptions = $.widget.extend( {}, options );

					// If the button is the child of a spinner ignore it
					// TODO: Find a more generic solution
					if ( widget === "button" && element.parent( ".ui-spinner" ).length ) {
						return;
					}

					// Create the widget if it doesn't exist
					if ( !instance ) {
						instance = element[ widget ]()[ widget ]( "instance" );
					}
					if ( instance ) {
						instanceOptions.classes =
							that._resolveClassesValues( instanceOptions.classes, instance );
					}
					element[ widget ]( instanceOptions );

					// Store an instance of the controlgroup to be able to reference
					// from the outermost element for changing options and refresh
					var widgetElement = element[ widget ]( "widget" );
					$.data( widgetElement[ 0 ], "ui-controlgroup-data",
						instance ? instance : element[ widget ]( "instance" ) );

					childWidgets.push( widgetElement[ 0 ] );
				} );
		} );

		this.childWidgets = $( $.unique( childWidgets ) );
		this._addClass( this.childWidgets, "ui-controlgroup-item" );
	},

	_callChildMethod: function( method ) {
		this.childWidgets.each( function() {
			var element = $( this ),
				data = element.data( "ui-controlgroup-data" );
			if ( data && data[ method ] ) {
				data[ method ]();
			}
		} );
	},

	_updateCornerClass: function( element, position ) {
		var remove = "ui-corner-top ui-corner-bottom ui-corner-left ui-corner-right ui-corner-all";
		var add = this._buildSimpleOptions( position, "label" ).classes.label;

		this._removeClass( element, null, remove );
		this._addClass( element, null, add );
	},

	_buildSimpleOptions: function( position, key ) {
		var direction = this.options.direction === "vertical";
		var result = {
			classes: {}
		};
		result.classes[ key ] = {
			"middle": "",
			"first": "ui-corner-" + ( direction ? "top" : "left" ),
			"last": "ui-corner-" + ( direction ? "bottom" : "right" ),
			"only": "ui-corner-all"
		}[ position ];

		return result;
	},

	_spinnerOptions: function( position ) {
		var options = this._buildSimpleOptions( position, "ui-spinner" );

		options.classes[ "ui-spinner-up" ] = "";
		options.classes[ "ui-spinner-down" ] = "";

		return options;
	},

	_buttonOptions: function( position ) {
		return this._buildSimpleOptions( position, "ui-button" );
	},

	_checkboxradioOptions: function( position ) {
		return this._buildSimpleOptions( position, "ui-checkboxradio-label" );
	},

	_selectmenuOptions: function( position ) {
		var direction = this.options.direction === "vertical";
		return {
			width: direction ? "auto" : false,
			classes: {
				middle: {
					"ui-selectmenu-button-open": "",
					"ui-selectmenu-button-closed": ""
				},
				first: {
					"ui-selectmenu-button-open": "ui-corner-" + ( direction ? "top" : "tl" ),
					"ui-selectmenu-button-closed": "ui-corner-" + ( direction ? "top" : "left" )
				},
				last: {
					"ui-selectmenu-button-open": direction ? "" : "ui-corner-tr",
					"ui-selectmenu-button-closed": "ui-corner-" + ( direction ? "bottom" : "right" )
				},
				only: {
					"ui-selectmenu-button-open": "ui-corner-top",
					"ui-selectmenu-button-closed": "ui-corner-all"
				}

			}[ position ]
		};
	},

	_resolveClassesValues: function( classes, instance ) {
		var result = {};
		$.each( classes, function( key ) {
			var current = instance.options.classes[ key ] || "";
			current = $.trim( current.replace( controlgroupCornerRegex, "" ) );
			result[ key ] = ( current + " " + classes[ key ] ).replace( /\s+/g, " " );
		} );
		return result;
	},

	_setOption: function( key, value ) {
		if ( key === "direction" ) {
			this._removeClass( "ui-controlgroup-" + this.options.direction );
		}

		this._super( key, value );
		if ( key === "disabled" ) {
			this._callChildMethod( value ? "disable" : "enable" );
			return;
		}

		this.refresh();
	},

	refresh: function() {
		var children,
			that = this;

		this._addClass( "ui-controlgroup ui-controlgroup-" + this.options.direction );

		if ( this.options.direction === "horizontal" ) {
			this._addClass( null, "ui-helper-clearfix" );
		}
		this._initWidgets();

		children = this.childWidgets;

		// We filter here because we need to track all childWidgets not just the visible ones
		if ( this.options.onlyVisible ) {
			children = children.filter( ":visible" );
		}

		if ( children.length ) {

			// We do this last because we need to make sure all enhancment is done
			// before determining first and last
			$.each( [ "first", "last" ], function( index, value ) {
				var instance = children[ value ]().data( "ui-controlgroup-data" );

				if ( instance && that[ "_" + instance.widgetName + "Options" ] ) {
					var options = that[ "_" + instance.widgetName + "Options" ](
						children.length === 1 ? "only" : value
					);
					options.classes = that._resolveClassesValues( options.classes, instance );
					instance.element[ instance.widgetName ]( options );
				} else {
					that._updateCornerClass( children[ value ](), value );
				}
			} );

			// Finally call the refresh method on each of the child widgets.
			this._callChildMethod( "refresh" );
		}
	}
} );

/*!
 * jQuery UI Checkboxradio 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Checkboxradio
//>>group: Widgets
//>>description: Enhances a form with multiple themeable checkboxes or radio buttons.
//>>docs: http://api.jqueryui.com/checkboxradio/
//>>demos: http://jqueryui.com/checkboxradio/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/button.css
//>>css.structure: ../../themes/base/checkboxradio.css
//>>css.theme: ../../themes/base/theme.css



$.widget( "ui.checkboxradio", [ $.ui.formResetMixin, {
	version: "1.12.1",
	options: {
		disabled: null,
		label: null,
		icon: true,
		classes: {
			"ui-checkboxradio-label": "ui-corner-all",
			"ui-checkboxradio-icon": "ui-corner-all"
		}
	},

	_getCreateOptions: function() {
		var disabled, labels;
		var that = this;
		var options = this._super() || {};

		// We read the type here, because it makes more sense to throw a element type error first,
		// rather then the error for lack of a label. Often if its the wrong type, it
		// won't have a label (e.g. calling on a div, btn, etc)
		this._readType();

		labels = this.element.labels();

		// If there are multiple labels, use the last one
		this.label = $( labels[ labels.length - 1 ] );
		if ( !this.label.length ) {
			$.error( "No label found for checkboxradio widget" );
		}

		this.originalLabel = "";

		// We need to get the label text but this may also need to make sure it does not contain the
		// input itself.
		this.label.contents().not( this.element[ 0 ] ).each( function() {

			// The label contents could be text, html, or a mix. We concat each element to get a
			// string representation of the label, without the input as part of it.
			that.originalLabel += this.nodeType === 3 ? $( this ).text() : this.outerHTML;
		} );

		// Set the label option if we found label text
		if ( this.originalLabel ) {
			options.label = this.originalLabel;
		}

		disabled = this.element[ 0 ].disabled;
		if ( disabled != null ) {
			options.disabled = disabled;
		}
		return options;
	},

	_create: function() {
		var checked = this.element[ 0 ].checked;

		this._bindFormResetHandler();

		if ( this.options.disabled == null ) {
			this.options.disabled = this.element[ 0 ].disabled;
		}

		this._setOption( "disabled", this.options.disabled );
		this._addClass( "ui-checkboxradio", "ui-helper-hidden-accessible" );
		this._addClass( this.label, "ui-checkboxradio-label", "ui-button ui-widget" );

		if ( this.type === "radio" ) {
			this._addClass( this.label, "ui-checkboxradio-radio-label" );
		}

		if ( this.options.label && this.options.label !== this.originalLabel ) {
			this._updateLabel();
		} else if ( this.originalLabel ) {
			this.options.label = this.originalLabel;
		}

		this._enhance();

		if ( checked ) {
			this._addClass( this.label, "ui-checkboxradio-checked", "ui-state-active" );
			if ( this.icon ) {
				this._addClass( this.icon, null, "ui-state-hover" );
			}
		}

		this._on( {
			change: "_toggleClasses",
			focus: function() {
				this._addClass( this.label, null, "ui-state-focus ui-visual-focus" );
			},
			blur: function() {
				this._removeClass( this.label, null, "ui-state-focus ui-visual-focus" );
			}
		} );
	},

	_readType: function() {
		var nodeName = this.element[ 0 ].nodeName.toLowerCase();
		this.type = this.element[ 0 ].type;
		if ( nodeName !== "input" || !/radio|checkbox/.test( this.type ) ) {
			$.error( "Can't create checkboxradio on element.nodeName=" + nodeName +
				" and element.type=" + this.type );
		}
	},

	// Support jQuery Mobile enhanced option
	_enhance: function() {
		this._updateIcon( this.element[ 0 ].checked );
	},

	widget: function() {
		return this.label;
	},

	_getRadioGroup: function() {
		var group;
		var name = this.element[ 0 ].name;
		var nameSelector = "input[name='" + $.ui.escapeSelector( name ) + "']";

		if ( !name ) {
			return $( [] );
		}

		if ( this.form.length ) {
			group = $( this.form[ 0 ].elements ).filter( nameSelector );
		} else {

			// Not inside a form, check all inputs that also are not inside a form
			group = $( nameSelector ).filter( function() {
				return $( this ).form().length === 0;
			} );
		}

		return group.not( this.element );
	},

	_toggleClasses: function() {
		var checked = this.element[ 0 ].checked;
		this._toggleClass( this.label, "ui-checkboxradio-checked", "ui-state-active", checked );

		if ( this.options.icon && this.type === "checkbox" ) {
			this._toggleClass( this.icon, null, "ui-icon-check ui-state-checked", checked )
				._toggleClass( this.icon, null, "ui-icon-blank", !checked );
		}

		if ( this.type === "radio" ) {
			this._getRadioGroup()
				.each( function() {
					var instance = $( this ).checkboxradio( "instance" );

					if ( instance ) {
						instance._removeClass( instance.label,
							"ui-checkboxradio-checked", "ui-state-active" );
					}
				} );
		}
	},

	_destroy: function() {
		this._unbindFormResetHandler();

		if ( this.icon ) {
			this.icon.remove();
			this.iconSpace.remove();
		}
	},

	_setOption: function( key, value ) {

		// We don't allow the value to be set to nothing
		if ( key === "label" && !value ) {
			return;
		}

		this._super( key, value );

		if ( key === "disabled" ) {
			this._toggleClass( this.label, null, "ui-state-disabled", value );
			this.element[ 0 ].disabled = value;

			// Don't refresh when setting disabled
			return;
		}
		this.refresh();
	},

	_updateIcon: function( checked ) {
		var toAdd = "ui-icon ui-icon-background ";

		if ( this.options.icon ) {
			if ( !this.icon ) {
				this.icon = $( "<span>" );
				this.iconSpace = $( "<span> </span>" );
				this._addClass( this.iconSpace, "ui-checkboxradio-icon-space" );
			}

			if ( this.type === "checkbox" ) {
				toAdd += checked ? "ui-icon-check ui-state-checked" : "ui-icon-blank";
				this._removeClass( this.icon, null, checked ? "ui-icon-blank" : "ui-icon-check" );
			} else {
				toAdd += "ui-icon-blank";
			}
			this._addClass( this.icon, "ui-checkboxradio-icon", toAdd );
			if ( !checked ) {
				this._removeClass( this.icon, null, "ui-icon-check ui-state-checked" );
			}
			this.icon.prependTo( this.label ).after( this.iconSpace );
		} else if ( this.icon !== undefined ) {
			this.icon.remove();
			this.iconSpace.remove();
			delete this.icon;
		}
	},

	_updateLabel: function() {

		// Remove the contents of the label ( minus the icon, icon space, and input )
		var contents = this.label.contents().not( this.element[ 0 ] );
		if ( this.icon ) {
			contents = contents.not( this.icon[ 0 ] );
		}
		if ( this.iconSpace ) {
			contents = contents.not( this.iconSpace[ 0 ] );
		}
		contents.remove();

		this.label.append( this.options.label );
	},

	refresh: function() {
		var checked = this.element[ 0 ].checked,
			isDisabled = this.element[ 0 ].disabled;

		this._updateIcon( checked );
		this._toggleClass( this.label, "ui-checkboxradio-checked", "ui-state-active", checked );
		if ( this.options.label !== null ) {
			this._updateLabel();
		}

		if ( isDisabled !== this.options.disabled ) {
			this._setOptions( { "disabled": isDisabled } );
		}
	}

} ] );

var widgetsCheckboxradio = $.ui.checkboxradio;


/*!
 * jQuery UI Button 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Button
//>>group: Widgets
//>>description: Enhances a form with themeable buttons.
//>>docs: http://api.jqueryui.com/button/
//>>demos: http://jqueryui.com/button/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/button.css
//>>css.theme: ../../themes/base/theme.css



$.widget( "ui.button", {
	version: "1.12.1",
	defaultElement: "<button>",
	options: {
		classes: {
			"ui-button": "ui-corner-all"
		},
		disabled: null,
		icon: null,
		iconPosition: "beginning",
		label: null,
		showLabel: true
	},

	_getCreateOptions: function() {
		var disabled,

			// This is to support cases like in jQuery Mobile where the base widget does have
			// an implementation of _getCreateOptions
			options = this._super() || {};

		this.isInput = this.element.is( "input" );

		disabled = this.element[ 0 ].disabled;
		if ( disabled != null ) {
			options.disabled = disabled;
		}

		this.originalLabel = this.isInput ? this.element.val() : this.element.html();
		if ( this.originalLabel ) {
			options.label = this.originalLabel;
		}

		return options;
	},

	_create: function() {
		if ( !this.option.showLabel & !this.options.icon ) {
			this.options.showLabel = true;
		}

		// We have to check the option again here even though we did in _getCreateOptions,
		// because null may have been passed on init which would override what was set in
		// _getCreateOptions
		if ( this.options.disabled == null ) {
			this.options.disabled = this.element[ 0 ].disabled || false;
		}

		this.hasTitle = !!this.element.attr( "title" );

		// Check to see if the label needs to be set or if its already correct
		if ( this.options.label && this.options.label !== this.originalLabel ) {
			if ( this.isInput ) {
				this.element.val( this.options.label );
			} else {
				this.element.html( this.options.label );
			}
		}
		this._addClass( "ui-button", "ui-widget" );
		this._setOption( "disabled", this.options.disabled );
		this._enhance();

		if ( this.element.is( "a" ) ) {
			this._on( {
				"keyup": function( event ) {
					if ( event.keyCode === $.ui.keyCode.SPACE ) {
						event.preventDefault();

						// Support: PhantomJS <= 1.9, IE 8 Only
						// If a native click is available use it so we actually cause navigation
						// otherwise just trigger a click event
						if ( this.element[ 0 ].click ) {
							this.element[ 0 ].click();
						} else {
							this.element.trigger( "click" );
						}
					}
				}
			} );
		}
	},

	_enhance: function() {
		if ( !this.element.is( "button" ) ) {
			this.element.attr( "role", "button" );
		}

		if ( this.options.icon ) {
			this._updateIcon( "icon", this.options.icon );
			this._updateTooltip();
		}
	},

	_updateTooltip: function() {
		this.title = this.element.attr( "title" );

		if ( !this.options.showLabel && !this.title ) {
			this.element.attr( "title", this.options.label );
		}
	},

	_updateIcon: function( option, value ) {
		var icon = option !== "iconPosition",
			position = icon ? this.options.iconPosition : value,
			displayBlock = position === "top" || position === "bottom";

		// Create icon
		if ( !this.icon ) {
			this.icon = $( "<span>" );

			this._addClass( this.icon, "ui-button-icon", "ui-icon" );

			if ( !this.options.showLabel ) {
				this._addClass( "ui-button-icon-only" );
			}
		} else if ( icon ) {

			// If we are updating the icon remove the old icon class
			this._removeClass( this.icon, null, this.options.icon );
		}

		// If we are updating the icon add the new icon class
		if ( icon ) {
			this._addClass( this.icon, null, value );
		}

		this._attachIcon( position );

		// If the icon is on top or bottom we need to add the ui-widget-icon-block class and remove
		// the iconSpace if there is one.
		if ( displayBlock ) {
			this._addClass( this.icon, null, "ui-widget-icon-block" );
			if ( this.iconSpace ) {
				this.iconSpace.remove();
			}
		} else {

			// Position is beginning or end so remove the ui-widget-icon-block class and add the
			// space if it does not exist
			if ( !this.iconSpace ) {
				this.iconSpace = $( "<span> </span>" );
				this._addClass( this.iconSpace, "ui-button-icon-space" );
			}
			this._removeClass( this.icon, null, "ui-wiget-icon-block" );
			this._attachIconSpace( position );
		}
	},

	_destroy: function() {
		this.element.removeAttr( "role" );

		if ( this.icon ) {
			this.icon.remove();
		}
		if ( this.iconSpace ) {
			this.iconSpace.remove();
		}
		if ( !this.hasTitle ) {
			this.element.removeAttr( "title" );
		}
	},

	_attachIconSpace: function( iconPosition ) {
		this.icon[ /^(?:end|bottom)/.test( iconPosition ) ? "before" : "after" ]( this.iconSpace );
	},

	_attachIcon: function( iconPosition ) {
		this.element[ /^(?:end|bottom)/.test( iconPosition ) ? "append" : "prepend" ]( this.icon );
	},

	_setOptions: function( options ) {
		var newShowLabel = options.showLabel === undefined ?
				this.options.showLabel :
				options.showLabel,
			newIcon = options.icon === undefined ? this.options.icon : options.icon;

		if ( !newShowLabel && !newIcon ) {
			options.showLabel = true;
		}
		this._super( options );
	},

	_setOption: function( key, value ) {
		if ( key === "icon" ) {
			if ( value ) {
				this._updateIcon( key, value );
			} else if ( this.icon ) {
				this.icon.remove();
				if ( this.iconSpace ) {
					this.iconSpace.remove();
				}
			}
		}

		if ( key === "iconPosition" ) {
			this._updateIcon( key, value );
		}

		// Make sure we can't end up with a button that has neither text nor icon
		if ( key === "showLabel" ) {
				this._toggleClass( "ui-button-icon-only", null, !value );
				this._updateTooltip();
		}

		if ( key === "label" ) {
			if ( this.isInput ) {
				this.element.val( value );
			} else {

				// If there is an icon, append it, else nothing then append the value
				// this avoids removal of the icon when setting label text
				this.element.html( value );
				if ( this.icon ) {
					this._attachIcon( this.options.iconPosition );
					this._attachIconSpace( this.options.iconPosition );
				}
			}
		}

		this._super( key, value );

		if ( key === "disabled" ) {
			this._toggleClass( null, "ui-state-disabled", value );
			this.element[ 0 ].disabled = value;
			if ( value ) {
				this.element.blur();
			}
		}
	},

	refresh: function() {

		// Make sure to only check disabled if its an element that supports this otherwise
		// check for the disabled class to determine state
		var isDisabled = this.element.is( "input, button" ) ?
			this.element[ 0 ].disabled : this.element.hasClass( "ui-button-disabled" );

		if ( isDisabled !== this.options.disabled ) {
			this._setOptions( { disabled: isDisabled } );
		}

		this._updateTooltip();
	}
} );

// DEPRECATED
if ( $.uiBackCompat !== false ) {

	// Text and Icons options
	$.widget( "ui.button", $.ui.button, {
		options: {
			text: true,
			icons: {
				primary: null,
				secondary: null
			}
		},

		_create: function() {
			if ( this.options.showLabel && !this.options.text ) {
				this.options.showLabel = this.options.text;
			}
			if ( !this.options.showLabel && this.options.text ) {
				this.options.text = this.options.showLabel;
			}
			if ( !this.options.icon && ( this.options.icons.primary ||
					this.options.icons.secondary ) ) {
				if ( this.options.icons.primary ) {
					this.options.icon = this.options.icons.primary;
				} else {
					this.options.icon = this.options.icons.secondary;
					this.options.iconPosition = "end";
				}
			} else if ( this.options.icon ) {
				this.options.icons.primary = this.options.icon;
			}
			this._super();
		},

		_setOption: function( key, value ) {
			if ( key === "text" ) {
				this._super( "showLabel", value );
				return;
			}
			if ( key === "showLabel" ) {
				this.options.text = value;
			}
			if ( key === "icon" ) {
				this.options.icons.primary = value;
			}
			if ( key === "icons" ) {
				if ( value.primary ) {
					this._super( "icon", value.primary );
					this._super( "iconPosition", "beginning" );
				} else if ( value.secondary ) {
					this._super( "icon", value.secondary );
					this._super( "iconPosition", "end" );
				}
			}
			this._superApply( arguments );
		}
	} );

	$.fn.button = ( function( orig ) {
		return function() {
			if ( !this.length || ( this.length && this[ 0 ].tagName !== "INPUT" ) ||
					( this.length && this[ 0 ].tagName === "INPUT" && (
						this.attr( "type" ) !== "checkbox" && this.attr( "type" ) !== "radio"
					) ) ) {
				return orig.apply( this, arguments );
			}
			if ( !$.ui.checkboxradio ) {
				$.error( "Checkboxradio widget missing" );
			}
			if ( arguments.length === 0 ) {
				return this.checkboxradio( {
					"icon": false
				} );
			}
			return this.checkboxradio.apply( this, arguments );
		};
	} )( $.fn.button );

	$.fn.buttonset = function() {
		if ( !$.ui.controlgroup ) {
			$.error( "Controlgroup widget missing" );
		}
		if ( arguments[ 0 ] === "option" && arguments[ 1 ] === "items" && arguments[ 2 ] ) {
			return this.controlgroup.apply( this,
				[ arguments[ 0 ], "items.button", arguments[ 2 ] ] );
		}
		if ( arguments[ 0 ] === "option" && arguments[ 1 ] === "items" ) {
			return this.controlgroup.apply( this, [ arguments[ 0 ], "items.button" ] );
		}
		if ( typeof arguments[ 0 ] === "object" && arguments[ 0 ].items ) {
			arguments[ 0 ].items = {
				button: arguments[ 0 ].items
			};
		}
		return this.controlgroup.apply( this, arguments );
	};
}

var widgetsButton = $.ui.button;


// jscs:disable maximumLineLength
/* jscs:disable requireCamelCaseOrUpperCaseIdentifiers */
/*!
 * jQuery UI Datepicker 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Datepicker
//>>group: Widgets
//>>description: Displays a calendar from an input or inline for selecting dates.
//>>docs: http://api.jqueryui.com/datepicker/
//>>demos: http://jqueryui.com/datepicker/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/datepicker.css
//>>css.theme: ../../themes/base/theme.css



$.extend( $.ui, { datepicker: { version: "1.12.1" } } );

var datepicker_instActive;

function datepicker_getZindex( elem ) {
	var position, value;
	while ( elem.length && elem[ 0 ] !== document ) {

		// Ignore z-index if position is set to a value where z-index is ignored by the browser
		// This makes behavior of this function consistent across browsers
		// WebKit always returns auto if the element is positioned
		position = elem.css( "position" );
		if ( position === "absolute" || position === "relative" || position === "fixed" ) {

			// IE returns 0 when zIndex is not specified
			// other browsers return a string
			// we ignore the case of nested elements with an explicit value of 0
			// <div style="z-index: -10;"><div style="z-index: 0;"></div></div>
			value = parseInt( elem.css( "zIndex" ), 10 );
			if ( !isNaN( value ) && value !== 0 ) {
				return value;
			}
		}
		elem = elem.parent();
	}

	return 0;
}
/* Date picker manager.
   Use the singleton instance of this class, $.datepicker, to interact with the date picker.
   Settings for (groups of) date pickers are maintained in an instance object,
   allowing multiple different settings on the same page. */

function Datepicker() {
	this._curInst = null; // The current instance in use
	this._keyEvent = false; // If the last event was a key event
	this._disabledInputs = []; // List of date picker inputs that have been disabled
	this._datepickerShowing = false; // True if the popup picker is showing , false if not
	this._inDialog = false; // True if showing within a "dialog", false if not
	this._mainDivId = "ui-datepicker-div"; // The ID of the main datepicker division
	this._inlineClass = "ui-datepicker-inline"; // The name of the inline marker class
	this._appendClass = "ui-datepicker-append"; // The name of the append marker class
	this._triggerClass = "ui-datepicker-trigger"; // The name of the trigger marker class
	this._dialogClass = "ui-datepicker-dialog"; // The name of the dialog marker class
	this._disableClass = "ui-datepicker-disabled"; // The name of the disabled covering marker class
	this._unselectableClass = "ui-datepicker-unselectable"; // The name of the unselectable cell marker class
	this._currentClass = "ui-datepicker-current-day"; // The name of the current day marker class
	this._dayOverClass = "ui-datepicker-days-cell-over"; // The name of the day hover marker class
	this.regional = []; // Available regional settings, indexed by language code
	this.regional[ "" ] = { // Default regional settings
		closeText: "Done", // Display text for close link
		prevText: "Prev", // Display text for previous month link
		nextText: "Next", // Display text for next month link
		currentText: "Today", // Display text for current month link
		monthNames: [ "January","February","March","April","May","June",
			"July","August","September","October","November","December" ], // Names of months for drop-down and formatting
		monthNamesShort: [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ], // For formatting
		dayNames: [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ], // For formatting
		dayNamesShort: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ], // For formatting
		dayNamesMin: [ "Su","Mo","Tu","We","Th","Fr","Sa" ], // Column headings for days starting at Sunday
		weekHeader: "Wk", // Column header for week of the year
		dateFormat: "mm/dd/yy", // See format options on parseDate
		firstDay: 0, // The first day of the week, Sun = 0, Mon = 1, ...
		isRTL: false, // True if right-to-left language, false if left-to-right
		showMonthAfterYear: false, // True if the year select precedes month, false for month then year
		yearSuffix: "" // Additional text to append to the year in the month headers
	};
	this._defaults = { // Global defaults for all the date picker instances
		showOn: "focus", // "focus" for popup on focus,
			// "button" for trigger button, or "both" for either
		showAnim: "fadeIn", // Name of jQuery animation for popup
		showOptions: {}, // Options for enhanced animations
		defaultDate: null, // Used when field is blank: actual date,
			// +/-number for offset from today, null for today
		appendText: "", // Display text following the input box, e.g. showing the format
		buttonText: "...", // Text for trigger button
		buttonImage: "", // URL for trigger button image
		buttonImageOnly: false, // True if the image appears alone, false if it appears on a button
		hideIfNoPrevNext: false, // True to hide next/previous month links
			// if not applicable, false to just disable them
		navigationAsDateFormat: false, // True if date formatting applied to prev/today/next links
		gotoCurrent: false, // True if today link goes back to current selection instead
		changeMonth: false, // True if month can be selected directly, false if only prev/next
		changeYear: false, // True if year can be selected directly, false if only prev/next
		yearRange: "c-10:c+10", // Range of years to display in drop-down,
			// either relative to today's year (-nn:+nn), relative to currently displayed year
			// (c-nn:c+nn), absolute (nnnn:nnnn), or a combination of the above (nnnn:-n)
		showOtherMonths: false, // True to show dates in other months, false to leave blank
		selectOtherMonths: false, // True to allow selection of dates in other months, false for unselectable
		showWeek: false, // True to show week of the year, false to not show it
		calculateWeek: this.iso8601Week, // How to calculate the week of the year,
			// takes a Date and returns the number of the week for it
		shortYearCutoff: "+10", // Short year values < this are in the current century,
			// > this are in the previous century,
			// string value starting with "+" for current year + value
		minDate: null, // The earliest selectable date, or null for no limit
		maxDate: null, // The latest selectable date, or null for no limit
		duration: "fast", // Duration of display/closure
		beforeShowDay: null, // Function that takes a date and returns an array with
			// [0] = true if selectable, false if not, [1] = custom CSS class name(s) or "",
			// [2] = cell title (optional), e.g. $.datepicker.noWeekends
		beforeShow: null, // Function that takes an input field and
			// returns a set of custom settings for the date picker
		onSelect: null, // Define a callback function when a date is selected
		onChangeMonthYear: null, // Define a callback function when the month or year is changed
		onClose: null, // Define a callback function when the datepicker is closed
		numberOfMonths: 1, // Number of months to show at a time
		showCurrentAtPos: 0, // The position in multipe months at which to show the current month (starting at 0)
		stepMonths: 1, // Number of months to step back/forward
		stepBigMonths: 12, // Number of months to step back/forward for the big links
		altField: "", // Selector for an alternate field to store selected dates into
		altFormat: "", // The date format to use for the alternate field
		constrainInput: true, // The input is constrained by the current date format
		showButtonPanel: false, // True to show button panel, false to not show it
		autoSize: false, // True to size the input for the date format, false to leave as is
		disabled: false // The initial disabled state
	};
	$.extend( this._defaults, this.regional[ "" ] );
	this.regional.en = $.extend( true, {}, this.regional[ "" ] );
	this.regional[ "en-US" ] = $.extend( true, {}, this.regional.en );
	this.dpDiv = datepicker_bindHover( $( "<div id='" + this._mainDivId + "' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>" ) );
}

$.extend( Datepicker.prototype, {
	/* Class name added to elements to indicate already configured with a date picker. */
	markerClassName: "hasDatepicker",

	//Keep track of the maximum number of rows displayed (see #7043)
	maxRows: 4,

	// TODO rename to "widget" when switching to widget factory
	_widgetDatepicker: function() {
		return this.dpDiv;
	},

	/* Override the default settings for all instances of the date picker.
	 * @param  settings  object - the new settings to use as defaults (anonymous object)
	 * @return the manager object
	 */
	setDefaults: function( settings ) {
		datepicker_extendRemove( this._defaults, settings || {} );
		return this;
	},

	/* Attach the date picker to a jQuery selection.
	 * @param  target	element - the target input field or division or span
	 * @param  settings  object - the new settings to use for this date picker instance (anonymous)
	 */
	_attachDatepicker: function( target, settings ) {
		var nodeName, inline, inst;
		nodeName = target.nodeName.toLowerCase();
		inline = ( nodeName === "div" || nodeName === "span" );
		if ( !target.id ) {
			this.uuid += 1;
			target.id = "dp" + this.uuid;
		}
		inst = this._newInst( $( target ), inline );
		inst.settings = $.extend( {}, settings || {} );
		if ( nodeName === "input" ) {
			this._connectDatepicker( target, inst );
		} else if ( inline ) {
			this._inlineDatepicker( target, inst );
		}
	},

	/* Create a new instance object. */
	_newInst: function( target, inline ) {
		var id = target[ 0 ].id.replace( /([^A-Za-z0-9_\-])/g, "\\\\$1" ); // escape jQuery meta chars
		return { id: id, input: target, // associated target
			selectedDay: 0, selectedMonth: 0, selectedYear: 0, // current selection
			drawMonth: 0, drawYear: 0, // month being drawn
			inline: inline, // is datepicker inline or not
			dpDiv: ( !inline ? this.dpDiv : // presentation div
			datepicker_bindHover( $( "<div class='" + this._inlineClass + " ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>" ) ) ) };
	},

	/* Attach the date picker to an input field. */
	_connectDatepicker: function( target, inst ) {
		var input = $( target );
		inst.append = $( [] );
		inst.trigger = $( [] );
		if ( input.hasClass( this.markerClassName ) ) {
			return;
		}
		this._attachments( input, inst );
		input.addClass( this.markerClassName ).on( "keydown", this._doKeyDown ).
			on( "keypress", this._doKeyPress ).on( "keyup", this._doKeyUp );
		this._autoSize( inst );
		$.data( target, "datepicker", inst );

		//If disabled option is true, disable the datepicker once it has been attached to the input (see ticket #5665)
		if ( inst.settings.disabled ) {
			this._disableDatepicker( target );
		}
	},

	/* Make attachments based on settings. */
	_attachments: function( input, inst ) {
		var showOn, buttonText, buttonImage,
			appendText = this._get( inst, "appendText" ),
			isRTL = this._get( inst, "isRTL" );

		if ( inst.append ) {
			inst.append.remove();
		}
		if ( appendText ) {
			inst.append = $( "<span class='" + this._appendClass + "'>" + appendText + "</span>" );
			input[ isRTL ? "before" : "after" ]( inst.append );
		}

		input.off( "focus", this._showDatepicker );

		if ( inst.trigger ) {
			inst.trigger.remove();
		}

		showOn = this._get( inst, "showOn" );
		if ( showOn === "focus" || showOn === "both" ) { // pop-up date picker when in the marked field
			input.on( "focus", this._showDatepicker );
		}
		if ( showOn === "button" || showOn === "both" ) { // pop-up date picker when button clicked
			buttonText = this._get( inst, "buttonText" );
			buttonImage = this._get( inst, "buttonImage" );
			inst.trigger = $( this._get( inst, "buttonImageOnly" ) ?
				$( "<img/>" ).addClass( this._triggerClass ).
					attr( { src: buttonImage, alt: buttonText, title: buttonText } ) :
				$( "<button type='button'></button>" ).addClass( this._triggerClass ).
					html( !buttonImage ? buttonText : $( "<img/>" ).attr(
					{ src:buttonImage, alt:buttonText, title:buttonText } ) ) );
			input[ isRTL ? "before" : "after" ]( inst.trigger );
			inst.trigger.on( "click", function() {
				if ( $.datepicker._datepickerShowing && $.datepicker._lastInput === input[ 0 ] ) {
					$.datepicker._hideDatepicker();
				} else if ( $.datepicker._datepickerShowing && $.datepicker._lastInput !== input[ 0 ] ) {
					$.datepicker._hideDatepicker();
					$.datepicker._showDatepicker( input[ 0 ] );
				} else {
					$.datepicker._showDatepicker( input[ 0 ] );
				}
				return false;
			} );
		}
	},

	/* Apply the maximum length for the date format. */
	_autoSize: function( inst ) {
		if ( this._get( inst, "autoSize" ) && !inst.inline ) {
			var findMax, max, maxI, i,
				date = new Date( 2009, 12 - 1, 20 ), // Ensure double digits
				dateFormat = this._get( inst, "dateFormat" );

			if ( dateFormat.match( /[DM]/ ) ) {
				findMax = function( names ) {
					max = 0;
					maxI = 0;
					for ( i = 0; i < names.length; i++ ) {
						if ( names[ i ].length > max ) {
							max = names[ i ].length;
							maxI = i;
						}
					}
					return maxI;
				};
				date.setMonth( findMax( this._get( inst, ( dateFormat.match( /MM/ ) ?
					"monthNames" : "monthNamesShort" ) ) ) );
				date.setDate( findMax( this._get( inst, ( dateFormat.match( /DD/ ) ?
					"dayNames" : "dayNamesShort" ) ) ) + 20 - date.getDay() );
			}
			inst.input.attr( "size", this._formatDate( inst, date ).length );
		}
	},

	/* Attach an inline date picker to a div. */
	_inlineDatepicker: function( target, inst ) {
		var divSpan = $( target );
		if ( divSpan.hasClass( this.markerClassName ) ) {
			return;
		}
		divSpan.addClass( this.markerClassName ).append( inst.dpDiv );
		$.data( target, "datepicker", inst );
		this._setDate( inst, this._getDefaultDate( inst ), true );
		this._updateDatepicker( inst );
		this._updateAlternate( inst );

		//If disabled option is true, disable the datepicker before showing it (see ticket #5665)
		if ( inst.settings.disabled ) {
			this._disableDatepicker( target );
		}

		// Set display:block in place of inst.dpDiv.show() which won't work on disconnected elements
		// http://bugs.jqueryui.com/ticket/7552 - A Datepicker created on a detached div has zero height
		inst.dpDiv.css( "display", "block" );
	},

	/* Pop-up the date picker in a "dialog" box.
	 * @param  input element - ignored
	 * @param  date	string or Date - the initial date to display
	 * @param  onSelect  function - the function to call when a date is selected
	 * @param  settings  object - update the dialog date picker instance's settings (anonymous object)
	 * @param  pos int[2] - coordinates for the dialog's position within the screen or
	 *					event - with x/y coordinates or
	 *					leave empty for default (screen centre)
	 * @return the manager object
	 */
	_dialogDatepicker: function( input, date, onSelect, settings, pos ) {
		var id, browserWidth, browserHeight, scrollX, scrollY,
			inst = this._dialogInst; // internal instance

		if ( !inst ) {
			this.uuid += 1;
			id = "dp" + this.uuid;
			this._dialogInput = $( "<input type='text' id='" + id +
				"' style='position: absolute; top: -100px; width: 0px;'/>" );
			this._dialogInput.on( "keydown", this._doKeyDown );
			$( "body" ).append( this._dialogInput );
			inst = this._dialogInst = this._newInst( this._dialogInput, false );
			inst.settings = {};
			$.data( this._dialogInput[ 0 ], "datepicker", inst );
		}
		datepicker_extendRemove( inst.settings, settings || {} );
		date = ( date && date.constructor === Date ? this._formatDate( inst, date ) : date );
		this._dialogInput.val( date );

		this._pos = ( pos ? ( pos.length ? pos : [ pos.pageX, pos.pageY ] ) : null );
		if ( !this._pos ) {
			browserWidth = document.documentElement.clientWidth;
			browserHeight = document.documentElement.clientHeight;
			scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;
			scrollY = document.documentElement.scrollTop || document.body.scrollTop;
			this._pos = // should use actual width/height below
				[ ( browserWidth / 2 ) - 100 + scrollX, ( browserHeight / 2 ) - 150 + scrollY ];
		}

		// Move input on screen for focus, but hidden behind dialog
		this._dialogInput.css( "left", ( this._pos[ 0 ] + 20 ) + "px" ).css( "top", this._pos[ 1 ] + "px" );
		inst.settings.onSelect = onSelect;
		this._inDialog = true;
		this.dpDiv.addClass( this._dialogClass );
		this._showDatepicker( this._dialogInput[ 0 ] );
		if ( $.blockUI ) {
			$.blockUI( this.dpDiv );
		}
		$.data( this._dialogInput[ 0 ], "datepicker", inst );
		return this;
	},

	/* Detach a datepicker from its control.
	 * @param  target	element - the target input field or division or span
	 */
	_destroyDatepicker: function( target ) {
		var nodeName,
			$target = $( target ),
			inst = $.data( target, "datepicker" );

		if ( !$target.hasClass( this.markerClassName ) ) {
			return;
		}

		nodeName = target.nodeName.toLowerCase();
		$.removeData( target, "datepicker" );
		if ( nodeName === "input" ) {
			inst.append.remove();
			inst.trigger.remove();
			$target.removeClass( this.markerClassName ).
				off( "focus", this._showDatepicker ).
				off( "keydown", this._doKeyDown ).
				off( "keypress", this._doKeyPress ).
				off( "keyup", this._doKeyUp );
		} else if ( nodeName === "div" || nodeName === "span" ) {
			$target.removeClass( this.markerClassName ).empty();
		}

		if ( datepicker_instActive === inst ) {
			datepicker_instActive = null;
		}
	},

	/* Enable the date picker to a jQuery selection.
	 * @param  target	element - the target input field or division or span
	 */
	_enableDatepicker: function( target ) {
		var nodeName, inline,
			$target = $( target ),
			inst = $.data( target, "datepicker" );

		if ( !$target.hasClass( this.markerClassName ) ) {
			return;
		}

		nodeName = target.nodeName.toLowerCase();
		if ( nodeName === "input" ) {
			target.disabled = false;
			inst.trigger.filter( "button" ).
				each( function() { this.disabled = false; } ).end().
				filter( "img" ).css( { opacity: "1.0", cursor: "" } );
		} else if ( nodeName === "div" || nodeName === "span" ) {
			inline = $target.children( "." + this._inlineClass );
			inline.children().removeClass( "ui-state-disabled" );
			inline.find( "select.ui-datepicker-month, select.ui-datepicker-year" ).
				prop( "disabled", false );
		}
		this._disabledInputs = $.map( this._disabledInputs,
			function( value ) { return ( value === target ? null : value ); } ); // delete entry
	},

	/* Disable the date picker to a jQuery selection.
	 * @param  target	element - the target input field or division or span
	 */
	_disableDatepicker: function( target ) {
		var nodeName, inline,
			$target = $( target ),
			inst = $.data( target, "datepicker" );

		if ( !$target.hasClass( this.markerClassName ) ) {
			return;
		}

		nodeName = target.nodeName.toLowerCase();
		if ( nodeName === "input" ) {
			target.disabled = true;
			inst.trigger.filter( "button" ).
				each( function() { this.disabled = true; } ).end().
				filter( "img" ).css( { opacity: "0.5", cursor: "default" } );
		} else if ( nodeName === "div" || nodeName === "span" ) {
			inline = $target.children( "." + this._inlineClass );
			inline.children().addClass( "ui-state-disabled" );
			inline.find( "select.ui-datepicker-month, select.ui-datepicker-year" ).
				prop( "disabled", true );
		}
		this._disabledInputs = $.map( this._disabledInputs,
			function( value ) { return ( value === target ? null : value ); } ); // delete entry
		this._disabledInputs[ this._disabledInputs.length ] = target;
	},

	/* Is the first field in a jQuery collection disabled as a datepicker?
	 * @param  target	element - the target input field or division or span
	 * @return boolean - true if disabled, false if enabled
	 */
	_isDisabledDatepicker: function( target ) {
		if ( !target ) {
			return false;
		}
		for ( var i = 0; i < this._disabledInputs.length; i++ ) {
			if ( this._disabledInputs[ i ] === target ) {
				return true;
			}
		}
		return false;
	},

	/* Retrieve the instance data for the target control.
	 * @param  target  element - the target input field or division or span
	 * @return  object - the associated instance data
	 * @throws  error if a jQuery problem getting data
	 */
	_getInst: function( target ) {
		try {
			return $.data( target, "datepicker" );
		}
		catch ( err ) {
			throw "Missing instance data for this datepicker";
		}
	},

	/* Update or retrieve the settings for a date picker attached to an input field or division.
	 * @param  target  element - the target input field or division or span
	 * @param  name	object - the new settings to update or
	 *				string - the name of the setting to change or retrieve,
	 *				when retrieving also "all" for all instance settings or
	 *				"defaults" for all global defaults
	 * @param  value   any - the new value for the setting
	 *				(omit if above is an object or to retrieve a value)
	 */
	_optionDatepicker: function( target, name, value ) {
		var settings, date, minDate, maxDate,
			inst = this._getInst( target );

		if ( arguments.length === 2 && typeof name === "string" ) {
			return ( name === "defaults" ? $.extend( {}, $.datepicker._defaults ) :
				( inst ? ( name === "all" ? $.extend( {}, inst.settings ) :
				this._get( inst, name ) ) : null ) );
		}

		settings = name || {};
		if ( typeof name === "string" ) {
			settings = {};
			settings[ name ] = value;
		}

		if ( inst ) {
			if ( this._curInst === inst ) {
				this._hideDatepicker();
			}

			date = this._getDateDatepicker( target, true );
			minDate = this._getMinMaxDate( inst, "min" );
			maxDate = this._getMinMaxDate( inst, "max" );
			datepicker_extendRemove( inst.settings, settings );

			// reformat the old minDate/maxDate values if dateFormat changes and a new minDate/maxDate isn't provided
			if ( minDate !== null && settings.dateFormat !== undefined && settings.minDate === undefined ) {
				inst.settings.minDate = this._formatDate( inst, minDate );
			}
			if ( maxDate !== null && settings.dateFormat !== undefined && settings.maxDate === undefined ) {
				inst.settings.maxDate = this._formatDate( inst, maxDate );
			}
			if ( "disabled" in settings ) {
				if ( settings.disabled ) {
					this._disableDatepicker( target );
				} else {
					this._enableDatepicker( target );
				}
			}
			this._attachments( $( target ), inst );
			this._autoSize( inst );
			this._setDate( inst, date );
			this._updateAlternate( inst );
			this._updateDatepicker( inst );
		}
	},

	// Change method deprecated
	_changeDatepicker: function( target, name, value ) {
		this._optionDatepicker( target, name, value );
	},

	/* Redraw the date picker attached to an input field or division.
	 * @param  target  element - the target input field or division or span
	 */
	_refreshDatepicker: function( target ) {
		var inst = this._getInst( target );
		if ( inst ) {
			this._updateDatepicker( inst );
		}
	},

	/* Set the dates for a jQuery selection.
	 * @param  target element - the target input field or division or span
	 * @param  date	Date - the new date
	 */
	_setDateDatepicker: function( target, date ) {
		var inst = this._getInst( target );
		if ( inst ) {
			this._setDate( inst, date );
			this._updateDatepicker( inst );
			this._updateAlternate( inst );
		}
	},

	/* Get the date(s) for the first entry in a jQuery selection.
	 * @param  target element - the target input field or division or span
	 * @param  noDefault boolean - true if no default date is to be used
	 * @return Date - the current date
	 */
	_getDateDatepicker: function( target, noDefault ) {
		var inst = this._getInst( target );
		if ( inst && !inst.inline ) {
			this._setDateFromField( inst, noDefault );
		}
		return ( inst ? this._getDate( inst ) : null );
	},

	/* Handle keystrokes. */
	_doKeyDown: function( event ) {
		var onSelect, dateStr, sel,
			inst = $.datepicker._getInst( event.target ),
			handled = true,
			isRTL = inst.dpDiv.is( ".ui-datepicker-rtl" );

		inst._keyEvent = true;
		if ( $.datepicker._datepickerShowing ) {
			switch ( event.keyCode ) {
				case 9: $.datepicker._hideDatepicker();
						handled = false;
						break; // hide on tab out
				case 13: sel = $( "td." + $.datepicker._dayOverClass + ":not(." +
									$.datepicker._currentClass + ")", inst.dpDiv );
						if ( sel[ 0 ] ) {
							$.datepicker._selectDay( event.target, inst.selectedMonth, inst.selectedYear, sel[ 0 ] );
						}

						onSelect = $.datepicker._get( inst, "onSelect" );
						if ( onSelect ) {
							dateStr = $.datepicker._formatDate( inst );

							// Trigger custom callback
							onSelect.apply( ( inst.input ? inst.input[ 0 ] : null ), [ dateStr, inst ] );
						} else {
							$.datepicker._hideDatepicker();
						}

						return false; // don't submit the form
				case 27: $.datepicker._hideDatepicker();
						break; // hide on escape
				case 33: $.datepicker._adjustDate( event.target, ( event.ctrlKey ?
							-$.datepicker._get( inst, "stepBigMonths" ) :
							-$.datepicker._get( inst, "stepMonths" ) ), "M" );
						break; // previous month/year on page up/+ ctrl
				case 34: $.datepicker._adjustDate( event.target, ( event.ctrlKey ?
							+$.datepicker._get( inst, "stepBigMonths" ) :
							+$.datepicker._get( inst, "stepMonths" ) ), "M" );
						break; // next month/year on page down/+ ctrl
				case 35: if ( event.ctrlKey || event.metaKey ) {
							$.datepicker._clearDate( event.target );
						}
						handled = event.ctrlKey || event.metaKey;
						break; // clear on ctrl or command +end
				case 36: if ( event.ctrlKey || event.metaKey ) {
							$.datepicker._gotoToday( event.target );
						}
						handled = event.ctrlKey || event.metaKey;
						break; // current on ctrl or command +home
				case 37: if ( event.ctrlKey || event.metaKey ) {
							$.datepicker._adjustDate( event.target, ( isRTL ? +1 : -1 ), "D" );
						}
						handled = event.ctrlKey || event.metaKey;

						// -1 day on ctrl or command +left
						if ( event.originalEvent.altKey ) {
							$.datepicker._adjustDate( event.target, ( event.ctrlKey ?
								-$.datepicker._get( inst, "stepBigMonths" ) :
								-$.datepicker._get( inst, "stepMonths" ) ), "M" );
						}

						// next month/year on alt +left on Mac
						break;
				case 38: if ( event.ctrlKey || event.metaKey ) {
							$.datepicker._adjustDate( event.target, -7, "D" );
						}
						handled = event.ctrlKey || event.metaKey;
						break; // -1 week on ctrl or command +up
				case 39: if ( event.ctrlKey || event.metaKey ) {
							$.datepicker._adjustDate( event.target, ( isRTL ? -1 : +1 ), "D" );
						}
						handled = event.ctrlKey || event.metaKey;

						// +1 day on ctrl or command +right
						if ( event.originalEvent.altKey ) {
							$.datepicker._adjustDate( event.target, ( event.ctrlKey ?
								+$.datepicker._get( inst, "stepBigMonths" ) :
								+$.datepicker._get( inst, "stepMonths" ) ), "M" );
						}

						// next month/year on alt +right
						break;
				case 40: if ( event.ctrlKey || event.metaKey ) {
							$.datepicker._adjustDate( event.target, +7, "D" );
						}
						handled = event.ctrlKey || event.metaKey;
						break; // +1 week on ctrl or command +down
				default: handled = false;
			}
		} else if ( event.keyCode === 36 && event.ctrlKey ) { // display the date picker on ctrl+home
			$.datepicker._showDatepicker( this );
		} else {
			handled = false;
		}

		if ( handled ) {
			event.preventDefault();
			event.stopPropagation();
		}
	},

	/* Filter entered characters - based on date format. */
	_doKeyPress: function( event ) {
		var chars, chr,
			inst = $.datepicker._getInst( event.target );

		if ( $.datepicker._get( inst, "constrainInput" ) ) {
			chars = $.datepicker._possibleChars( $.datepicker._get( inst, "dateFormat" ) );
			chr = String.fromCharCode( event.charCode == null ? event.keyCode : event.charCode );
			return event.ctrlKey || event.metaKey || ( chr < " " || !chars || chars.indexOf( chr ) > -1 );
		}
	},

	/* Synchronise manual entry and field/alternate field. */
	_doKeyUp: function( event ) {
		var date,
			inst = $.datepicker._getInst( event.target );

		if ( inst.input.val() !== inst.lastVal ) {
			try {
				date = $.datepicker.parseDate( $.datepicker._get( inst, "dateFormat" ),
					( inst.input ? inst.input.val() : null ),
					$.datepicker._getFormatConfig( inst ) );

				if ( date ) { // only if valid
					$.datepicker._setDateFromField( inst );
					$.datepicker._updateAlternate( inst );
					$.datepicker._updateDatepicker( inst );
				}
			}
			catch ( err ) {
			}
		}
		return true;
	},

	/* Pop-up the date picker for a given input field.
	 * If false returned from beforeShow event handler do not show.
	 * @param  input  element - the input field attached to the date picker or
	 *					event - if triggered by focus
	 */
	_showDatepicker: function( input ) {
		input = input.target || input;
		if ( input.nodeName.toLowerCase() !== "input" ) { // find from button/image trigger
			input = $( "input", input.parentNode )[ 0 ];
		}

		if ( $.datepicker._isDisabledDatepicker( input ) || $.datepicker._lastInput === input ) { // already here
			return;
		}

		var inst, beforeShow, beforeShowSettings, isFixed,
			offset, showAnim, duration;

		inst = $.datepicker._getInst( input );
		if ( $.datepicker._curInst && $.datepicker._curInst !== inst ) {
			$.datepicker._curInst.dpDiv.stop( true, true );
			if ( inst && $.datepicker._datepickerShowing ) {
				$.datepicker._hideDatepicker( $.datepicker._curInst.input[ 0 ] );
			}
		}

		beforeShow = $.datepicker._get( inst, "beforeShow" );
		beforeShowSettings = beforeShow ? beforeShow.apply( input, [ input, inst ] ) : {};
		if ( beforeShowSettings === false ) {
			return;
		}
		datepicker_extendRemove( inst.settings, beforeShowSettings );

		inst.lastVal = null;
		$.datepicker._lastInput = input;
		$.datepicker._setDateFromField( inst );

		if ( $.datepicker._inDialog ) { // hide cursor
			input.value = "";
		}
		if ( !$.datepicker._pos ) { // position below input
			$.datepicker._pos = $.datepicker._findPos( input );
			$.datepicker._pos[ 1 ] += input.offsetHeight; // add the height
		}

		isFixed = false;
		$( input ).parents().each( function() {
			isFixed |= $( this ).css( "position" ) === "fixed";
			return !isFixed;
		} );

		offset = { left: $.datepicker._pos[ 0 ], top: $.datepicker._pos[ 1 ] };
		$.datepicker._pos = null;

		//to avoid flashes on Firefox
		inst.dpDiv.empty();

		// determine sizing offscreen
		inst.dpDiv.css( { position: "absolute", display: "block", top: "-1000px" } );
		$.datepicker._updateDatepicker( inst );

		// fix width for dynamic number of date pickers
		// and adjust position before showing
		offset = $.datepicker._checkOffset( inst, offset, isFixed );
		inst.dpDiv.css( { position: ( $.datepicker._inDialog && $.blockUI ?
			"static" : ( isFixed ? "fixed" : "absolute" ) ), display: "none",
			left: offset.left + "px", top: offset.top + "px" } );

		if ( !inst.inline ) {
			showAnim = $.datepicker._get( inst, "showAnim" );
			duration = $.datepicker._get( inst, "duration" );
			inst.dpDiv.css( "z-index", datepicker_getZindex( $( input ) ) + 1 );
			$.datepicker._datepickerShowing = true;

			if ( $.effects && $.effects.effect[ showAnim ] ) {
				inst.dpDiv.show( showAnim, $.datepicker._get( inst, "showOptions" ), duration );
			} else {
				inst.dpDiv[ showAnim || "show" ]( showAnim ? duration : null );
			}

			if ( $.datepicker._shouldFocusInput( inst ) ) {
				inst.input.trigger( "focus" );
			}

			$.datepicker._curInst = inst;
		}
	},

	/* Generate the date picker content. */
	_updateDatepicker: function( inst ) {
		this.maxRows = 4; //Reset the max number of rows being displayed (see #7043)
		datepicker_instActive = inst; // for delegate hover events
		inst.dpDiv.empty().append( this._generateHTML( inst ) );
		this._attachHandlers( inst );

		var origyearshtml,
			numMonths = this._getNumberOfMonths( inst ),
			cols = numMonths[ 1 ],
			width = 17,
			activeCell = inst.dpDiv.find( "." + this._dayOverClass + " a" );

		if ( activeCell.length > 0 ) {
			datepicker_handleMouseover.apply( activeCell.get( 0 ) );
		}

		inst.dpDiv.removeClass( "ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4" ).width( "" );
		if ( cols > 1 ) {
			inst.dpDiv.addClass( "ui-datepicker-multi-" + cols ).css( "width", ( width * cols ) + "em" );
		}
		inst.dpDiv[ ( numMonths[ 0 ] !== 1 || numMonths[ 1 ] !== 1 ? "add" : "remove" ) +
			"Class" ]( "ui-datepicker-multi" );
		inst.dpDiv[ ( this._get( inst, "isRTL" ) ? "add" : "remove" ) +
			"Class" ]( "ui-datepicker-rtl" );

		if ( inst === $.datepicker._curInst && $.datepicker._datepickerShowing && $.datepicker._shouldFocusInput( inst ) ) {
			inst.input.trigger( "focus" );
		}

		// Deffered render of the years select (to avoid flashes on Firefox)
		if ( inst.yearshtml ) {
			origyearshtml = inst.yearshtml;
			setTimeout( function() {

				//assure that inst.yearshtml didn't change.
				if ( origyearshtml === inst.yearshtml && inst.yearshtml ) {
					inst.dpDiv.find( "select.ui-datepicker-year:first" ).replaceWith( inst.yearshtml );
				}
				origyearshtml = inst.yearshtml = null;
			}, 0 );
		}
	},

	// #6694 - don't focus the input if it's already focused
	// this breaks the change event in IE
	// Support: IE and jQuery <1.9
	_shouldFocusInput: function( inst ) {
		return inst.input && inst.input.is( ":visible" ) && !inst.input.is( ":disabled" ) && !inst.input.is( ":focus" );
	},

	/* Check positioning to remain on screen. */
	_checkOffset: function( inst, offset, isFixed ) {
		var dpWidth = inst.dpDiv.outerWidth(),
			dpHeight = inst.dpDiv.outerHeight(),
			inputWidth = inst.input ? inst.input.outerWidth() : 0,
			inputHeight = inst.input ? inst.input.outerHeight() : 0,
			viewWidth = document.documentElement.clientWidth + ( isFixed ? 0 : $( document ).scrollLeft() ),
			viewHeight = document.documentElement.clientHeight + ( isFixed ? 0 : $( document ).scrollTop() );

		offset.left -= ( this._get( inst, "isRTL" ) ? ( dpWidth - inputWidth ) : 0 );
		offset.left -= ( isFixed && offset.left === inst.input.offset().left ) ? $( document ).scrollLeft() : 0;
		offset.top -= ( isFixed && offset.top === ( inst.input.offset().top + inputHeight ) ) ? $( document ).scrollTop() : 0;

		// Now check if datepicker is showing outside window viewport - move to a better place if so.
		offset.left -= Math.min( offset.left, ( offset.left + dpWidth > viewWidth && viewWidth > dpWidth ) ?
			Math.abs( offset.left + dpWidth - viewWidth ) : 0 );
		offset.top -= Math.min( offset.top, ( offset.top + dpHeight > viewHeight && viewHeight > dpHeight ) ?
			Math.abs( dpHeight + inputHeight ) : 0 );

		return offset;
	},

	/* Find an object's position on the screen. */
	_findPos: function( obj ) {
		var position,
			inst = this._getInst( obj ),
			isRTL = this._get( inst, "isRTL" );

		while ( obj && ( obj.type === "hidden" || obj.nodeType !== 1 || $.expr.filters.hidden( obj ) ) ) {
			obj = obj[ isRTL ? "previousSibling" : "nextSibling" ];
		}

		position = $( obj ).offset();
		return [ position.left, position.top ];
	},

	/* Hide the date picker from view.
	 * @param  input  element - the input field attached to the date picker
	 */
	_hideDatepicker: function( input ) {
		var showAnim, duration, postProcess, onClose,
			inst = this._curInst;

		if ( !inst || ( input && inst !== $.data( input, "datepicker" ) ) ) {
			return;
		}

		if ( this._datepickerShowing ) {
			showAnim = this._get( inst, "showAnim" );
			duration = this._get( inst, "duration" );
			postProcess = function() {
				$.datepicker._tidyDialog( inst );
			};

			// DEPRECATED: after BC for 1.8.x $.effects[ showAnim ] is not needed
			if ( $.effects && ( $.effects.effect[ showAnim ] || $.effects[ showAnim ] ) ) {
				inst.dpDiv.hide( showAnim, $.datepicker._get( inst, "showOptions" ), duration, postProcess );
			} else {
				inst.dpDiv[ ( showAnim === "slideDown" ? "slideUp" :
					( showAnim === "fadeIn" ? "fadeOut" : "hide" ) ) ]( ( showAnim ? duration : null ), postProcess );
			}

			if ( !showAnim ) {
				postProcess();
			}
			this._datepickerShowing = false;

			onClose = this._get( inst, "onClose" );
			if ( onClose ) {
				onClose.apply( ( inst.input ? inst.input[ 0 ] : null ), [ ( inst.input ? inst.input.val() : "" ), inst ] );
			}

			this._lastInput = null;
			if ( this._inDialog ) {
				this._dialogInput.css( { position: "absolute", left: "0", top: "-100px" } );
				if ( $.blockUI ) {
					$.unblockUI();
					$( "body" ).append( this.dpDiv );
				}
			}
			this._inDialog = false;
		}
	},

	/* Tidy up after a dialog display. */
	_tidyDialog: function( inst ) {
		inst.dpDiv.removeClass( this._dialogClass ).off( ".ui-datepicker-calendar" );
	},

	/* Close date picker if clicked elsewhere. */
	_checkExternalClick: function( event ) {
		if ( !$.datepicker._curInst ) {
			return;
		}

		var $target = $( event.target ),
			inst = $.datepicker._getInst( $target[ 0 ] );

		if ( ( ( $target[ 0 ].id !== $.datepicker._mainDivId &&
				$target.parents( "#" + $.datepicker._mainDivId ).length === 0 &&
				!$target.hasClass( $.datepicker.markerClassName ) &&
				!$target.closest( "." + $.datepicker._triggerClass ).length &&
				$.datepicker._datepickerShowing && !( $.datepicker._inDialog && $.blockUI ) ) ) ||
			( $target.hasClass( $.datepicker.markerClassName ) && $.datepicker._curInst !== inst ) ) {
				$.datepicker._hideDatepicker();
		}
	},

	/* Adjust one of the date sub-fields. */
	_adjustDate: function( id, offset, period ) {
		var target = $( id ),
			inst = this._getInst( target[ 0 ] );

		if ( this._isDisabledDatepicker( target[ 0 ] ) ) {
			return;
		}
		this._adjustInstDate( inst, offset +
			( period === "M" ? this._get( inst, "showCurrentAtPos" ) : 0 ), // undo positioning
			period );
		this._updateDatepicker( inst );
	},

	/* Action for current link. */
	_gotoToday: function( id ) {
		var date,
			target = $( id ),
			inst = this._getInst( target[ 0 ] );

		if ( this._get( inst, "gotoCurrent" ) && inst.currentDay ) {
			inst.selectedDay = inst.currentDay;
			inst.drawMonth = inst.selectedMonth = inst.currentMonth;
			inst.drawYear = inst.selectedYear = inst.currentYear;
		} else {
			date = new Date();
			inst.selectedDay = date.getDate();
			inst.drawMonth = inst.selectedMonth = date.getMonth();
			inst.drawYear = inst.selectedYear = date.getFullYear();
		}
		this._notifyChange( inst );
		this._adjustDate( target );
	},

	/* Action for selecting a new month/year. */
	_selectMonthYear: function( id, select, period ) {
		var target = $( id ),
			inst = this._getInst( target[ 0 ] );

		inst[ "selected" + ( period === "M" ? "Month" : "Year" ) ] =
		inst[ "draw" + ( period === "M" ? "Month" : "Year" ) ] =
			parseInt( select.options[ select.selectedIndex ].value, 10 );

		this._notifyChange( inst );
		this._adjustDate( target );
	},

	/* Action for selecting a day. */
	_selectDay: function( id, month, year, td ) {
		var inst,
			target = $( id );

		if ( $( td ).hasClass( this._unselectableClass ) || this._isDisabledDatepicker( target[ 0 ] ) ) {
			return;
		}

		inst = this._getInst( target[ 0 ] );
		inst.selectedDay = inst.currentDay = $( "a", td ).html();
		inst.selectedMonth = inst.currentMonth = month;
		inst.selectedYear = inst.currentYear = year;
		this._selectDate( id, this._formatDate( inst,
			inst.currentDay, inst.currentMonth, inst.currentYear ) );
	},

	/* Erase the input field and hide the date picker. */
	_clearDate: function( id ) {
		var target = $( id );
		this._selectDate( target, "" );
	},

	/* Update the input field with the selected date. */
	_selectDate: function( id, dateStr ) {
		var onSelect,
			target = $( id ),
			inst = this._getInst( target[ 0 ] );

		dateStr = ( dateStr != null ? dateStr : this._formatDate( inst ) );
		if ( inst.input ) {
			inst.input.val( dateStr );
		}
		this._updateAlternate( inst );

		onSelect = this._get( inst, "onSelect" );
		if ( onSelect ) {
			onSelect.apply( ( inst.input ? inst.input[ 0 ] : null ), [ dateStr, inst ] );  // trigger custom callback
		} else if ( inst.input ) {
			inst.input.trigger( "change" ); // fire the change event
		}

		if ( inst.inline ) {
			this._updateDatepicker( inst );
		} else {
			this._hideDatepicker();
			this._lastInput = inst.input[ 0 ];
			if ( typeof( inst.input[ 0 ] ) !== "object" ) {
				inst.input.trigger( "focus" ); // restore focus
			}
			this._lastInput = null;
		}
	},

	/* Update any alternate field to synchronise with the main field. */
	_updateAlternate: function( inst ) {
		var altFormat, date, dateStr,
			altField = this._get( inst, "altField" );

		if ( altField ) { // update alternate field too
			altFormat = this._get( inst, "altFormat" ) || this._get( inst, "dateFormat" );
			date = this._getDate( inst );
			dateStr = this.formatDate( altFormat, date, this._getFormatConfig( inst ) );
			$( altField ).val( dateStr );
		}
	},

	/* Set as beforeShowDay function to prevent selection of weekends.
	 * @param  date  Date - the date to customise
	 * @return [boolean, string] - is this date selectable?, what is its CSS class?
	 */
	noWeekends: function( date ) {
		var day = date.getDay();
		return [ ( day > 0 && day < 6 ), "" ];
	},

	/* Set as calculateWeek to determine the week of the year based on the ISO 8601 definition.
	 * @param  date  Date - the date to get the week for
	 * @return  number - the number of the week within the year that contains this date
	 */
	iso8601Week: function( date ) {
		var time,
			checkDate = new Date( date.getTime() );

		// Find Thursday of this week starting on Monday
		checkDate.setDate( checkDate.getDate() + 4 - ( checkDate.getDay() || 7 ) );

		time = checkDate.getTime();
		checkDate.setMonth( 0 ); // Compare with Jan 1
		checkDate.setDate( 1 );
		return Math.floor( Math.round( ( time - checkDate ) / 86400000 ) / 7 ) + 1;
	},

	/* Parse a string value into a date object.
	 * See formatDate below for the possible formats.
	 *
	 * @param  format string - the expected format of the date
	 * @param  value string - the date in the above format
	 * @param  settings Object - attributes include:
	 *					shortYearCutoff  number - the cutoff year for determining the century (optional)
	 *					dayNamesShort	string[7] - abbreviated names of the days from Sunday (optional)
	 *					dayNames		string[7] - names of the days from Sunday (optional)
	 *					monthNamesShort string[12] - abbreviated names of the months (optional)
	 *					monthNames		string[12] - names of the months (optional)
	 * @return  Date - the extracted date value or null if value is blank
	 */
	parseDate: function( format, value, settings ) {
		if ( format == null || value == null ) {
			throw "Invalid arguments";
		}

		value = ( typeof value === "object" ? value.toString() : value + "" );
		if ( value === "" ) {
			return null;
		}

		var iFormat, dim, extra,
			iValue = 0,
			shortYearCutoffTemp = ( settings ? settings.shortYearCutoff : null ) || this._defaults.shortYearCutoff,
			shortYearCutoff = ( typeof shortYearCutoffTemp !== "string" ? shortYearCutoffTemp :
				new Date().getFullYear() % 100 + parseInt( shortYearCutoffTemp, 10 ) ),
			dayNamesShort = ( settings ? settings.dayNamesShort : null ) || this._defaults.dayNamesShort,
			dayNames = ( settings ? settings.dayNames : null ) || this._defaults.dayNames,
			monthNamesShort = ( settings ? settings.monthNamesShort : null ) || this._defaults.monthNamesShort,
			monthNames = ( settings ? settings.monthNames : null ) || this._defaults.monthNames,
			year = -1,
			month = -1,
			day = -1,
			doy = -1,
			literal = false,
			date,

			// Check whether a format character is doubled
			lookAhead = function( match ) {
				var matches = ( iFormat + 1 < format.length && format.charAt( iFormat + 1 ) === match );
				if ( matches ) {
					iFormat++;
				}
				return matches;
			},

			// Extract a number from the string value
			getNumber = function( match ) {
				var isDoubled = lookAhead( match ),
					size = ( match === "@" ? 14 : ( match === "!" ? 20 :
					( match === "y" && isDoubled ? 4 : ( match === "o" ? 3 : 2 ) ) ) ),
					minSize = ( match === "y" ? size : 1 ),
					digits = new RegExp( "^\\d{" + minSize + "," + size + "}" ),
					num = value.substring( iValue ).match( digits );
				if ( !num ) {
					throw "Missing number at position " + iValue;
				}
				iValue += num[ 0 ].length;
				return parseInt( num[ 0 ], 10 );
			},

			// Extract a name from the string value and convert to an index
			getName = function( match, shortNames, longNames ) {
				var index = -1,
					names = $.map( lookAhead( match ) ? longNames : shortNames, function( v, k ) {
						return [ [ k, v ] ];
					} ).sort( function( a, b ) {
						return -( a[ 1 ].length - b[ 1 ].length );
					} );

				$.each( names, function( i, pair ) {
					var name = pair[ 1 ];
					if ( value.substr( iValue, name.length ).toLowerCase() === name.toLowerCase() ) {
						index = pair[ 0 ];
						iValue += name.length;
						return false;
					}
				} );
				if ( index !== -1 ) {
					return index + 1;
				} else {
					throw "Unknown name at position " + iValue;
				}
			},

			// Confirm that a literal character matches the string value
			checkLiteral = function() {
				if ( value.charAt( iValue ) !== format.charAt( iFormat ) ) {
					throw "Unexpected literal at position " + iValue;
				}
				iValue++;
			};

		for ( iFormat = 0; iFormat < format.length; iFormat++ ) {
			if ( literal ) {
				if ( format.charAt( iFormat ) === "'" && !lookAhead( "'" ) ) {
					literal = false;
				} else {
					checkLiteral();
				}
			} else {
				switch ( format.charAt( iFormat ) ) {
					case "d":
						day = getNumber( "d" );
						break;
					case "D":
						getName( "D", dayNamesShort, dayNames );
						break;
					case "o":
						doy = getNumber( "o" );
						break;
					case "m":
						month = getNumber( "m" );
						break;
					case "M":
						month = getName( "M", monthNamesShort, monthNames );
						break;
					case "y":
						year = getNumber( "y" );
						break;
					case "@":
						date = new Date( getNumber( "@" ) );
						year = date.getFullYear();
						month = date.getMonth() + 1;
						day = date.getDate();
						break;
					case "!":
						date = new Date( ( getNumber( "!" ) - this._ticksTo1970 ) / 10000 );
						year = date.getFullYear();
						month = date.getMonth() + 1;
						day = date.getDate();
						break;
					case "'":
						if ( lookAhead( "'" ) ) {
							checkLiteral();
						} else {
							literal = true;
						}
						break;
					default:
						checkLiteral();
				}
			}
		}

		if ( iValue < value.length ) {
			extra = value.substr( iValue );
			if ( !/^\s+/.test( extra ) ) {
				throw "Extra/unparsed characters found in date: " + extra;
			}
		}

		if ( year === -1 ) {
			year = new Date().getFullYear();
		} else if ( year < 100 ) {
			year += new Date().getFullYear() - new Date().getFullYear() % 100 +
				( year <= shortYearCutoff ? 0 : -100 );
		}

		if ( doy > -1 ) {
			month = 1;
			day = doy;
			do {
				dim = this._getDaysInMonth( year, month - 1 );
				if ( day <= dim ) {
					break;
				}
				month++;
				day -= dim;
			} while ( true );
		}

		date = this._daylightSavingAdjust( new Date( year, month - 1, day ) );
		if ( date.getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== day ) {
			throw "Invalid date"; // E.g. 31/02/00
		}
		return date;
	},

	/* Standard date formats. */
	ATOM: "yy-mm-dd", // RFC 3339 (ISO 8601)
	COOKIE: "D, dd M yy",
	ISO_8601: "yy-mm-dd",
	RFC_822: "D, d M y",
	RFC_850: "DD, dd-M-y",
	RFC_1036: "D, d M y",
	RFC_1123: "D, d M yy",
	RFC_2822: "D, d M yy",
	RSS: "D, d M y", // RFC 822
	TICKS: "!",
	TIMESTAMP: "@",
	W3C: "yy-mm-dd", // ISO 8601

	_ticksTo1970: ( ( ( 1970 - 1 ) * 365 + Math.floor( 1970 / 4 ) - Math.floor( 1970 / 100 ) +
		Math.floor( 1970 / 400 ) ) * 24 * 60 * 60 * 10000000 ),

	/* Format a date object into a string value.
	 * The format can be combinations of the following:
	 * d  - day of month (no leading zero)
	 * dd - day of month (two digit)
	 * o  - day of year (no leading zeros)
	 * oo - day of year (three digit)
	 * D  - day name short
	 * DD - day name long
	 * m  - month of year (no leading zero)
	 * mm - month of year (two digit)
	 * M  - month name short
	 * MM - month name long
	 * y  - year (two digit)
	 * yy - year (four digit)
	 * @ - Unix timestamp (ms since 01/01/1970)
	 * ! - Windows ticks (100ns since 01/01/0001)
	 * "..." - literal text
	 * '' - single quote
	 *
	 * @param  format string - the desired format of the date
	 * @param  date Date - the date value to format
	 * @param  settings Object - attributes include:
	 *					dayNamesShort	string[7] - abbreviated names of the days from Sunday (optional)
	 *					dayNames		string[7] - names of the days from Sunday (optional)
	 *					monthNamesShort string[12] - abbreviated names of the months (optional)
	 *					monthNames		string[12] - names of the months (optional)
	 * @return  string - the date in the above format
	 */
	formatDate: function( format, date, settings ) {
		if ( !date ) {
			return "";
		}

		var iFormat,
			dayNamesShort = ( settings ? settings.dayNamesShort : null ) || this._defaults.dayNamesShort,
			dayNames = ( settings ? settings.dayNames : null ) || this._defaults.dayNames,
			monthNamesShort = ( settings ? settings.monthNamesShort : null ) || this._defaults.monthNamesShort,
			monthNames = ( settings ? settings.monthNames : null ) || this._defaults.monthNames,

			// Check whether a format character is doubled
			lookAhead = function( match ) {
				var matches = ( iFormat + 1 < format.length && format.charAt( iFormat + 1 ) === match );
				if ( matches ) {
					iFormat++;
				}
				return matches;
			},

			// Format a number, with leading zero if necessary
			formatNumber = function( match, value, len ) {
				var num = "" + value;
				if ( lookAhead( match ) ) {
					while ( num.length < len ) {
						num = "0" + num;
					}
				}
				return num;
			},

			// Format a name, short or long as requested
			formatName = function( match, value, shortNames, longNames ) {
				return ( lookAhead( match ) ? longNames[ value ] : shortNames[ value ] );
			},
			output = "",
			literal = false;

		if ( date ) {
			for ( iFormat = 0; iFormat < format.length; iFormat++ ) {
				if ( literal ) {
					if ( format.charAt( iFormat ) === "'" && !lookAhead( "'" ) ) {
						literal = false;
					} else {
						output += format.charAt( iFormat );
					}
				} else {
					switch ( format.charAt( iFormat ) ) {
						case "d":
							output += formatNumber( "d", date.getDate(), 2 );
							break;
						case "D":
							output += formatName( "D", date.getDay(), dayNamesShort, dayNames );
							break;
						case "o":
							output += formatNumber( "o",
								Math.round( ( new Date( date.getFullYear(), date.getMonth(), date.getDate() ).getTime() - new Date( date.getFullYear(), 0, 0 ).getTime() ) / 86400000 ), 3 );
							break;
						case "m":
							output += formatNumber( "m", date.getMonth() + 1, 2 );
							break;
						case "M":
							output += formatName( "M", date.getMonth(), monthNamesShort, monthNames );
							break;
						case "y":
							output += ( lookAhead( "y" ) ? date.getFullYear() :
								( date.getFullYear() % 100 < 10 ? "0" : "" ) + date.getFullYear() % 100 );
							break;
						case "@":
							output += date.getTime();
							break;
						case "!":
							output += date.getTime() * 10000 + this._ticksTo1970;
							break;
						case "'":
							if ( lookAhead( "'" ) ) {
								output += "'";
							} else {
								literal = true;
							}
							break;
						default:
							output += format.charAt( iFormat );
					}
				}
			}
		}
		return output;
	},

	/* Extract all possible characters from the date format. */
	_possibleChars: function( format ) {
		var iFormat,
			chars = "",
			literal = false,

			// Check whether a format character is doubled
			lookAhead = function( match ) {
				var matches = ( iFormat + 1 < format.length && format.charAt( iFormat + 1 ) === match );
				if ( matches ) {
					iFormat++;
				}
				return matches;
			};

		for ( iFormat = 0; iFormat < format.length; iFormat++ ) {
			if ( literal ) {
				if ( format.charAt( iFormat ) === "'" && !lookAhead( "'" ) ) {
					literal = false;
				} else {
					chars += format.charAt( iFormat );
				}
			} else {
				switch ( format.charAt( iFormat ) ) {
					case "d": case "m": case "y": case "@":
						chars += "0123456789";
						break;
					case "D": case "M":
						return null; // Accept anything
					case "'":
						if ( lookAhead( "'" ) ) {
							chars += "'";
						} else {
							literal = true;
						}
						break;
					default:
						chars += format.charAt( iFormat );
				}
			}
		}
		return chars;
	},

	/* Get a setting value, defaulting if necessary. */
	_get: function( inst, name ) {
		return inst.settings[ name ] !== undefined ?
			inst.settings[ name ] : this._defaults[ name ];
	},

	/* Parse existing date and initialise date picker. */
	_setDateFromField: function( inst, noDefault ) {
		if ( inst.input.val() === inst.lastVal ) {
			return;
		}

		var dateFormat = this._get( inst, "dateFormat" ),
			dates = inst.lastVal = inst.input ? inst.input.val() : null,
			defaultDate = this._getDefaultDate( inst ),
			date = defaultDate,
			settings = this._getFormatConfig( inst );

		try {
			date = this.parseDate( dateFormat, dates, settings ) || defaultDate;
		} catch ( event ) {
			dates = ( noDefault ? "" : dates );
		}
		inst.selectedDay = date.getDate();
		inst.drawMonth = inst.selectedMonth = date.getMonth();
		inst.drawYear = inst.selectedYear = date.getFullYear();
		inst.currentDay = ( dates ? date.getDate() : 0 );
		inst.currentMonth = ( dates ? date.getMonth() : 0 );
		inst.currentYear = ( dates ? date.getFullYear() : 0 );
		this._adjustInstDate( inst );
	},

	/* Retrieve the default date shown on opening. */
	_getDefaultDate: function( inst ) {
		return this._restrictMinMax( inst,
			this._determineDate( inst, this._get( inst, "defaultDate" ), new Date() ) );
	},

	/* A date may be specified as an exact value or a relative one. */
	_determineDate: function( inst, date, defaultDate ) {
		var offsetNumeric = function( offset ) {
				var date = new Date();
				date.setDate( date.getDate() + offset );
				return date;
			},
			offsetString = function( offset ) {
				try {
					return $.datepicker.parseDate( $.datepicker._get( inst, "dateFormat" ),
						offset, $.datepicker._getFormatConfig( inst ) );
				}
				catch ( e ) {

					// Ignore
				}

				var date = ( offset.toLowerCase().match( /^c/ ) ?
					$.datepicker._getDate( inst ) : null ) || new Date(),
					year = date.getFullYear(),
					month = date.getMonth(),
					day = date.getDate(),
					pattern = /([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g,
					matches = pattern.exec( offset );

				while ( matches ) {
					switch ( matches[ 2 ] || "d" ) {
						case "d" : case "D" :
							day += parseInt( matches[ 1 ], 10 ); break;
						case "w" : case "W" :
							day += parseInt( matches[ 1 ], 10 ) * 7; break;
						case "m" : case "M" :
							month += parseInt( matches[ 1 ], 10 );
							day = Math.min( day, $.datepicker._getDaysInMonth( year, month ) );
							break;
						case "y": case "Y" :
							year += parseInt( matches[ 1 ], 10 );
							day = Math.min( day, $.datepicker._getDaysInMonth( year, month ) );
							break;
					}
					matches = pattern.exec( offset );
				}
				return new Date( year, month, day );
			},
			newDate = ( date == null || date === "" ? defaultDate : ( typeof date === "string" ? offsetString( date ) :
				( typeof date === "number" ? ( isNaN( date ) ? defaultDate : offsetNumeric( date ) ) : new Date( date.getTime() ) ) ) );

		newDate = ( newDate && newDate.toString() === "Invalid Date" ? defaultDate : newDate );
		if ( newDate ) {
			newDate.setHours( 0 );
			newDate.setMinutes( 0 );
			newDate.setSeconds( 0 );
			newDate.setMilliseconds( 0 );
		}
		return this._daylightSavingAdjust( newDate );
	},

	/* Handle switch to/from daylight saving.
	 * Hours may be non-zero on daylight saving cut-over:
	 * > 12 when midnight changeover, but then cannot generate
	 * midnight datetime, so jump to 1AM, otherwise reset.
	 * @param  date  (Date) the date to check
	 * @return  (Date) the corrected date
	 */
	_daylightSavingAdjust: function( date ) {
		if ( !date ) {
			return null;
		}
		date.setHours( date.getHours() > 12 ? date.getHours() + 2 : 0 );
		return date;
	},

	/* Set the date(s) directly. */
	_setDate: function( inst, date, noChange ) {
		var clear = !date,
			origMonth = inst.selectedMonth,
			origYear = inst.selectedYear,
			newDate = this._restrictMinMax( inst, this._determineDate( inst, date, new Date() ) );

		inst.selectedDay = inst.currentDay = newDate.getDate();
		inst.drawMonth = inst.selectedMonth = inst.currentMonth = newDate.getMonth();
		inst.drawYear = inst.selectedYear = inst.currentYear = newDate.getFullYear();
		if ( ( origMonth !== inst.selectedMonth || origYear !== inst.selectedYear ) && !noChange ) {
			this._notifyChange( inst );
		}
		this._adjustInstDate( inst );
		if ( inst.input ) {
			inst.input.val( clear ? "" : this._formatDate( inst ) );
		}
	},

	/* Retrieve the date(s) directly. */
	_getDate: function( inst ) {
		var startDate = ( !inst.currentYear || ( inst.input && inst.input.val() === "" ) ? null :
			this._daylightSavingAdjust( new Date(
			inst.currentYear, inst.currentMonth, inst.currentDay ) ) );
			return startDate;
	},

	/* Attach the onxxx handlers.  These are declared statically so
	 * they work with static code transformers like Caja.
	 */
	_attachHandlers: function( inst ) {
		var stepMonths = this._get( inst, "stepMonths" ),
			id = "#" + inst.id.replace( /\\\\/g, "\\" );
		inst.dpDiv.find( "[data-handler]" ).map( function() {
			var handler = {
				prev: function() {
					$.datepicker._adjustDate( id, -stepMonths, "M" );
				},
				next: function() {
					$.datepicker._adjustDate( id, +stepMonths, "M" );
				},
				hide: function() {
					$.datepicker._hideDatepicker();
				},
				today: function() {
					$.datepicker._gotoToday( id );
				},
				selectDay: function() {
					$.datepicker._selectDay( id, +this.getAttribute( "data-month" ), +this.getAttribute( "data-year" ), this );
					return false;
				},
				selectMonth: function() {
					$.datepicker._selectMonthYear( id, this, "M" );
					return false;
				},
				selectYear: function() {
					$.datepicker._selectMonthYear( id, this, "Y" );
					return false;
				}
			};
			$( this ).on( this.getAttribute( "data-event" ), handler[ this.getAttribute( "data-handler" ) ] );
		} );
	},

	/* Generate the HTML for the current state of the date picker. */
	_generateHTML: function( inst ) {
		var maxDraw, prevText, prev, nextText, next, currentText, gotoDate,
			controls, buttonPanel, firstDay, showWeek, dayNames, dayNamesMin,
			monthNames, monthNamesShort, beforeShowDay, showOtherMonths,
			selectOtherMonths, defaultDate, html, dow, row, group, col, selectedDate,
			cornerClass, calender, thead, day, daysInMonth, leadDays, curRows, numRows,
			printDate, dRow, tbody, daySettings, otherMonth, unselectable,
			tempDate = new Date(),
			today = this._daylightSavingAdjust(
				new Date( tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate() ) ), // clear time
			isRTL = this._get( inst, "isRTL" ),
			showButtonPanel = this._get( inst, "showButtonPanel" ),
			hideIfNoPrevNext = this._get( inst, "hideIfNoPrevNext" ),
			navigationAsDateFormat = this._get( inst, "navigationAsDateFormat" ),
			numMonths = this._getNumberOfMonths( inst ),
			showCurrentAtPos = this._get( inst, "showCurrentAtPos" ),
			stepMonths = this._get( inst, "stepMonths" ),
			isMultiMonth = ( numMonths[ 0 ] !== 1 || numMonths[ 1 ] !== 1 ),
			currentDate = this._daylightSavingAdjust( ( !inst.currentDay ? new Date( 9999, 9, 9 ) :
				new Date( inst.currentYear, inst.currentMonth, inst.currentDay ) ) ),
			minDate = this._getMinMaxDate( inst, "min" ),
			maxDate = this._getMinMaxDate( inst, "max" ),
			drawMonth = inst.drawMonth - showCurrentAtPos,
			drawYear = inst.drawYear;

		if ( drawMonth < 0 ) {
			drawMonth += 12;
			drawYear--;
		}
		if ( maxDate ) {
			maxDraw = this._daylightSavingAdjust( new Date( maxDate.getFullYear(),
				maxDate.getMonth() - ( numMonths[ 0 ] * numMonths[ 1 ] ) + 1, maxDate.getDate() ) );
			maxDraw = ( minDate && maxDraw < minDate ? minDate : maxDraw );
			while ( this._daylightSavingAdjust( new Date( drawYear, drawMonth, 1 ) ) > maxDraw ) {
				drawMonth--;
				if ( drawMonth < 0 ) {
					drawMonth = 11;
					drawYear--;
				}
			}
		}
		inst.drawMonth = drawMonth;
		inst.drawYear = drawYear;

		prevText = this._get( inst, "prevText" );
		prevText = ( !navigationAsDateFormat ? prevText : this.formatDate( prevText,
			this._daylightSavingAdjust( new Date( drawYear, drawMonth - stepMonths, 1 ) ),
			this._getFormatConfig( inst ) ) );

		prev = ( this._canAdjustMonth( inst, -1, drawYear, drawMonth ) ?
			"<a class='ui-datepicker-prev ui-corner-all' data-handler='prev' data-event='click'" +
			" title='" + prevText + "'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "e" : "w" ) + "'>" + prevText + "</span></a>" :
			( hideIfNoPrevNext ? "" : "<a class='ui-datepicker-prev ui-corner-all ui-state-disabled' title='" + prevText + "'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "e" : "w" ) + "'>" + prevText + "</span></a>" ) );

		nextText = this._get( inst, "nextText" );
		nextText = ( !navigationAsDateFormat ? nextText : this.formatDate( nextText,
			this._daylightSavingAdjust( new Date( drawYear, drawMonth + stepMonths, 1 ) ),
			this._getFormatConfig( inst ) ) );

		next = ( this._canAdjustMonth( inst, +1, drawYear, drawMonth ) ?
			"<a class='ui-datepicker-next ui-corner-all' data-handler='next' data-event='click'" +
			" title='" + nextText + "'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "w" : "e" ) + "'>" + nextText + "</span></a>" :
			( hideIfNoPrevNext ? "" : "<a class='ui-datepicker-next ui-corner-all ui-state-disabled' title='" + nextText + "'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "w" : "e" ) + "'>" + nextText + "</span></a>" ) );

		currentText = this._get( inst, "currentText" );
		gotoDate = ( this._get( inst, "gotoCurrent" ) && inst.currentDay ? currentDate : today );
		currentText = ( !navigationAsDateFormat ? currentText :
			this.formatDate( currentText, gotoDate, this._getFormatConfig( inst ) ) );

		controls = ( !inst.inline ? "<button type='button' class='ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all' data-handler='hide' data-event='click'>" +
			this._get( inst, "closeText" ) + "</button>" : "" );

		buttonPanel = ( showButtonPanel ) ? "<div class='ui-datepicker-buttonpane ui-widget-content'>" + ( isRTL ? controls : "" ) +
			( this._isInRange( inst, gotoDate ) ? "<button type='button' class='ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all' data-handler='today' data-event='click'" +
			">" + currentText + "</button>" : "" ) + ( isRTL ? "" : controls ) + "</div>" : "";

		firstDay = parseInt( this._get( inst, "firstDay" ), 10 );
		firstDay = ( isNaN( firstDay ) ? 0 : firstDay );

		showWeek = this._get( inst, "showWeek" );
		dayNames = this._get( inst, "dayNames" );
		dayNamesMin = this._get( inst, "dayNamesMin" );
		monthNames = this._get( inst, "monthNames" );
		monthNamesShort = this._get( inst, "monthNamesShort" );
		beforeShowDay = this._get( inst, "beforeShowDay" );
		showOtherMonths = this._get( inst, "showOtherMonths" );
		selectOtherMonths = this._get( inst, "selectOtherMonths" );
		defaultDate = this._getDefaultDate( inst );
		html = "";

		for ( row = 0; row < numMonths[ 0 ]; row++ ) {
			group = "";
			this.maxRows = 4;
			for ( col = 0; col < numMonths[ 1 ]; col++ ) {
				selectedDate = this._daylightSavingAdjust( new Date( drawYear, drawMonth, inst.selectedDay ) );
				cornerClass = " ui-corner-all";
				calender = "";
				if ( isMultiMonth ) {
					calender += "<div class='ui-datepicker-group";
					if ( numMonths[ 1 ] > 1 ) {
						switch ( col ) {
							case 0: calender += " ui-datepicker-group-first";
								cornerClass = " ui-corner-" + ( isRTL ? "right" : "left" ); break;
							case numMonths[ 1 ] - 1: calender += " ui-datepicker-group-last";
								cornerClass = " ui-corner-" + ( isRTL ? "left" : "right" ); break;
							default: calender += " ui-datepicker-group-middle"; cornerClass = ""; break;
						}
					}
					calender += "'>";
				}
				calender += "<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix" + cornerClass + "'>" +
					( /all|left/.test( cornerClass ) && row === 0 ? ( isRTL ? next : prev ) : "" ) +
					( /all|right/.test( cornerClass ) && row === 0 ? ( isRTL ? prev : next ) : "" ) +
					this._generateMonthYearHeader( inst, drawMonth, drawYear, minDate, maxDate,
					row > 0 || col > 0, monthNames, monthNamesShort ) + // draw month headers
					"</div><table class='ui-datepicker-calendar'><thead>" +
					"<tr>";
				thead = ( showWeek ? "<th class='ui-datepicker-week-col'>" + this._get( inst, "weekHeader" ) + "</th>" : "" );
				for ( dow = 0; dow < 7; dow++ ) { // days of the week
					day = ( dow + firstDay ) % 7;
					thead += "<th scope='col'" + ( ( dow + firstDay + 6 ) % 7 >= 5 ? " class='ui-datepicker-week-end'" : "" ) + ">" +
						"<span title='" + dayNames[ day ] + "'>" + dayNamesMin[ day ] + "</span></th>";
				}
				calender += thead + "</tr></thead><tbody>";
				daysInMonth = this._getDaysInMonth( drawYear, drawMonth );
				if ( drawYear === inst.selectedYear && drawMonth === inst.selectedMonth ) {
					inst.selectedDay = Math.min( inst.selectedDay, daysInMonth );
				}
				leadDays = ( this._getFirstDayOfMonth( drawYear, drawMonth ) - firstDay + 7 ) % 7;
				curRows = Math.ceil( ( leadDays + daysInMonth ) / 7 ); // calculate the number of rows to generate
				numRows = ( isMultiMonth ? this.maxRows > curRows ? this.maxRows : curRows : curRows ); //If multiple months, use the higher number of rows (see #7043)
				this.maxRows = numRows;
				printDate = this._daylightSavingAdjust( new Date( drawYear, drawMonth, 1 - leadDays ) );
				for ( dRow = 0; dRow < numRows; dRow++ ) { // create date picker rows
					calender += "<tr>";
					tbody = ( !showWeek ? "" : "<td class='ui-datepicker-week-col'>" +
						this._get( inst, "calculateWeek" )( printDate ) + "</td>" );
					for ( dow = 0; dow < 7; dow++ ) { // create date picker days
						daySettings = ( beforeShowDay ?
							beforeShowDay.apply( ( inst.input ? inst.input[ 0 ] : null ), [ printDate ] ) : [ true, "" ] );
						otherMonth = ( printDate.getMonth() !== drawMonth );
						unselectable = ( otherMonth && !selectOtherMonths ) || !daySettings[ 0 ] ||
							( minDate && printDate < minDate ) || ( maxDate && printDate > maxDate );
						tbody += "<td class='" +
							( ( dow + firstDay + 6 ) % 7 >= 5 ? " ui-datepicker-week-end" : "" ) + // highlight weekends
							( otherMonth ? " ui-datepicker-other-month" : "" ) + // highlight days from other months
							( ( printDate.getTime() === selectedDate.getTime() && drawMonth === inst.selectedMonth && inst._keyEvent ) || // user pressed key
							( defaultDate.getTime() === printDate.getTime() && defaultDate.getTime() === selectedDate.getTime() ) ?

							// or defaultDate is current printedDate and defaultDate is selectedDate
							" " + this._dayOverClass : "" ) + // highlight selected day
							( unselectable ? " " + this._unselectableClass + " ui-state-disabled" : "" ) +  // highlight unselectable days
							( otherMonth && !showOtherMonths ? "" : " " + daySettings[ 1 ] + // highlight custom dates
							( printDate.getTime() === currentDate.getTime() ? " " + this._currentClass : "" ) + // highlight selected day
							( printDate.getTime() === today.getTime() ? " ui-datepicker-today" : "" ) ) + "'" + // highlight today (if different)
							( ( !otherMonth || showOtherMonths ) && daySettings[ 2 ] ? " title='" + daySettings[ 2 ].replace( /'/g, "&#39;" ) + "'" : "" ) + // cell title
							( unselectable ? "" : " data-handler='selectDay' data-event='click' data-month='" + printDate.getMonth() + "' data-year='" + printDate.getFullYear() + "'" ) + ">" + // actions
							( otherMonth && !showOtherMonths ? "&#xa0;" : // display for other months
							( unselectable ? "<span class='ui-state-default'>" + printDate.getDate() + "</span>" : "<a class='ui-state-default" +
							( printDate.getTime() === today.getTime() ? " ui-state-highlight" : "" ) +
							( printDate.getTime() === currentDate.getTime() ? " ui-state-active" : "" ) + // highlight selected day
							( otherMonth ? " ui-priority-secondary" : "" ) + // distinguish dates from other months
							"' href='#'>" + printDate.getDate() + "</a>" ) ) + "</td>"; // display selectable date
						printDate.setDate( printDate.getDate() + 1 );
						printDate = this._daylightSavingAdjust( printDate );
					}
					calender += tbody + "</tr>";
				}
				drawMonth++;
				if ( drawMonth > 11 ) {
					drawMonth = 0;
					drawYear++;
				}
				calender += "</tbody></table>" + ( isMultiMonth ? "</div>" +
							( ( numMonths[ 0 ] > 0 && col === numMonths[ 1 ] - 1 ) ? "<div class='ui-datepicker-row-break'></div>" : "" ) : "" );
				group += calender;
			}
			html += group;
		}
		html += buttonPanel;
		inst._keyEvent = false;
		return html;
	},

	/* Generate the month and year header. */
	_generateMonthYearHeader: function( inst, drawMonth, drawYear, minDate, maxDate,
			secondary, monthNames, monthNamesShort ) {

		var inMinYear, inMaxYear, month, years, thisYear, determineYear, year, endYear,
			changeMonth = this._get( inst, "changeMonth" ),
			changeYear = this._get( inst, "changeYear" ),
			showMonthAfterYear = this._get( inst, "showMonthAfterYear" ),
			html = "<div class='ui-datepicker-title'>",
			monthHtml = "";

		// Month selection
		if ( secondary || !changeMonth ) {
			monthHtml += "<span class='ui-datepicker-month'>" + monthNames[ drawMonth ] + "</span>";
		} else {
			inMinYear = ( minDate && minDate.getFullYear() === drawYear );
			inMaxYear = ( maxDate && maxDate.getFullYear() === drawYear );
			monthHtml += "<select class='ui-datepicker-month' data-handler='selectMonth' data-event='change'>";
			for ( month = 0; month < 12; month++ ) {
				if ( ( !inMinYear || month >= minDate.getMonth() ) && ( !inMaxYear || month <= maxDate.getMonth() ) ) {
					monthHtml += "<option value='" + month + "'" +
						( month === drawMonth ? " selected='selected'" : "" ) +
						">" + monthNamesShort[ month ] + "</option>";
				}
			}
			monthHtml += "</select>";
		}

		if ( !showMonthAfterYear ) {
			html += monthHtml + ( secondary || !( changeMonth && changeYear ) ? "&#xa0;" : "" );
		}

		// Year selection
		if ( !inst.yearshtml ) {
			inst.yearshtml = "";
			if ( secondary || !changeYear ) {
				html += "<span class='ui-datepicker-year'>" + drawYear + "</span>";
			} else {

				// determine range of years to display
				years = this._get( inst, "yearRange" ).split( ":" );
				thisYear = new Date().getFullYear();
				determineYear = function( value ) {
					var year = ( value.match( /c[+\-].*/ ) ? drawYear + parseInt( value.substring( 1 ), 10 ) :
						( value.match( /[+\-].*/ ) ? thisYear + parseInt( value, 10 ) :
						parseInt( value, 10 ) ) );
					return ( isNaN( year ) ? thisYear : year );
				};
				year = determineYear( years[ 0 ] );
				endYear = Math.max( year, determineYear( years[ 1 ] || "" ) );
				year = ( minDate ? Math.max( year, minDate.getFullYear() ) : year );
				endYear = ( maxDate ? Math.min( endYear, maxDate.getFullYear() ) : endYear );
				inst.yearshtml += "<select class='ui-datepicker-year' data-handler='selectYear' data-event='change'>";
				for ( ; year <= endYear; year++ ) {
					inst.yearshtml += "<option value='" + year + "'" +
						( year === drawYear ? " selected='selected'" : "" ) +
						">" + year + "</option>";
				}
				inst.yearshtml += "</select>";

				html += inst.yearshtml;
				inst.yearshtml = null;
			}
		}

		html += this._get( inst, "yearSuffix" );
		if ( showMonthAfterYear ) {
			html += ( secondary || !( changeMonth && changeYear ) ? "&#xa0;" : "" ) + monthHtml;
		}
		html += "</div>"; // Close datepicker_header
		return html;
	},

	/* Adjust one of the date sub-fields. */
	_adjustInstDate: function( inst, offset, period ) {
		var year = inst.selectedYear + ( period === "Y" ? offset : 0 ),
			month = inst.selectedMonth + ( period === "M" ? offset : 0 ),
			day = Math.min( inst.selectedDay, this._getDaysInMonth( year, month ) ) + ( period === "D" ? offset : 0 ),
			date = this._restrictMinMax( inst, this._daylightSavingAdjust( new Date( year, month, day ) ) );

		inst.selectedDay = date.getDate();
		inst.drawMonth = inst.selectedMonth = date.getMonth();
		inst.drawYear = inst.selectedYear = date.getFullYear();
		if ( period === "M" || period === "Y" ) {
			this._notifyChange( inst );
		}
	},

	/* Ensure a date is within any min/max bounds. */
	_restrictMinMax: function( inst, date ) {
		var minDate = this._getMinMaxDate( inst, "min" ),
			maxDate = this._getMinMaxDate( inst, "max" ),
			newDate = ( minDate && date < minDate ? minDate : date );
		return ( maxDate && newDate > maxDate ? maxDate : newDate );
	},

	/* Notify change of month/year. */
	_notifyChange: function( inst ) {
		var onChange = this._get( inst, "onChangeMonthYear" );
		if ( onChange ) {
			onChange.apply( ( inst.input ? inst.input[ 0 ] : null ),
				[ inst.selectedYear, inst.selectedMonth + 1, inst ] );
		}
	},

	/* Determine the number of months to show. */
	_getNumberOfMonths: function( inst ) {
		var numMonths = this._get( inst, "numberOfMonths" );
		return ( numMonths == null ? [ 1, 1 ] : ( typeof numMonths === "number" ? [ 1, numMonths ] : numMonths ) );
	},

	/* Determine the current maximum date - ensure no time components are set. */
	_getMinMaxDate: function( inst, minMax ) {
		return this._determineDate( inst, this._get( inst, minMax + "Date" ), null );
	},

	/* Find the number of days in a given month. */
	_getDaysInMonth: function( year, month ) {
		return 32 - this._daylightSavingAdjust( new Date( year, month, 32 ) ).getDate();
	},

	/* Find the day of the week of the first of a month. */
	_getFirstDayOfMonth: function( year, month ) {
		return new Date( year, month, 1 ).getDay();
	},

	/* Determines if we should allow a "next/prev" month display change. */
	_canAdjustMonth: function( inst, offset, curYear, curMonth ) {
		var numMonths = this._getNumberOfMonths( inst ),
			date = this._daylightSavingAdjust( new Date( curYear,
			curMonth + ( offset < 0 ? offset : numMonths[ 0 ] * numMonths[ 1 ] ), 1 ) );

		if ( offset < 0 ) {
			date.setDate( this._getDaysInMonth( date.getFullYear(), date.getMonth() ) );
		}
		return this._isInRange( inst, date );
	},

	/* Is the given date in the accepted range? */
	_isInRange: function( inst, date ) {
		var yearSplit, currentYear,
			minDate = this._getMinMaxDate( inst, "min" ),
			maxDate = this._getMinMaxDate( inst, "max" ),
			minYear = null,
			maxYear = null,
			years = this._get( inst, "yearRange" );
			if ( years ) {
				yearSplit = years.split( ":" );
				currentYear = new Date().getFullYear();
				minYear = parseInt( yearSplit[ 0 ], 10 );
				maxYear = parseInt( yearSplit[ 1 ], 10 );
				if ( yearSplit[ 0 ].match( /[+\-].*/ ) ) {
					minYear += currentYear;
				}
				if ( yearSplit[ 1 ].match( /[+\-].*/ ) ) {
					maxYear += currentYear;
				}
			}

		return ( ( !minDate || date.getTime() >= minDate.getTime() ) &&
			( !maxDate || date.getTime() <= maxDate.getTime() ) &&
			( !minYear || date.getFullYear() >= minYear ) &&
			( !maxYear || date.getFullYear() <= maxYear ) );
	},

	/* Provide the configuration settings for formatting/parsing. */
	_getFormatConfig: function( inst ) {
		var shortYearCutoff = this._get( inst, "shortYearCutoff" );
		shortYearCutoff = ( typeof shortYearCutoff !== "string" ? shortYearCutoff :
			new Date().getFullYear() % 100 + parseInt( shortYearCutoff, 10 ) );
		return { shortYearCutoff: shortYearCutoff,
			dayNamesShort: this._get( inst, "dayNamesShort" ), dayNames: this._get( inst, "dayNames" ),
			monthNamesShort: this._get( inst, "monthNamesShort" ), monthNames: this._get( inst, "monthNames" ) };
	},

	/* Format the given date for display. */
	_formatDate: function( inst, day, month, year ) {
		if ( !day ) {
			inst.currentDay = inst.selectedDay;
			inst.currentMonth = inst.selectedMonth;
			inst.currentYear = inst.selectedYear;
		}
		var date = ( day ? ( typeof day === "object" ? day :
			this._daylightSavingAdjust( new Date( year, month, day ) ) ) :
			this._daylightSavingAdjust( new Date( inst.currentYear, inst.currentMonth, inst.currentDay ) ) );
		return this.formatDate( this._get( inst, "dateFormat" ), date, this._getFormatConfig( inst ) );
	}
} );

/*
 * Bind hover events for datepicker elements.
 * Done via delegate so the binding only occurs once in the lifetime of the parent div.
 * Global datepicker_instActive, set by _updateDatepicker allows the handlers to find their way back to the active picker.
 */
function datepicker_bindHover( dpDiv ) {
	var selector = "button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a";
	return dpDiv.on( "mouseout", selector, function() {
			$( this ).removeClass( "ui-state-hover" );
			if ( this.className.indexOf( "ui-datepicker-prev" ) !== -1 ) {
				$( this ).removeClass( "ui-datepicker-prev-hover" );
			}
			if ( this.className.indexOf( "ui-datepicker-next" ) !== -1 ) {
				$( this ).removeClass( "ui-datepicker-next-hover" );
			}
		} )
		.on( "mouseover", selector, datepicker_handleMouseover );
}

function datepicker_handleMouseover() {
	if ( !$.datepicker._isDisabledDatepicker( datepicker_instActive.inline ? datepicker_instActive.dpDiv.parent()[ 0 ] : datepicker_instActive.input[ 0 ] ) ) {
		$( this ).parents( ".ui-datepicker-calendar" ).find( "a" ).removeClass( "ui-state-hover" );
		$( this ).addClass( "ui-state-hover" );
		if ( this.className.indexOf( "ui-datepicker-prev" ) !== -1 ) {
			$( this ).addClass( "ui-datepicker-prev-hover" );
		}
		if ( this.className.indexOf( "ui-datepicker-next" ) !== -1 ) {
			$( this ).addClass( "ui-datepicker-next-hover" );
		}
	}
}

/* jQuery extend now ignores nulls! */
function datepicker_extendRemove( target, props ) {
	$.extend( target, props );
	for ( var name in props ) {
		if ( props[ name ] == null ) {
			target[ name ] = props[ name ];
		}
	}
	return target;
}

/* Invoke the datepicker functionality.
   @param  options  string - a command, optionally followed by additional parameters or
					Object - settings for attaching new datepicker functionality
   @return  jQuery object */
$.fn.datepicker = function( options ) {

	/* Verify an empty collection wasn't passed - Fixes #6976 */
	if ( !this.length ) {
		return this;
	}

	/* Initialise the date picker. */
	if ( !$.datepicker.initialized ) {
		$( document ).on( "mousedown", $.datepicker._checkExternalClick );
		$.datepicker.initialized = true;
	}

	/* Append datepicker main container to body if not exist. */
	if ( $( "#" + $.datepicker._mainDivId ).length === 0 ) {
		$( "body" ).append( $.datepicker.dpDiv );
	}

	var otherArgs = Array.prototype.slice.call( arguments, 1 );
	if ( typeof options === "string" && ( options === "isDisabled" || options === "getDate" || options === "widget" ) ) {
		return $.datepicker[ "_" + options + "Datepicker" ].
			apply( $.datepicker, [ this[ 0 ] ].concat( otherArgs ) );
	}
	if ( options === "option" && arguments.length === 2 && typeof arguments[ 1 ] === "string" ) {
		return $.datepicker[ "_" + options + "Datepicker" ].
			apply( $.datepicker, [ this[ 0 ] ].concat( otherArgs ) );
	}
	return this.each( function() {
		typeof options === "string" ?
			$.datepicker[ "_" + options + "Datepicker" ].
				apply( $.datepicker, [ this ].concat( otherArgs ) ) :
			$.datepicker._attachDatepicker( this, options );
	} );
};

$.datepicker = new Datepicker(); // singleton instance
$.datepicker.initialized = false;
$.datepicker.uuid = new Date().getTime();
$.datepicker.version = "1.12.1";

var widgetsDatepicker = $.datepicker;




// This file is deprecated
var ie = $.ui.ie = !!/msie [\w.]+/.exec( navigator.userAgent.toLowerCase() );

/*!
 * jQuery UI Mouse 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Mouse
//>>group: Widgets
//>>description: Abstracts mouse-based interactions to assist in creating certain widgets.
//>>docs: http://api.jqueryui.com/mouse/



var mouseHandled = false;
$( document ).on( "mouseup", function() {
	mouseHandled = false;
} );

var widgetsMouse = $.widget( "ui.mouse", {
	version: "1.12.1",
	options: {
		cancel: "input, textarea, button, select, option",
		distance: 1,
		delay: 0
	},
	_mouseInit: function() {
		var that = this;

		this.element
			.on( "mousedown." + this.widgetName, function( event ) {
				return that._mouseDown( event );
			} )
			.on( "click." + this.widgetName, function( event ) {
				if ( true === $.data( event.target, that.widgetName + ".preventClickEvent" ) ) {
					$.removeData( event.target, that.widgetName + ".preventClickEvent" );
					event.stopImmediatePropagation();
					return false;
				}
			} );

		this.started = false;
	},

	// TODO: make sure destroying one instance of mouse doesn't mess with
	// other instances of mouse
	_mouseDestroy: function() {
		this.element.off( "." + this.widgetName );
		if ( this._mouseMoveDelegate ) {
			this.document
				.off( "mousemove." + this.widgetName, this._mouseMoveDelegate )
				.off( "mouseup." + this.widgetName, this._mouseUpDelegate );
		}
	},

	_mouseDown: function( event ) {

		// don't let more than one widget handle mouseStart
		if ( mouseHandled ) {
			return;
		}

		this._mouseMoved = false;

		// We may have missed mouseup (out of window)
		( this._mouseStarted && this._mouseUp( event ) );

		this._mouseDownEvent = event;

		var that = this,
			btnIsLeft = ( event.which === 1 ),

			// event.target.nodeName works around a bug in IE 8 with
			// disabled inputs (#7620)
			elIsCancel = ( typeof this.options.cancel === "string" && event.target.nodeName ?
				$( event.target ).closest( this.options.cancel ).length : false );
		if ( !btnIsLeft || elIsCancel || !this._mouseCapture( event ) ) {
			return true;
		}

		this.mouseDelayMet = !this.options.delay;
		if ( !this.mouseDelayMet ) {
			this._mouseDelayTimer = setTimeout( function() {
				that.mouseDelayMet = true;
			}, this.options.delay );
		}

		if ( this._mouseDistanceMet( event ) && this._mouseDelayMet( event ) ) {
			this._mouseStarted = ( this._mouseStart( event ) !== false );
			if ( !this._mouseStarted ) {
				event.preventDefault();
				return true;
			}
		}

		// Click event may never have fired (Gecko & Opera)
		if ( true === $.data( event.target, this.widgetName + ".preventClickEvent" ) ) {
			$.removeData( event.target, this.widgetName + ".preventClickEvent" );
		}

		// These delegates are required to keep context
		this._mouseMoveDelegate = function( event ) {
			return that._mouseMove( event );
		};
		this._mouseUpDelegate = function( event ) {
			return that._mouseUp( event );
		};

		this.document
			.on( "mousemove." + this.widgetName, this._mouseMoveDelegate )
			.on( "mouseup." + this.widgetName, this._mouseUpDelegate );

		event.preventDefault();

		mouseHandled = true;
		return true;
	},

	_mouseMove: function( event ) {

		// Only check for mouseups outside the document if you've moved inside the document
		// at least once. This prevents the firing of mouseup in the case of IE<9, which will
		// fire a mousemove event if content is placed under the cursor. See #7778
		// Support: IE <9
		if ( this._mouseMoved ) {

			// IE mouseup check - mouseup happened when mouse was out of window
			if ( $.ui.ie && ( !document.documentMode || document.documentMode < 9 ) &&
					!event.button ) {
				return this._mouseUp( event );

			// Iframe mouseup check - mouseup occurred in another document
			} else if ( !event.which ) {

				// Support: Safari <=8 - 9
				// Safari sets which to 0 if you press any of the following keys
				// during a drag (#14461)
				if ( event.originalEvent.altKey || event.originalEvent.ctrlKey ||
						event.originalEvent.metaKey || event.originalEvent.shiftKey ) {
					this.ignoreMissingWhich = true;
				} else if ( !this.ignoreMissingWhich ) {
					return this._mouseUp( event );
				}
			}
		}

		if ( event.which || event.button ) {
			this._mouseMoved = true;
		}

		if ( this._mouseStarted ) {
			this._mouseDrag( event );
			return event.preventDefault();
		}

		if ( this._mouseDistanceMet( event ) && this._mouseDelayMet( event ) ) {
			this._mouseStarted =
				( this._mouseStart( this._mouseDownEvent, event ) !== false );
			( this._mouseStarted ? this._mouseDrag( event ) : this._mouseUp( event ) );
		}

		return !this._mouseStarted;
	},

	_mouseUp: function( event ) {
		this.document
			.off( "mousemove." + this.widgetName, this._mouseMoveDelegate )
			.off( "mouseup." + this.widgetName, this._mouseUpDelegate );

		if ( this._mouseStarted ) {
			this._mouseStarted = false;

			if ( event.target === this._mouseDownEvent.target ) {
				$.data( event.target, this.widgetName + ".preventClickEvent", true );
			}

			this._mouseStop( event );
		}

		if ( this._mouseDelayTimer ) {
			clearTimeout( this._mouseDelayTimer );
			delete this._mouseDelayTimer;
		}

		this.ignoreMissingWhich = false;
		mouseHandled = false;
		event.preventDefault();
	},

	_mouseDistanceMet: function( event ) {
		return ( Math.max(
				Math.abs( this._mouseDownEvent.pageX - event.pageX ),
				Math.abs( this._mouseDownEvent.pageY - event.pageY )
			) >= this.options.distance
		);
	},

	_mouseDelayMet: function( /* event */ ) {
		return this.mouseDelayMet;
	},

	// These are placeholder methods, to be overriden by extending plugin
	_mouseStart: function( /* event */ ) {},
	_mouseDrag: function( /* event */ ) {},
	_mouseStop: function( /* event */ ) {},
	_mouseCapture: function( /* event */ ) { return true; }
} );




// $.ui.plugin is deprecated. Use $.widget() extensions instead.
var plugin = $.ui.plugin = {
	add: function( module, option, set ) {
		var i,
			proto = $.ui[ module ].prototype;
		for ( i in set ) {
			proto.plugins[ i ] = proto.plugins[ i ] || [];
			proto.plugins[ i ].push( [ option, set[ i ] ] );
		}
	},
	call: function( instance, name, args, allowDisconnected ) {
		var i,
			set = instance.plugins[ name ];

		if ( !set ) {
			return;
		}

		if ( !allowDisconnected && ( !instance.element[ 0 ].parentNode ||
				instance.element[ 0 ].parentNode.nodeType === 11 ) ) {
			return;
		}

		for ( i = 0; i < set.length; i++ ) {
			if ( instance.options[ set[ i ][ 0 ] ] ) {
				set[ i ][ 1 ].apply( instance.element, args );
			}
		}
	}
};



var safeBlur = $.ui.safeBlur = function( element ) {

	// Support: IE9 - 10 only
	// If the <body> is blurred, IE will switch windows, see #9420
	if ( element && element.nodeName.toLowerCase() !== "body" ) {
		$( element ).trigger( "blur" );
	}
};


/*!
 * jQuery UI Draggable 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Draggable
//>>group: Interactions
//>>description: Enables dragging functionality for any element.
//>>docs: http://api.jqueryui.com/draggable/
//>>demos: http://jqueryui.com/draggable/
//>>css.structure: ../../themes/base/draggable.css



$.widget( "ui.draggable", $.ui.mouse, {
	version: "1.12.1",
	widgetEventPrefix: "drag",
	options: {
		addClasses: true,
		appendTo: "parent",
		axis: false,
		connectToSortable: false,
		containment: false,
		cursor: "auto",
		cursorAt: false,
		grid: false,
		handle: false,
		helper: "original",
		iframeFix: false,
		opacity: false,
		refreshPositions: false,
		revert: false,
		revertDuration: 500,
		scope: "default",
		scroll: true,
		scrollSensitivity: 20,
		scrollSpeed: 20,
		snap: false,
		snapMode: "both",
		snapTolerance: 20,
		stack: false,
		zIndex: false,

		// Callbacks
		drag: null,
		start: null,
		stop: null
	},
	_create: function() {

		if ( this.options.helper === "original" ) {
			this._setPositionRelative();
		}
		if ( this.options.addClasses ) {
			this._addClass( "ui-draggable" );
		}
		this._setHandleClassName();

		this._mouseInit();
	},

	_setOption: function( key, value ) {
		this._super( key, value );
		if ( key === "handle" ) {
			this._removeHandleClassName();
			this._setHandleClassName();
		}
	},

	_destroy: function() {
		if ( ( this.helper || this.element ).is( ".ui-draggable-dragging" ) ) {
			this.destroyOnClear = true;
			return;
		}
		this._removeHandleClassName();
		this._mouseDestroy();
	},

	_mouseCapture: function( event ) {
		var o = this.options;

		// Among others, prevent a drag on a resizable-handle
		if ( this.helper || o.disabled ||
				$( event.target ).closest( ".ui-resizable-handle" ).length > 0 ) {
			return false;
		}

		//Quit if we're not on a valid handle
		this.handle = this._getHandle( event );
		if ( !this.handle ) {
			return false;
		}

		this._blurActiveElement( event );

		this._blockFrames( o.iframeFix === true ? "iframe" : o.iframeFix );

		return true;

	},

	_blockFrames: function( selector ) {
		this.iframeBlocks = this.document.find( selector ).map( function() {
			var iframe = $( this );

			return $( "<div>" )
				.css( "position", "absolute" )
				.appendTo( iframe.parent() )
				.outerWidth( iframe.outerWidth() )
				.outerHeight( iframe.outerHeight() )
				.offset( iframe.offset() )[ 0 ];
		} );
	},

	_unblockFrames: function() {
		if ( this.iframeBlocks ) {
			this.iframeBlocks.remove();
			delete this.iframeBlocks;
		}
	},

	_blurActiveElement: function( event ) {
		var activeElement = $.ui.safeActiveElement( this.document[ 0 ] ),
			target = $( event.target );

		// Don't blur if the event occurred on an element that is within
		// the currently focused element
		// See #10527, #12472
		if ( target.closest( activeElement ).length ) {
			return;
		}

		// Blur any element that currently has focus, see #4261
		$.ui.safeBlur( activeElement );
	},

	_mouseStart: function( event ) {

		var o = this.options;

		//Create and append the visible helper
		this.helper = this._createHelper( event );

		this._addClass( this.helper, "ui-draggable-dragging" );

		//Cache the helper size
		this._cacheHelperProportions();

		//If ddmanager is used for droppables, set the global draggable
		if ( $.ui.ddmanager ) {
			$.ui.ddmanager.current = this;
		}

		/*
		 * - Position generation -
		 * This block generates everything position related - it's the core of draggables.
		 */

		//Cache the margins of the original element
		this._cacheMargins();

		//Store the helper's css position
		this.cssPosition = this.helper.css( "position" );
		this.scrollParent = this.helper.scrollParent( true );
		this.offsetParent = this.helper.offsetParent();
		this.hasFixedAncestor = this.helper.parents().filter( function() {
				return $( this ).css( "position" ) === "fixed";
			} ).length > 0;

		//The element's absolute position on the page minus margins
		this.positionAbs = this.element.offset();
		this._refreshOffsets( event );

		//Generate the original position
		this.originalPosition = this.position = this._generatePosition( event, false );
		this.originalPageX = event.pageX;
		this.originalPageY = event.pageY;

		//Adjust the mouse offset relative to the helper if "cursorAt" is supplied
		( o.cursorAt && this._adjustOffsetFromHelper( o.cursorAt ) );

		//Set a containment if given in the options
		this._setContainment();

		//Trigger event + callbacks
		if ( this._trigger( "start", event ) === false ) {
			this._clear();
			return false;
		}

		//Recache the helper size
		this._cacheHelperProportions();

		//Prepare the droppable offsets
		if ( $.ui.ddmanager && !o.dropBehaviour ) {
			$.ui.ddmanager.prepareOffsets( this, event );
		}

		// Execute the drag once - this causes the helper not to be visible before getting its
		// correct position
		this._mouseDrag( event, true );

		// If the ddmanager is used for droppables, inform the manager that dragging has started
		// (see #5003)
		if ( $.ui.ddmanager ) {
			$.ui.ddmanager.dragStart( this, event );
		}

		return true;
	},

	_refreshOffsets: function( event ) {
		this.offset = {
			top: this.positionAbs.top - this.margins.top,
			left: this.positionAbs.left - this.margins.left,
			scroll: false,
			parent: this._getParentOffset(),
			relative: this._getRelativeOffset()
		};

		this.offset.click = {
			left: event.pageX - this.offset.left,
			top: event.pageY - this.offset.top
		};
	},

	_mouseDrag: function( event, noPropagation ) {

		// reset any necessary cached properties (see #5009)
		if ( this.hasFixedAncestor ) {
			this.offset.parent = this._getParentOffset();
		}

		//Compute the helpers position
		this.position = this._generatePosition( event, true );
		this.positionAbs = this._convertPositionTo( "absolute" );

		//Call plugins and callbacks and use the resulting position if something is returned
		if ( !noPropagation ) {
			var ui = this._uiHash();
			if ( this._trigger( "drag", event, ui ) === false ) {
				this._mouseUp( new $.Event( "mouseup", event ) );
				return false;
			}
			this.position = ui.position;
		}

		this.helper[ 0 ].style.left = this.position.left + "px";
		this.helper[ 0 ].style.top = this.position.top + "px";

		if ( $.ui.ddmanager ) {
			$.ui.ddmanager.drag( this, event );
		}

		return false;
	},

	_mouseStop: function( event ) {

		//If we are using droppables, inform the manager about the drop
		var that = this,
			dropped = false;
		if ( $.ui.ddmanager && !this.options.dropBehaviour ) {
			dropped = $.ui.ddmanager.drop( this, event );
		}

		//if a drop comes from outside (a sortable)
		if ( this.dropped ) {
			dropped = this.dropped;
			this.dropped = false;
		}

		if ( ( this.options.revert === "invalid" && !dropped ) ||
				( this.options.revert === "valid" && dropped ) ||
				this.options.revert === true || ( $.isFunction( this.options.revert ) &&
				this.options.revert.call( this.element, dropped ) )
		) {
			$( this.helper ).animate(
				this.originalPosition,
				parseInt( this.options.revertDuration, 10 ),
				function() {
					if ( that._trigger( "stop", event ) !== false ) {
						that._clear();
					}
				}
			);
		} else {
			if ( this._trigger( "stop", event ) !== false ) {
				this._clear();
			}
		}

		return false;
	},

	_mouseUp: function( event ) {
		this._unblockFrames();

		// If the ddmanager is used for droppables, inform the manager that dragging has stopped
		// (see #5003)
		if ( $.ui.ddmanager ) {
			$.ui.ddmanager.dragStop( this, event );
		}

		// Only need to focus if the event occurred on the draggable itself, see #10527
		if ( this.handleElement.is( event.target ) ) {

			// The interaction is over; whether or not the click resulted in a drag,
			// focus the element
			this.element.trigger( "focus" );
		}

		return $.ui.mouse.prototype._mouseUp.call( this, event );
	},

	cancel: function() {

		if ( this.helper.is( ".ui-draggable-dragging" ) ) {
			this._mouseUp( new $.Event( "mouseup", { target: this.element[ 0 ] } ) );
		} else {
			this._clear();
		}

		return this;

	},

	_getHandle: function( event ) {
		return this.options.handle ?
			!!$( event.target ).closest( this.element.find( this.options.handle ) ).length :
			true;
	},

	_setHandleClassName: function() {
		this.handleElement = this.options.handle ?
			this.element.find( this.options.handle ) : this.element;
		this._addClass( this.handleElement, "ui-draggable-handle" );
	},

	_removeHandleClassName: function() {
		this._removeClass( this.handleElement, "ui-draggable-handle" );
	},

	_createHelper: function( event ) {

		var o = this.options,
			helperIsFunction = $.isFunction( o.helper ),
			helper = helperIsFunction ?
				$( o.helper.apply( this.element[ 0 ], [ event ] ) ) :
				( o.helper === "clone" ?
					this.element.clone().removeAttr( "id" ) :
					this.element );

		if ( !helper.parents( "body" ).length ) {
			helper.appendTo( ( o.appendTo === "parent" ?
				this.element[ 0 ].parentNode :
				o.appendTo ) );
		}

		// Http://bugs.jqueryui.com/ticket/9446
		// a helper function can return the original element
		// which wouldn't have been set to relative in _create
		if ( helperIsFunction && helper[ 0 ] === this.element[ 0 ] ) {
			this._setPositionRelative();
		}

		if ( helper[ 0 ] !== this.element[ 0 ] &&
				!( /(fixed|absolute)/ ).test( helper.css( "position" ) ) ) {
			helper.css( "position", "absolute" );
		}

		return helper;

	},

	_setPositionRelative: function() {
		if ( !( /^(?:r|a|f)/ ).test( this.element.css( "position" ) ) ) {
			this.element[ 0 ].style.position = "relative";
		}
	},

	_adjustOffsetFromHelper: function( obj ) {
		if ( typeof obj === "string" ) {
			obj = obj.split( " " );
		}
		if ( $.isArray( obj ) ) {
			obj = { left: +obj[ 0 ], top: +obj[ 1 ] || 0 };
		}
		if ( "left" in obj ) {
			this.offset.click.left = obj.left + this.margins.left;
		}
		if ( "right" in obj ) {
			this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
		}
		if ( "top" in obj ) {
			this.offset.click.top = obj.top + this.margins.top;
		}
		if ( "bottom" in obj ) {
			this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
		}
	},

	_isRootNode: function( element ) {
		return ( /(html|body)/i ).test( element.tagName ) || element === this.document[ 0 ];
	},

	_getParentOffset: function() {

		//Get the offsetParent and cache its position
		var po = this.offsetParent.offset(),
			document = this.document[ 0 ];

		// This is a special case where we need to modify a offset calculated on start, since the
		// following happened:
		// 1. The position of the helper is absolute, so it's position is calculated based on the
		// next positioned parent
		// 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't
		// the document, which means that the scroll is included in the initial calculation of the
		// offset of the parent, and never recalculated upon drag
		if ( this.cssPosition === "absolute" && this.scrollParent[ 0 ] !== document &&
				$.contains( this.scrollParent[ 0 ], this.offsetParent[ 0 ] ) ) {
			po.left += this.scrollParent.scrollLeft();
			po.top += this.scrollParent.scrollTop();
		}

		if ( this._isRootNode( this.offsetParent[ 0 ] ) ) {
			po = { top: 0, left: 0 };
		}

		return {
			top: po.top + ( parseInt( this.offsetParent.css( "borderTopWidth" ), 10 ) || 0 ),
			left: po.left + ( parseInt( this.offsetParent.css( "borderLeftWidth" ), 10 ) || 0 )
		};

	},

	_getRelativeOffset: function() {
		if ( this.cssPosition !== "relative" ) {
			return { top: 0, left: 0 };
		}

		var p = this.element.position(),
			scrollIsRootNode = this._isRootNode( this.scrollParent[ 0 ] );

		return {
			top: p.top - ( parseInt( this.helper.css( "top" ), 10 ) || 0 ) +
				( !scrollIsRootNode ? this.scrollParent.scrollTop() : 0 ),
			left: p.left - ( parseInt( this.helper.css( "left" ), 10 ) || 0 ) +
				( !scrollIsRootNode ? this.scrollParent.scrollLeft() : 0 )
		};

	},

	_cacheMargins: function() {
		this.margins = {
			left: ( parseInt( this.element.css( "marginLeft" ), 10 ) || 0 ),
			top: ( parseInt( this.element.css( "marginTop" ), 10 ) || 0 ),
			right: ( parseInt( this.element.css( "marginRight" ), 10 ) || 0 ),
			bottom: ( parseInt( this.element.css( "marginBottom" ), 10 ) || 0 )
		};
	},

	_cacheHelperProportions: function() {
		this.helperProportions = {
			width: this.helper.outerWidth(),
			height: this.helper.outerHeight()
		};
	},

	_setContainment: function() {

		var isUserScrollable, c, ce,
			o = this.options,
			document = this.document[ 0 ];

		this.relativeContainer = null;

		if ( !o.containment ) {
			this.containment = null;
			return;
		}

		if ( o.containment === "window" ) {
			this.containment = [
				$( window ).scrollLeft() - this.offset.relative.left - this.offset.parent.left,
				$( window ).scrollTop() - this.offset.relative.top - this.offset.parent.top,
				$( window ).scrollLeft() + $( window ).width() -
					this.helperProportions.width - this.margins.left,
				$( window ).scrollTop() +
					( $( window ).height() || document.body.parentNode.scrollHeight ) -
					this.helperProportions.height - this.margins.top
			];
			return;
		}

		if ( o.containment === "document" ) {
			this.containment = [
				0,
				0,
				$( document ).width() - this.helperProportions.width - this.margins.left,
				( $( document ).height() || document.body.parentNode.scrollHeight ) -
					this.helperProportions.height - this.margins.top
			];
			return;
		}

		if ( o.containment.constructor === Array ) {
			this.containment = o.containment;
			return;
		}

		if ( o.containment === "parent" ) {
			o.containment = this.helper[ 0 ].parentNode;
		}

		c = $( o.containment );
		ce = c[ 0 ];

		if ( !ce ) {
			return;
		}

		isUserScrollable = /(scroll|auto)/.test( c.css( "overflow" ) );

		this.containment = [
			( parseInt( c.css( "borderLeftWidth" ), 10 ) || 0 ) +
				( parseInt( c.css( "paddingLeft" ), 10 ) || 0 ),
			( parseInt( c.css( "borderTopWidth" ), 10 ) || 0 ) +
				( parseInt( c.css( "paddingTop" ), 10 ) || 0 ),
			( isUserScrollable ? Math.max( ce.scrollWidth, ce.offsetWidth ) : ce.offsetWidth ) -
				( parseInt( c.css( "borderRightWidth" ), 10 ) || 0 ) -
				( parseInt( c.css( "paddingRight" ), 10 ) || 0 ) -
				this.helperProportions.width -
				this.margins.left -
				this.margins.right,
			( isUserScrollable ? Math.max( ce.scrollHeight, ce.offsetHeight ) : ce.offsetHeight ) -
				( parseInt( c.css( "borderBottomWidth" ), 10 ) || 0 ) -
				( parseInt( c.css( "paddingBottom" ), 10 ) || 0 ) -
				this.helperProportions.height -
				this.margins.top -
				this.margins.bottom
		];
		this.relativeContainer = c;
	},

	_convertPositionTo: function( d, pos ) {

		if ( !pos ) {
			pos = this.position;
		}

		var mod = d === "absolute" ? 1 : -1,
			scrollIsRootNode = this._isRootNode( this.scrollParent[ 0 ] );

		return {
			top: (

				// The absolute mouse position
				pos.top	+

				// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.relative.top * mod +

				// The offsetParent's offset without borders (offset + border)
				this.offset.parent.top * mod -
				( ( this.cssPosition === "fixed" ?
					-this.offset.scroll.top :
					( scrollIsRootNode ? 0 : this.offset.scroll.top ) ) * mod )
			),
			left: (

				// The absolute mouse position
				pos.left +

				// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.relative.left * mod +

				// The offsetParent's offset without borders (offset + border)
				this.offset.parent.left * mod	-
				( ( this.cssPosition === "fixed" ?
					-this.offset.scroll.left :
					( scrollIsRootNode ? 0 : this.offset.scroll.left ) ) * mod )
			)
		};

	},

	_generatePosition: function( event, constrainPosition ) {

		var containment, co, top, left,
			o = this.options,
			scrollIsRootNode = this._isRootNode( this.scrollParent[ 0 ] ),
			pageX = event.pageX,
			pageY = event.pageY;

		// Cache the scroll
		if ( !scrollIsRootNode || !this.offset.scroll ) {
			this.offset.scroll = {
				top: this.scrollParent.scrollTop(),
				left: this.scrollParent.scrollLeft()
			};
		}

		/*
		 * - Position constraining -
		 * Constrain the position to a mix of grid, containment.
		 */

		// If we are not dragging yet, we won't check for options
		if ( constrainPosition ) {
			if ( this.containment ) {
				if ( this.relativeContainer ) {
					co = this.relativeContainer.offset();
					containment = [
						this.containment[ 0 ] + co.left,
						this.containment[ 1 ] + co.top,
						this.containment[ 2 ] + co.left,
						this.containment[ 3 ] + co.top
					];
				} else {
					containment = this.containment;
				}

				if ( event.pageX - this.offset.click.left < containment[ 0 ] ) {
					pageX = containment[ 0 ] + this.offset.click.left;
				}
				if ( event.pageY - this.offset.click.top < containment[ 1 ] ) {
					pageY = containment[ 1 ] + this.offset.click.top;
				}
				if ( event.pageX - this.offset.click.left > containment[ 2 ] ) {
					pageX = containment[ 2 ] + this.offset.click.left;
				}
				if ( event.pageY - this.offset.click.top > containment[ 3 ] ) {
					pageY = containment[ 3 ] + this.offset.click.top;
				}
			}

			if ( o.grid ) {

				//Check for grid elements set to 0 to prevent divide by 0 error causing invalid
				// argument errors in IE (see ticket #6950)
				top = o.grid[ 1 ] ? this.originalPageY + Math.round( ( pageY -
					this.originalPageY ) / o.grid[ 1 ] ) * o.grid[ 1 ] : this.originalPageY;
				pageY = containment ? ( ( top - this.offset.click.top >= containment[ 1 ] ||
					top - this.offset.click.top > containment[ 3 ] ) ?
						top :
						( ( top - this.offset.click.top >= containment[ 1 ] ) ?
							top - o.grid[ 1 ] : top + o.grid[ 1 ] ) ) : top;

				left = o.grid[ 0 ] ? this.originalPageX +
					Math.round( ( pageX - this.originalPageX ) / o.grid[ 0 ] ) * o.grid[ 0 ] :
					this.originalPageX;
				pageX = containment ? ( ( left - this.offset.click.left >= containment[ 0 ] ||
					left - this.offset.click.left > containment[ 2 ] ) ?
						left :
						( ( left - this.offset.click.left >= containment[ 0 ] ) ?
							left - o.grid[ 0 ] : left + o.grid[ 0 ] ) ) : left;
			}

			if ( o.axis === "y" ) {
				pageX = this.originalPageX;
			}

			if ( o.axis === "x" ) {
				pageY = this.originalPageY;
			}
		}

		return {
			top: (

				// The absolute mouse position
				pageY -

				// Click offset (relative to the element)
				this.offset.click.top -

				// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.relative.top -

				// The offsetParent's offset without borders (offset + border)
				this.offset.parent.top +
				( this.cssPosition === "fixed" ?
					-this.offset.scroll.top :
					( scrollIsRootNode ? 0 : this.offset.scroll.top ) )
			),
			left: (

				// The absolute mouse position
				pageX -

				// Click offset (relative to the element)
				this.offset.click.left -

				// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.relative.left -

				// The offsetParent's offset without borders (offset + border)
				this.offset.parent.left +
				( this.cssPosition === "fixed" ?
					-this.offset.scroll.left :
					( scrollIsRootNode ? 0 : this.offset.scroll.left ) )
			)
		};

	},

	_clear: function() {
		this._removeClass( this.helper, "ui-draggable-dragging" );
		if ( this.helper[ 0 ] !== this.element[ 0 ] && !this.cancelHelperRemoval ) {
			this.helper.remove();
		}
		this.helper = null;
		this.cancelHelperRemoval = false;
		if ( this.destroyOnClear ) {
			this.destroy();
		}
	},

	// From now on bulk stuff - mainly helpers

	_trigger: function( type, event, ui ) {
		ui = ui || this._uiHash();
		$.ui.plugin.call( this, type, [ event, ui, this ], true );

		// Absolute position and offset (see #6884 ) have to be recalculated after plugins
		if ( /^(drag|start|stop)/.test( type ) ) {
			this.positionAbs = this._convertPositionTo( "absolute" );
			ui.offset = this.positionAbs;
		}
		return $.Widget.prototype._trigger.call( this, type, event, ui );
	},

	plugins: {},

	_uiHash: function() {
		return {
			helper: this.helper,
			position: this.position,
			originalPosition: this.originalPosition,
			offset: this.positionAbs
		};
	}

} );

$.ui.plugin.add( "draggable", "connectToSortable", {
	start: function( event, ui, draggable ) {
		var uiSortable = $.extend( {}, ui, {
			item: draggable.element
		} );

		draggable.sortables = [];
		$( draggable.options.connectToSortable ).each( function() {
			var sortable = $( this ).sortable( "instance" );

			if ( sortable && !sortable.options.disabled ) {
				draggable.sortables.push( sortable );

				// RefreshPositions is called at drag start to refresh the containerCache
				// which is used in drag. This ensures it's initialized and synchronized
				// with any changes that might have happened on the page since initialization.
				sortable.refreshPositions();
				sortable._trigger( "activate", event, uiSortable );
			}
		} );
	},
	stop: function( event, ui, draggable ) {
		var uiSortable = $.extend( {}, ui, {
			item: draggable.element
		} );

		draggable.cancelHelperRemoval = false;

		$.each( draggable.sortables, function() {
			var sortable = this;

			if ( sortable.isOver ) {
				sortable.isOver = 0;

				// Allow this sortable to handle removing the helper
				draggable.cancelHelperRemoval = true;
				sortable.cancelHelperRemoval = false;

				// Use _storedCSS To restore properties in the sortable,
				// as this also handles revert (#9675) since the draggable
				// may have modified them in unexpected ways (#8809)
				sortable._storedCSS = {
					position: sortable.placeholder.css( "position" ),
					top: sortable.placeholder.css( "top" ),
					left: sortable.placeholder.css( "left" )
				};

				sortable._mouseStop( event );

				// Once drag has ended, the sortable should return to using
				// its original helper, not the shared helper from draggable
				sortable.options.helper = sortable.options._helper;
			} else {

				// Prevent this Sortable from removing the helper.
				// However, don't set the draggable to remove the helper
				// either as another connected Sortable may yet handle the removal.
				sortable.cancelHelperRemoval = true;

				sortable._trigger( "deactivate", event, uiSortable );
			}
		} );
	},
	drag: function( event, ui, draggable ) {
		$.each( draggable.sortables, function() {
			var innermostIntersecting = false,
				sortable = this;

			// Copy over variables that sortable's _intersectsWith uses
			sortable.positionAbs = draggable.positionAbs;
			sortable.helperProportions = draggable.helperProportions;
			sortable.offset.click = draggable.offset.click;

			if ( sortable._intersectsWith( sortable.containerCache ) ) {
				innermostIntersecting = true;

				$.each( draggable.sortables, function() {

					// Copy over variables that sortable's _intersectsWith uses
					this.positionAbs = draggable.positionAbs;
					this.helperProportions = draggable.helperProportions;
					this.offset.click = draggable.offset.click;

					if ( this !== sortable &&
							this._intersectsWith( this.containerCache ) &&
							$.contains( sortable.element[ 0 ], this.element[ 0 ] ) ) {
						innermostIntersecting = false;
					}

					return innermostIntersecting;
				} );
			}

			if ( innermostIntersecting ) {

				// If it intersects, we use a little isOver variable and set it once,
				// so that the move-in stuff gets fired only once.
				if ( !sortable.isOver ) {
					sortable.isOver = 1;

					// Store draggable's parent in case we need to reappend to it later.
					draggable._parent = ui.helper.parent();

					sortable.currentItem = ui.helper
						.appendTo( sortable.element )
						.data( "ui-sortable-item", true );

					// Store helper option to later restore it
					sortable.options._helper = sortable.options.helper;

					sortable.options.helper = function() {
						return ui.helper[ 0 ];
					};

					// Fire the start events of the sortable with our passed browser event,
					// and our own helper (so it doesn't create a new one)
					event.target = sortable.currentItem[ 0 ];
					sortable._mouseCapture( event, true );
					sortable._mouseStart( event, true, true );

					// Because the browser event is way off the new appended portlet,
					// modify necessary variables to reflect the changes
					sortable.offset.click.top = draggable.offset.click.top;
					sortable.offset.click.left = draggable.offset.click.left;
					sortable.offset.parent.left -= draggable.offset.parent.left -
						sortable.offset.parent.left;
					sortable.offset.parent.top -= draggable.offset.parent.top -
						sortable.offset.parent.top;

					draggable._trigger( "toSortable", event );

					// Inform draggable that the helper is in a valid drop zone,
					// used solely in the revert option to handle "valid/invalid".
					draggable.dropped = sortable.element;

					// Need to refreshPositions of all sortables in the case that
					// adding to one sortable changes the location of the other sortables (#9675)
					$.each( draggable.sortables, function() {
						this.refreshPositions();
					} );

					// Hack so receive/update callbacks work (mostly)
					draggable.currentItem = draggable.element;
					sortable.fromOutside = draggable;
				}

				if ( sortable.currentItem ) {
					sortable._mouseDrag( event );

					// Copy the sortable's position because the draggable's can potentially reflect
					// a relative position, while sortable is always absolute, which the dragged
					// element has now become. (#8809)
					ui.position = sortable.position;
				}
			} else {

				// If it doesn't intersect with the sortable, and it intersected before,
				// we fake the drag stop of the sortable, but make sure it doesn't remove
				// the helper by using cancelHelperRemoval.
				if ( sortable.isOver ) {

					sortable.isOver = 0;
					sortable.cancelHelperRemoval = true;

					// Calling sortable's mouseStop would trigger a revert,
					// so revert must be temporarily false until after mouseStop is called.
					sortable.options._revert = sortable.options.revert;
					sortable.options.revert = false;

					sortable._trigger( "out", event, sortable._uiHash( sortable ) );
					sortable._mouseStop( event, true );

					// Restore sortable behaviors that were modfied
					// when the draggable entered the sortable area (#9481)
					sortable.options.revert = sortable.options._revert;
					sortable.options.helper = sortable.options._helper;

					if ( sortable.placeholder ) {
						sortable.placeholder.remove();
					}

					// Restore and recalculate the draggable's offset considering the sortable
					// may have modified them in unexpected ways. (#8809, #10669)
					ui.helper.appendTo( draggable._parent );
					draggable._refreshOffsets( event );
					ui.position = draggable._generatePosition( event, true );

					draggable._trigger( "fromSortable", event );

					// Inform draggable that the helper is no longer in a valid drop zone
					draggable.dropped = false;

					// Need to refreshPositions of all sortables just in case removing
					// from one sortable changes the location of other sortables (#9675)
					$.each( draggable.sortables, function() {
						this.refreshPositions();
					} );
				}
			}
		} );
	}
} );

$.ui.plugin.add( "draggable", "cursor", {
	start: function( event, ui, instance ) {
		var t = $( "body" ),
			o = instance.options;

		if ( t.css( "cursor" ) ) {
			o._cursor = t.css( "cursor" );
		}
		t.css( "cursor", o.cursor );
	},
	stop: function( event, ui, instance ) {
		var o = instance.options;
		if ( o._cursor ) {
			$( "body" ).css( "cursor", o._cursor );
		}
	}
} );

$.ui.plugin.add( "draggable", "opacity", {
	start: function( event, ui, instance ) {
		var t = $( ui.helper ),
			o = instance.options;
		if ( t.css( "opacity" ) ) {
			o._opacity = t.css( "opacity" );
		}
		t.css( "opacity", o.opacity );
	},
	stop: function( event, ui, instance ) {
		var o = instance.options;
		if ( o._opacity ) {
			$( ui.helper ).css( "opacity", o._opacity );
		}
	}
} );

$.ui.plugin.add( "draggable", "scroll", {
	start: function( event, ui, i ) {
		if ( !i.scrollParentNotHidden ) {
			i.scrollParentNotHidden = i.helper.scrollParent( false );
		}

		if ( i.scrollParentNotHidden[ 0 ] !== i.document[ 0 ] &&
				i.scrollParentNotHidden[ 0 ].tagName !== "HTML" ) {
			i.overflowOffset = i.scrollParentNotHidden.offset();
		}
	},
	drag: function( event, ui, i  ) {

		var o = i.options,
			scrolled = false,
			scrollParent = i.scrollParentNotHidden[ 0 ],
			document = i.document[ 0 ];

		if ( scrollParent !== document && scrollParent.tagName !== "HTML" ) {
			if ( !o.axis || o.axis !== "x" ) {
				if ( ( i.overflowOffset.top + scrollParent.offsetHeight ) - event.pageY <
						o.scrollSensitivity ) {
					scrollParent.scrollTop = scrolled = scrollParent.scrollTop + o.scrollSpeed;
				} else if ( event.pageY - i.overflowOffset.top < o.scrollSensitivity ) {
					scrollParent.scrollTop = scrolled = scrollParent.scrollTop - o.scrollSpeed;
				}
			}

			if ( !o.axis || o.axis !== "y" ) {
				if ( ( i.overflowOffset.left + scrollParent.offsetWidth ) - event.pageX <
						o.scrollSensitivity ) {
					scrollParent.scrollLeft = scrolled = scrollParent.scrollLeft + o.scrollSpeed;
				} else if ( event.pageX - i.overflowOffset.left < o.scrollSensitivity ) {
					scrollParent.scrollLeft = scrolled = scrollParent.scrollLeft - o.scrollSpeed;
				}
			}

		} else {

			if ( !o.axis || o.axis !== "x" ) {
				if ( event.pageY - $( document ).scrollTop() < o.scrollSensitivity ) {
					scrolled = $( document ).scrollTop( $( document ).scrollTop() - o.scrollSpeed );
				} else if ( $( window ).height() - ( event.pageY - $( document ).scrollTop() ) <
						o.scrollSensitivity ) {
					scrolled = $( document ).scrollTop( $( document ).scrollTop() + o.scrollSpeed );
				}
			}

			if ( !o.axis || o.axis !== "y" ) {
				if ( event.pageX - $( document ).scrollLeft() < o.scrollSensitivity ) {
					scrolled = $( document ).scrollLeft(
						$( document ).scrollLeft() - o.scrollSpeed
					);
				} else if ( $( window ).width() - ( event.pageX - $( document ).scrollLeft() ) <
						o.scrollSensitivity ) {
					scrolled = $( document ).scrollLeft(
						$( document ).scrollLeft() + o.scrollSpeed
					);
				}
			}

		}

		if ( scrolled !== false && $.ui.ddmanager && !o.dropBehaviour ) {
			$.ui.ddmanager.prepareOffsets( i, event );
		}

	}
} );

$.ui.plugin.add( "draggable", "snap", {
	start: function( event, ui, i ) {

		var o = i.options;

		i.snapElements = [];

		$( o.snap.constructor !== String ? ( o.snap.items || ":data(ui-draggable)" ) : o.snap )
			.each( function() {
				var $t = $( this ),
					$o = $t.offset();
				if ( this !== i.element[ 0 ] ) {
					i.snapElements.push( {
						item: this,
						width: $t.outerWidth(), height: $t.outerHeight(),
						top: $o.top, left: $o.left
					} );
				}
			} );

	},
	drag: function( event, ui, inst ) {

		var ts, bs, ls, rs, l, r, t, b, i, first,
			o = inst.options,
			d = o.snapTolerance,
			x1 = ui.offset.left, x2 = x1 + inst.helperProportions.width,
			y1 = ui.offset.top, y2 = y1 + inst.helperProportions.height;

		for ( i = inst.snapElements.length - 1; i >= 0; i-- ) {

			l = inst.snapElements[ i ].left - inst.margins.left;
			r = l + inst.snapElements[ i ].width;
			t = inst.snapElements[ i ].top - inst.margins.top;
			b = t + inst.snapElements[ i ].height;

			if ( x2 < l - d || x1 > r + d || y2 < t - d || y1 > b + d ||
					!$.contains( inst.snapElements[ i ].item.ownerDocument,
					inst.snapElements[ i ].item ) ) {
				if ( inst.snapElements[ i ].snapping ) {
					( inst.options.snap.release &&
						inst.options.snap.release.call(
							inst.element,
							event,
							$.extend( inst._uiHash(), { snapItem: inst.snapElements[ i ].item } )
						) );
				}
				inst.snapElements[ i ].snapping = false;
				continue;
			}

			if ( o.snapMode !== "inner" ) {
				ts = Math.abs( t - y2 ) <= d;
				bs = Math.abs( b - y1 ) <= d;
				ls = Math.abs( l - x2 ) <= d;
				rs = Math.abs( r - x1 ) <= d;
				if ( ts ) {
					ui.position.top = inst._convertPositionTo( "relative", {
						top: t - inst.helperProportions.height,
						left: 0
					} ).top;
				}
				if ( bs ) {
					ui.position.top = inst._convertPositionTo( "relative", {
						top: b,
						left: 0
					} ).top;
				}
				if ( ls ) {
					ui.position.left = inst._convertPositionTo( "relative", {
						top: 0,
						left: l - inst.helperProportions.width
					} ).left;
				}
				if ( rs ) {
					ui.position.left = inst._convertPositionTo( "relative", {
						top: 0,
						left: r
					} ).left;
				}
			}

			first = ( ts || bs || ls || rs );

			if ( o.snapMode !== "outer" ) {
				ts = Math.abs( t - y1 ) <= d;
				bs = Math.abs( b - y2 ) <= d;
				ls = Math.abs( l - x1 ) <= d;
				rs = Math.abs( r - x2 ) <= d;
				if ( ts ) {
					ui.position.top = inst._convertPositionTo( "relative", {
						top: t,
						left: 0
					} ).top;
				}
				if ( bs ) {
					ui.position.top = inst._convertPositionTo( "relative", {
						top: b - inst.helperProportions.height,
						left: 0
					} ).top;
				}
				if ( ls ) {
					ui.position.left = inst._convertPositionTo( "relative", {
						top: 0,
						left: l
					} ).left;
				}
				if ( rs ) {
					ui.position.left = inst._convertPositionTo( "relative", {
						top: 0,
						left: r - inst.helperProportions.width
					} ).left;
				}
			}

			if ( !inst.snapElements[ i ].snapping && ( ts || bs || ls || rs || first ) ) {
				( inst.options.snap.snap &&
					inst.options.snap.snap.call(
						inst.element,
						event,
						$.extend( inst._uiHash(), {
							snapItem: inst.snapElements[ i ].item
						} ) ) );
			}
			inst.snapElements[ i ].snapping = ( ts || bs || ls || rs || first );

		}

	}
} );

$.ui.plugin.add( "draggable", "stack", {
	start: function( event, ui, instance ) {
		var min,
			o = instance.options,
			group = $.makeArray( $( o.stack ) ).sort( function( a, b ) {
				return ( parseInt( $( a ).css( "zIndex" ), 10 ) || 0 ) -
					( parseInt( $( b ).css( "zIndex" ), 10 ) || 0 );
			} );

		if ( !group.length ) { return; }

		min = parseInt( $( group[ 0 ] ).css( "zIndex" ), 10 ) || 0;
		$( group ).each( function( i ) {
			$( this ).css( "zIndex", min + i );
		} );
		this.css( "zIndex", ( min + group.length ) );
	}
} );

$.ui.plugin.add( "draggable", "zIndex", {
	start: function( event, ui, instance ) {
		var t = $( ui.helper ),
			o = instance.options;

		if ( t.css( "zIndex" ) ) {
			o._zIndex = t.css( "zIndex" );
		}
		t.css( "zIndex", o.zIndex );
	},
	stop: function( event, ui, instance ) {
		var o = instance.options;

		if ( o._zIndex ) {
			$( ui.helper ).css( "zIndex", o._zIndex );
		}
	}
} );

var widgetsDraggable = $.ui.draggable;


/*!
 * jQuery UI Resizable 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Resizable
//>>group: Interactions
//>>description: Enables resize functionality for any element.
//>>docs: http://api.jqueryui.com/resizable/
//>>demos: http://jqueryui.com/resizable/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/resizable.css
//>>css.theme: ../../themes/base/theme.css



$.widget( "ui.resizable", $.ui.mouse, {
	version: "1.12.1",
	widgetEventPrefix: "resize",
	options: {
		alsoResize: false,
		animate: false,
		animateDuration: "slow",
		animateEasing: "swing",
		aspectRatio: false,
		autoHide: false,
		classes: {
			"ui-resizable-se": "ui-icon ui-icon-gripsmall-diagonal-se"
		},
		containment: false,
		ghost: false,
		grid: false,
		handles: "e,s,se",
		helper: false,
		maxHeight: null,
		maxWidth: null,
		minHeight: 10,
		minWidth: 10,

		// See #7960
		zIndex: 90,

		// Callbacks
		resize: null,
		start: null,
		stop: null
	},

	_num: function( value ) {
		return parseFloat( value ) || 0;
	},

	_isNumber: function( value ) {
		return !isNaN( parseFloat( value ) );
	},

	_hasScroll: function( el, a ) {

		if ( $( el ).css( "overflow" ) === "hidden" ) {
			return false;
		}

		var scroll = ( a && a === "left" ) ? "scrollLeft" : "scrollTop",
			has = false;

		if ( el[ scroll ] > 0 ) {
			return true;
		}

		// TODO: determine which cases actually cause this to happen
		// if the element doesn't have the scroll set, see if it's possible to
		// set the scroll
		el[ scroll ] = 1;
		has = ( el[ scroll ] > 0 );
		el[ scroll ] = 0;
		return has;
	},

	_create: function() {

		var margins,
			o = this.options,
			that = this;
		this._addClass( "ui-resizable" );

		$.extend( this, {
			_aspectRatio: !!( o.aspectRatio ),
			aspectRatio: o.aspectRatio,
			originalElement: this.element,
			_proportionallyResizeElements: [],
			_helper: o.helper || o.ghost || o.animate ? o.helper || "ui-resizable-helper" : null
		} );

		// Wrap the element if it cannot hold child nodes
		if ( this.element[ 0 ].nodeName.match( /^(canvas|textarea|input|select|button|img)$/i ) ) {

			this.element.wrap(
				$( "<div class='ui-wrapper' style='overflow: hidden;'></div>" ).css( {
					position: this.element.css( "position" ),
					width: this.element.outerWidth(),
					height: this.element.outerHeight(),
					top: this.element.css( "top" ),
					left: this.element.css( "left" )
				} )
			);

			this.element = this.element.parent().data(
				"ui-resizable", this.element.resizable( "instance" )
			);

			this.elementIsWrapper = true;

			margins = {
				marginTop: this.originalElement.css( "marginTop" ),
				marginRight: this.originalElement.css( "marginRight" ),
				marginBottom: this.originalElement.css( "marginBottom" ),
				marginLeft: this.originalElement.css( "marginLeft" )
			};

			this.element.css( margins );
			this.originalElement.css( "margin", 0 );

			// support: Safari
			// Prevent Safari textarea resize
			this.originalResizeStyle = this.originalElement.css( "resize" );
			this.originalElement.css( "resize", "none" );

			this._proportionallyResizeElements.push( this.originalElement.css( {
				position: "static",
				zoom: 1,
				display: "block"
			} ) );

			// Support: IE9
			// avoid IE jump (hard set the margin)
			this.originalElement.css( margins );

			this._proportionallyResize();
		}

		this._setupHandles();

		if ( o.autoHide ) {
			$( this.element )
				.on( "mouseenter", function() {
					if ( o.disabled ) {
						return;
					}
					that._removeClass( "ui-resizable-autohide" );
					that._handles.show();
				} )
				.on( "mouseleave", function() {
					if ( o.disabled ) {
						return;
					}
					if ( !that.resizing ) {
						that._addClass( "ui-resizable-autohide" );
						that._handles.hide();
					}
				} );
		}

		this._mouseInit();
	},

	_destroy: function() {

		this._mouseDestroy();

		var wrapper,
			_destroy = function( exp ) {
				$( exp )
					.removeData( "resizable" )
					.removeData( "ui-resizable" )
					.off( ".resizable" )
					.find( ".ui-resizable-handle" )
						.remove();
			};

		// TODO: Unwrap at same DOM position
		if ( this.elementIsWrapper ) {
			_destroy( this.element );
			wrapper = this.element;
			this.originalElement.css( {
				position: wrapper.css( "position" ),
				width: wrapper.outerWidth(),
				height: wrapper.outerHeight(),
				top: wrapper.css( "top" ),
				left: wrapper.css( "left" )
			} ).insertAfter( wrapper );
			wrapper.remove();
		}

		this.originalElement.css( "resize", this.originalResizeStyle );
		_destroy( this.originalElement );

		return this;
	},

	_setOption: function( key, value ) {
		this._super( key, value );

		switch ( key ) {
		case "handles":
			this._removeHandles();
			this._setupHandles();
			break;
		default:
			break;
		}
	},

	_setupHandles: function() {
		var o = this.options, handle, i, n, hname, axis, that = this;
		this.handles = o.handles ||
			( !$( ".ui-resizable-handle", this.element ).length ?
				"e,s,se" : {
					n: ".ui-resizable-n",
					e: ".ui-resizable-e",
					s: ".ui-resizable-s",
					w: ".ui-resizable-w",
					se: ".ui-resizable-se",
					sw: ".ui-resizable-sw",
					ne: ".ui-resizable-ne",
					nw: ".ui-resizable-nw"
				} );

		this._handles = $();
		if ( this.handles.constructor === String ) {

			if ( this.handles === "all" ) {
				this.handles = "n,e,s,w,se,sw,ne,nw";
			}

			n = this.handles.split( "," );
			this.handles = {};

			for ( i = 0; i < n.length; i++ ) {

				handle = $.trim( n[ i ] );
				hname = "ui-resizable-" + handle;
				axis = $( "<div>" );
				this._addClass( axis, "ui-resizable-handle " + hname );

				axis.css( { zIndex: o.zIndex } );

				this.handles[ handle ] = ".ui-resizable-" + handle;
				this.element.append( axis );
			}

		}

		this._renderAxis = function( target ) {

			var i, axis, padPos, padWrapper;

			target = target || this.element;

			for ( i in this.handles ) {

				if ( this.handles[ i ].constructor === String ) {
					this.handles[ i ] = this.element.children( this.handles[ i ] ).first().show();
				} else if ( this.handles[ i ].jquery || this.handles[ i ].nodeType ) {
					this.handles[ i ] = $( this.handles[ i ] );
					this._on( this.handles[ i ], { "mousedown": that._mouseDown } );
				}

				if ( this.elementIsWrapper &&
						this.originalElement[ 0 ]
							.nodeName
							.match( /^(textarea|input|select|button)$/i ) ) {
					axis = $( this.handles[ i ], this.element );

					padWrapper = /sw|ne|nw|se|n|s/.test( i ) ?
						axis.outerHeight() :
						axis.outerWidth();

					padPos = [ "padding",
						/ne|nw|n/.test( i ) ? "Top" :
						/se|sw|s/.test( i ) ? "Bottom" :
						/^e$/.test( i ) ? "Right" : "Left" ].join( "" );

					target.css( padPos, padWrapper );

					this._proportionallyResize();
				}

				this._handles = this._handles.add( this.handles[ i ] );
			}
		};

		// TODO: make renderAxis a prototype function
		this._renderAxis( this.element );

		this._handles = this._handles.add( this.element.find( ".ui-resizable-handle" ) );
		this._handles.disableSelection();

		this._handles.on( "mouseover", function() {
			if ( !that.resizing ) {
				if ( this.className ) {
					axis = this.className.match( /ui-resizable-(se|sw|ne|nw|n|e|s|w)/i );
				}
				that.axis = axis && axis[ 1 ] ? axis[ 1 ] : "se";
			}
		} );

		if ( o.autoHide ) {
			this._handles.hide();
			this._addClass( "ui-resizable-autohide" );
		}
	},

	_removeHandles: function() {
		this._handles.remove();
	},

	_mouseCapture: function( event ) {
		var i, handle,
			capture = false;

		for ( i in this.handles ) {
			handle = $( this.handles[ i ] )[ 0 ];
			if ( handle === event.target || $.contains( handle, event.target ) ) {
				capture = true;
			}
		}

		return !this.options.disabled && capture;
	},

	_mouseStart: function( event ) {

		var curleft, curtop, cursor,
			o = this.options,
			el = this.element;

		this.resizing = true;

		this._renderProxy();

		curleft = this._num( this.helper.css( "left" ) );
		curtop = this._num( this.helper.css( "top" ) );

		if ( o.containment ) {
			curleft += $( o.containment ).scrollLeft() || 0;
			curtop += $( o.containment ).scrollTop() || 0;
		}

		this.offset = this.helper.offset();
		this.position = { left: curleft, top: curtop };

		this.size = this._helper ? {
				width: this.helper.width(),
				height: this.helper.height()
			} : {
				width: el.width(),
				height: el.height()
			};

		this.originalSize = this._helper ? {
				width: el.outerWidth(),
				height: el.outerHeight()
			} : {
				width: el.width(),
				height: el.height()
			};

		this.sizeDiff = {
			width: el.outerWidth() - el.width(),
			height: el.outerHeight() - el.height()
		};

		this.originalPosition = { left: curleft, top: curtop };
		this.originalMousePosition = { left: event.pageX, top: event.pageY };

		this.aspectRatio = ( typeof o.aspectRatio === "number" ) ?
			o.aspectRatio :
			( ( this.originalSize.width / this.originalSize.height ) || 1 );

		cursor = $( ".ui-resizable-" + this.axis ).css( "cursor" );
		$( "body" ).css( "cursor", cursor === "auto" ? this.axis + "-resize" : cursor );

		this._addClass( "ui-resizable-resizing" );
		this._propagate( "start", event );
		return true;
	},

	_mouseDrag: function( event ) {

		var data, props,
			smp = this.originalMousePosition,
			a = this.axis,
			dx = ( event.pageX - smp.left ) || 0,
			dy = ( event.pageY - smp.top ) || 0,
			trigger = this._change[ a ];

		this._updatePrevProperties();

		if ( !trigger ) {
			return false;
		}

		data = trigger.apply( this, [ event, dx, dy ] );

		this._updateVirtualBoundaries( event.shiftKey );
		if ( this._aspectRatio || event.shiftKey ) {
			data = this._updateRatio( data, event );
		}

		data = this._respectSize( data, event );

		this._updateCache( data );

		this._propagate( "resize", event );

		props = this._applyChanges();

		if ( !this._helper && this._proportionallyResizeElements.length ) {
			this._proportionallyResize();
		}

		if ( !$.isEmptyObject( props ) ) {
			this._updatePrevProperties();
			this._trigger( "resize", event, this.ui() );
			this._applyChanges();
		}

		return false;
	},

	_mouseStop: function( event ) {

		this.resizing = false;
		var pr, ista, soffseth, soffsetw, s, left, top,
			o = this.options, that = this;

		if ( this._helper ) {

			pr = this._proportionallyResizeElements;
			ista = pr.length && ( /textarea/i ).test( pr[ 0 ].nodeName );
			soffseth = ista && this._hasScroll( pr[ 0 ], "left" ) ? 0 : that.sizeDiff.height;
			soffsetw = ista ? 0 : that.sizeDiff.width;

			s = {
				width: ( that.helper.width()  - soffsetw ),
				height: ( that.helper.height() - soffseth )
			};
			left = ( parseFloat( that.element.css( "left" ) ) +
				( that.position.left - that.originalPosition.left ) ) || null;
			top = ( parseFloat( that.element.css( "top" ) ) +
				( that.position.top - that.originalPosition.top ) ) || null;

			if ( !o.animate ) {
				this.element.css( $.extend( s, { top: top, left: left } ) );
			}

			that.helper.height( that.size.height );
			that.helper.width( that.size.width );

			if ( this._helper && !o.animate ) {
				this._proportionallyResize();
			}
		}

		$( "body" ).css( "cursor", "auto" );

		this._removeClass( "ui-resizable-resizing" );

		this._propagate( "stop", event );

		if ( this._helper ) {
			this.helper.remove();
		}

		return false;

	},

	_updatePrevProperties: function() {
		this.prevPosition = {
			top: this.position.top,
			left: this.position.left
		};
		this.prevSize = {
			width: this.size.width,
			height: this.size.height
		};
	},

	_applyChanges: function() {
		var props = {};

		if ( this.position.top !== this.prevPosition.top ) {
			props.top = this.position.top + "px";
		}
		if ( this.position.left !== this.prevPosition.left ) {
			props.left = this.position.left + "px";
		}
		if ( this.size.width !== this.prevSize.width ) {
			props.width = this.size.width + "px";
		}
		if ( this.size.height !== this.prevSize.height ) {
			props.height = this.size.height + "px";
		}

		this.helper.css( props );

		return props;
	},

	_updateVirtualBoundaries: function( forceAspectRatio ) {
		var pMinWidth, pMaxWidth, pMinHeight, pMaxHeight, b,
			o = this.options;

		b = {
			minWidth: this._isNumber( o.minWidth ) ? o.minWidth : 0,
			maxWidth: this._isNumber( o.maxWidth ) ? o.maxWidth : Infinity,
			minHeight: this._isNumber( o.minHeight ) ? o.minHeight : 0,
			maxHeight: this._isNumber( o.maxHeight ) ? o.maxHeight : Infinity
		};

		if ( this._aspectRatio || forceAspectRatio ) {
			pMinWidth = b.minHeight * this.aspectRatio;
			pMinHeight = b.minWidth / this.aspectRatio;
			pMaxWidth = b.maxHeight * this.aspectRatio;
			pMaxHeight = b.maxWidth / this.aspectRatio;

			if ( pMinWidth > b.minWidth ) {
				b.minWidth = pMinWidth;
			}
			if ( pMinHeight > b.minHeight ) {
				b.minHeight = pMinHeight;
			}
			if ( pMaxWidth < b.maxWidth ) {
				b.maxWidth = pMaxWidth;
			}
			if ( pMaxHeight < b.maxHeight ) {
				b.maxHeight = pMaxHeight;
			}
		}
		this._vBoundaries = b;
	},

	_updateCache: function( data ) {
		this.offset = this.helper.offset();
		if ( this._isNumber( data.left ) ) {
			this.position.left = data.left;
		}
		if ( this._isNumber( data.top ) ) {
			this.position.top = data.top;
		}
		if ( this._isNumber( data.height ) ) {
			this.size.height = data.height;
		}
		if ( this._isNumber( data.width ) ) {
			this.size.width = data.width;
		}
	},

	_updateRatio: function( data ) {

		var cpos = this.position,
			csize = this.size,
			a = this.axis;

		if ( this._isNumber( data.height ) ) {
			data.width = ( data.height * this.aspectRatio );
		} else if ( this._isNumber( data.width ) ) {
			data.height = ( data.width / this.aspectRatio );
		}

		if ( a === "sw" ) {
			data.left = cpos.left + ( csize.width - data.width );
			data.top = null;
		}
		if ( a === "nw" ) {
			data.top = cpos.top + ( csize.height - data.height );
			data.left = cpos.left + ( csize.width - data.width );
		}

		return data;
	},

	_respectSize: function( data ) {

		var o = this._vBoundaries,
			a = this.axis,
			ismaxw = this._isNumber( data.width ) && o.maxWidth && ( o.maxWidth < data.width ),
			ismaxh = this._isNumber( data.height ) && o.maxHeight && ( o.maxHeight < data.height ),
			isminw = this._isNumber( data.width ) && o.minWidth && ( o.minWidth > data.width ),
			isminh = this._isNumber( data.height ) && o.minHeight && ( o.minHeight > data.height ),
			dw = this.originalPosition.left + this.originalSize.width,
			dh = this.originalPosition.top + this.originalSize.height,
			cw = /sw|nw|w/.test( a ), ch = /nw|ne|n/.test( a );
		if ( isminw ) {
			data.width = o.minWidth;
		}
		if ( isminh ) {
			data.height = o.minHeight;
		}
		if ( ismaxw ) {
			data.width = o.maxWidth;
		}
		if ( ismaxh ) {
			data.height = o.maxHeight;
		}

		if ( isminw && cw ) {
			data.left = dw - o.minWidth;
		}
		if ( ismaxw && cw ) {
			data.left = dw - o.maxWidth;
		}
		if ( isminh && ch ) {
			data.top = dh - o.minHeight;
		}
		if ( ismaxh && ch ) {
			data.top = dh - o.maxHeight;
		}

		// Fixing jump error on top/left - bug #2330
		if ( !data.width && !data.height && !data.left && data.top ) {
			data.top = null;
		} else if ( !data.width && !data.height && !data.top && data.left ) {
			data.left = null;
		}

		return data;
	},

	_getPaddingPlusBorderDimensions: function( element ) {
		var i = 0,
			widths = [],
			borders = [
				element.css( "borderTopWidth" ),
				element.css( "borderRightWidth" ),
				element.css( "borderBottomWidth" ),
				element.css( "borderLeftWidth" )
			],
			paddings = [
				element.css( "paddingTop" ),
				element.css( "paddingRight" ),
				element.css( "paddingBottom" ),
				element.css( "paddingLeft" )
			];

		for ( ; i < 4; i++ ) {
			widths[ i ] = ( parseFloat( borders[ i ] ) || 0 );
			widths[ i ] += ( parseFloat( paddings[ i ] ) || 0 );
		}

		return {
			height: widths[ 0 ] + widths[ 2 ],
			width: widths[ 1 ] + widths[ 3 ]
		};
	},

	_proportionallyResize: function() {

		if ( !this._proportionallyResizeElements.length ) {
			return;
		}

		var prel,
			i = 0,
			element = this.helper || this.element;

		for ( ; i < this._proportionallyResizeElements.length; i++ ) {

			prel = this._proportionallyResizeElements[ i ];

			// TODO: Seems like a bug to cache this.outerDimensions
			// considering that we are in a loop.
			if ( !this.outerDimensions ) {
				this.outerDimensions = this._getPaddingPlusBorderDimensions( prel );
			}

			prel.css( {
				height: ( element.height() - this.outerDimensions.height ) || 0,
				width: ( element.width() - this.outerDimensions.width ) || 0
			} );

		}

	},

	_renderProxy: function() {

		var el = this.element, o = this.options;
		this.elementOffset = el.offset();

		if ( this._helper ) {

			this.helper = this.helper || $( "<div style='overflow:hidden;'></div>" );

			this._addClass( this.helper, this._helper );
			this.helper.css( {
				width: this.element.outerWidth(),
				height: this.element.outerHeight(),
				position: "absolute",
				left: this.elementOffset.left + "px",
				top: this.elementOffset.top + "px",
				zIndex: ++o.zIndex //TODO: Don't modify option
			} );

			this.helper
				.appendTo( "body" )
				.disableSelection();

		} else {
			this.helper = this.element;
		}

	},

	_change: {
		e: function( event, dx ) {
			return { width: this.originalSize.width + dx };
		},
		w: function( event, dx ) {
			var cs = this.originalSize, sp = this.originalPosition;
			return { left: sp.left + dx, width: cs.width - dx };
		},
		n: function( event, dx, dy ) {
			var cs = this.originalSize, sp = this.originalPosition;
			return { top: sp.top + dy, height: cs.height - dy };
		},
		s: function( event, dx, dy ) {
			return { height: this.originalSize.height + dy };
		},
		se: function( event, dx, dy ) {
			return $.extend( this._change.s.apply( this, arguments ),
				this._change.e.apply( this, [ event, dx, dy ] ) );
		},
		sw: function( event, dx, dy ) {
			return $.extend( this._change.s.apply( this, arguments ),
				this._change.w.apply( this, [ event, dx, dy ] ) );
		},
		ne: function( event, dx, dy ) {
			return $.extend( this._change.n.apply( this, arguments ),
				this._change.e.apply( this, [ event, dx, dy ] ) );
		},
		nw: function( event, dx, dy ) {
			return $.extend( this._change.n.apply( this, arguments ),
				this._change.w.apply( this, [ event, dx, dy ] ) );
		}
	},

	_propagate: function( n, event ) {
		$.ui.plugin.call( this, n, [ event, this.ui() ] );
		( n !== "resize" && this._trigger( n, event, this.ui() ) );
	},

	plugins: {},

	ui: function() {
		return {
			originalElement: this.originalElement,
			element: this.element,
			helper: this.helper,
			position: this.position,
			size: this.size,
			originalSize: this.originalSize,
			originalPosition: this.originalPosition
		};
	}

} );

/*
 * Resizable Extensions
 */

$.ui.plugin.add( "resizable", "animate", {

	stop: function( event ) {
		var that = $( this ).resizable( "instance" ),
			o = that.options,
			pr = that._proportionallyResizeElements,
			ista = pr.length && ( /textarea/i ).test( pr[ 0 ].nodeName ),
			soffseth = ista && that._hasScroll( pr[ 0 ], "left" ) ? 0 : that.sizeDiff.height,
			soffsetw = ista ? 0 : that.sizeDiff.width,
			style = {
				width: ( that.size.width - soffsetw ),
				height: ( that.size.height - soffseth )
			},
			left = ( parseFloat( that.element.css( "left" ) ) +
				( that.position.left - that.originalPosition.left ) ) || null,
			top = ( parseFloat( that.element.css( "top" ) ) +
				( that.position.top - that.originalPosition.top ) ) || null;

		that.element.animate(
			$.extend( style, top && left ? { top: top, left: left } : {} ), {
				duration: o.animateDuration,
				easing: o.animateEasing,
				step: function() {

					var data = {
						width: parseFloat( that.element.css( "width" ) ),
						height: parseFloat( that.element.css( "height" ) ),
						top: parseFloat( that.element.css( "top" ) ),
						left: parseFloat( that.element.css( "left" ) )
					};

					if ( pr && pr.length ) {
						$( pr[ 0 ] ).css( { width: data.width, height: data.height } );
					}

					// Propagating resize, and updating values for each animation step
					that._updateCache( data );
					that._propagate( "resize", event );

				}
			}
		);
	}

} );

$.ui.plugin.add( "resizable", "containment", {

	start: function() {
		var element, p, co, ch, cw, width, height,
			that = $( this ).resizable( "instance" ),
			o = that.options,
			el = that.element,
			oc = o.containment,
			ce = ( oc instanceof $ ) ?
				oc.get( 0 ) :
				( /parent/.test( oc ) ) ? el.parent().get( 0 ) : oc;

		if ( !ce ) {
			return;
		}

		that.containerElement = $( ce );

		if ( /document/.test( oc ) || oc === document ) {
			that.containerOffset = {
				left: 0,
				top: 0
			};
			that.containerPosition = {
				left: 0,
				top: 0
			};

			that.parentData = {
				element: $( document ),
				left: 0,
				top: 0,
				width: $( document ).width(),
				height: $( document ).height() || document.body.parentNode.scrollHeight
			};
		} else {
			element = $( ce );
			p = [];
			$( [ "Top", "Right", "Left", "Bottom" ] ).each( function( i, name ) {
				p[ i ] = that._num( element.css( "padding" + name ) );
			} );

			that.containerOffset = element.offset();
			that.containerPosition = element.position();
			that.containerSize = {
				height: ( element.innerHeight() - p[ 3 ] ),
				width: ( element.innerWidth() - p[ 1 ] )
			};

			co = that.containerOffset;
			ch = that.containerSize.height;
			cw = that.containerSize.width;
			width = ( that._hasScroll ( ce, "left" ) ? ce.scrollWidth : cw );
			height = ( that._hasScroll ( ce ) ? ce.scrollHeight : ch ) ;

			that.parentData = {
				element: ce,
				left: co.left,
				top: co.top,
				width: width,
				height: height
			};
		}
	},

	resize: function( event ) {
		var woset, hoset, isParent, isOffsetRelative,
			that = $( this ).resizable( "instance" ),
			o = that.options,
			co = that.containerOffset,
			cp = that.position,
			pRatio = that._aspectRatio || event.shiftKey,
			cop = {
				top: 0,
				left: 0
			},
			ce = that.containerElement,
			continueResize = true;

		if ( ce[ 0 ] !== document && ( /static/ ).test( ce.css( "position" ) ) ) {
			cop = co;
		}

		if ( cp.left < ( that._helper ? co.left : 0 ) ) {
			that.size.width = that.size.width +
				( that._helper ?
					( that.position.left - co.left ) :
					( that.position.left - cop.left ) );

			if ( pRatio ) {
				that.size.height = that.size.width / that.aspectRatio;
				continueResize = false;
			}
			that.position.left = o.helper ? co.left : 0;
		}

		if ( cp.top < ( that._helper ? co.top : 0 ) ) {
			that.size.height = that.size.height +
				( that._helper ?
					( that.position.top - co.top ) :
					that.position.top );

			if ( pRatio ) {
				that.size.width = that.size.height * that.aspectRatio;
				continueResize = false;
			}
			that.position.top = that._helper ? co.top : 0;
		}

		isParent = that.containerElement.get( 0 ) === that.element.parent().get( 0 );
		isOffsetRelative = /relative|absolute/.test( that.containerElement.css( "position" ) );

		if ( isParent && isOffsetRelative ) {
			that.offset.left = that.parentData.left + that.position.left;
			that.offset.top = that.parentData.top + that.position.top;
		} else {
			that.offset.left = that.element.offset().left;
			that.offset.top = that.element.offset().top;
		}

		woset = Math.abs( that.sizeDiff.width +
			( that._helper ?
				that.offset.left - cop.left :
				( that.offset.left - co.left ) ) );

		hoset = Math.abs( that.sizeDiff.height +
			( that._helper ?
				that.offset.top - cop.top :
				( that.offset.top - co.top ) ) );

		if ( woset + that.size.width >= that.parentData.width ) {
			that.size.width = that.parentData.width - woset;
			if ( pRatio ) {
				that.size.height = that.size.width / that.aspectRatio;
				continueResize = false;
			}
		}

		if ( hoset + that.size.height >= that.parentData.height ) {
			that.size.height = that.parentData.height - hoset;
			if ( pRatio ) {
				that.size.width = that.size.height * that.aspectRatio;
				continueResize = false;
			}
		}

		if ( !continueResize ) {
			that.position.left = that.prevPosition.left;
			that.position.top = that.prevPosition.top;
			that.size.width = that.prevSize.width;
			that.size.height = that.prevSize.height;
		}
	},

	stop: function() {
		var that = $( this ).resizable( "instance" ),
			o = that.options,
			co = that.containerOffset,
			cop = that.containerPosition,
			ce = that.containerElement,
			helper = $( that.helper ),
			ho = helper.offset(),
			w = helper.outerWidth() - that.sizeDiff.width,
			h = helper.outerHeight() - that.sizeDiff.height;

		if ( that._helper && !o.animate && ( /relative/ ).test( ce.css( "position" ) ) ) {
			$( this ).css( {
				left: ho.left - cop.left - co.left,
				width: w,
				height: h
			} );
		}

		if ( that._helper && !o.animate && ( /static/ ).test( ce.css( "position" ) ) ) {
			$( this ).css( {
				left: ho.left - cop.left - co.left,
				width: w,
				height: h
			} );
		}
	}
} );

$.ui.plugin.add( "resizable", "alsoResize", {

	start: function() {
		var that = $( this ).resizable( "instance" ),
			o = that.options;

		$( o.alsoResize ).each( function() {
			var el = $( this );
			el.data( "ui-resizable-alsoresize", {
				width: parseFloat( el.width() ), height: parseFloat( el.height() ),
				left: parseFloat( el.css( "left" ) ), top: parseFloat( el.css( "top" ) )
			} );
		} );
	},

	resize: function( event, ui ) {
		var that = $( this ).resizable( "instance" ),
			o = that.options,
			os = that.originalSize,
			op = that.originalPosition,
			delta = {
				height: ( that.size.height - os.height ) || 0,
				width: ( that.size.width - os.width ) || 0,
				top: ( that.position.top - op.top ) || 0,
				left: ( that.position.left - op.left ) || 0
			};

			$( o.alsoResize ).each( function() {
				var el = $( this ), start = $( this ).data( "ui-resizable-alsoresize" ), style = {},
					css = el.parents( ui.originalElement[ 0 ] ).length ?
							[ "width", "height" ] :
							[ "width", "height", "top", "left" ];

				$.each( css, function( i, prop ) {
					var sum = ( start[ prop ] || 0 ) + ( delta[ prop ] || 0 );
					if ( sum && sum >= 0 ) {
						style[ prop ] = sum || null;
					}
				} );

				el.css( style );
			} );
	},

	stop: function() {
		$( this ).removeData( "ui-resizable-alsoresize" );
	}
} );

$.ui.plugin.add( "resizable", "ghost", {

	start: function() {

		var that = $( this ).resizable( "instance" ), cs = that.size;

		that.ghost = that.originalElement.clone();
		that.ghost.css( {
			opacity: 0.25,
			display: "block",
			position: "relative",
			height: cs.height,
			width: cs.width,
			margin: 0,
			left: 0,
			top: 0
		} );

		that._addClass( that.ghost, "ui-resizable-ghost" );

		// DEPRECATED
		// TODO: remove after 1.12
		if ( $.uiBackCompat !== false && typeof that.options.ghost === "string" ) {

			// Ghost option
			that.ghost.addClass( this.options.ghost );
		}

		that.ghost.appendTo( that.helper );

	},

	resize: function() {
		var that = $( this ).resizable( "instance" );
		if ( that.ghost ) {
			that.ghost.css( {
				position: "relative",
				height: that.size.height,
				width: that.size.width
			} );
		}
	},

	stop: function() {
		var that = $( this ).resizable( "instance" );
		if ( that.ghost && that.helper ) {
			that.helper.get( 0 ).removeChild( that.ghost.get( 0 ) );
		}
	}

} );

$.ui.plugin.add( "resizable", "grid", {

	resize: function() {
		var outerDimensions,
			that = $( this ).resizable( "instance" ),
			o = that.options,
			cs = that.size,
			os = that.originalSize,
			op = that.originalPosition,
			a = that.axis,
			grid = typeof o.grid === "number" ? [ o.grid, o.grid ] : o.grid,
			gridX = ( grid[ 0 ] || 1 ),
			gridY = ( grid[ 1 ] || 1 ),
			ox = Math.round( ( cs.width - os.width ) / gridX ) * gridX,
			oy = Math.round( ( cs.height - os.height ) / gridY ) * gridY,
			newWidth = os.width + ox,
			newHeight = os.height + oy,
			isMaxWidth = o.maxWidth && ( o.maxWidth < newWidth ),
			isMaxHeight = o.maxHeight && ( o.maxHeight < newHeight ),
			isMinWidth = o.minWidth && ( o.minWidth > newWidth ),
			isMinHeight = o.minHeight && ( o.minHeight > newHeight );

		o.grid = grid;

		if ( isMinWidth ) {
			newWidth += gridX;
		}
		if ( isMinHeight ) {
			newHeight += gridY;
		}
		if ( isMaxWidth ) {
			newWidth -= gridX;
		}
		if ( isMaxHeight ) {
			newHeight -= gridY;
		}

		if ( /^(se|s|e)$/.test( a ) ) {
			that.size.width = newWidth;
			that.size.height = newHeight;
		} else if ( /^(ne)$/.test( a ) ) {
			that.size.width = newWidth;
			that.size.height = newHeight;
			that.position.top = op.top - oy;
		} else if ( /^(sw)$/.test( a ) ) {
			that.size.width = newWidth;
			that.size.height = newHeight;
			that.position.left = op.left - ox;
		} else {
			if ( newHeight - gridY <= 0 || newWidth - gridX <= 0 ) {
				outerDimensions = that._getPaddingPlusBorderDimensions( this );
			}

			if ( newHeight - gridY > 0 ) {
				that.size.height = newHeight;
				that.position.top = op.top - oy;
			} else {
				newHeight = gridY - outerDimensions.height;
				that.size.height = newHeight;
				that.position.top = op.top + os.height - newHeight;
			}
			if ( newWidth - gridX > 0 ) {
				that.size.width = newWidth;
				that.position.left = op.left - ox;
			} else {
				newWidth = gridX - outerDimensions.width;
				that.size.width = newWidth;
				that.position.left = op.left + os.width - newWidth;
			}
		}
	}

} );

var widgetsResizable = $.ui.resizable;


/*!
 * jQuery UI Dialog 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Dialog
//>>group: Widgets
//>>description: Displays customizable dialog windows.
//>>docs: http://api.jqueryui.com/dialog/
//>>demos: http://jqueryui.com/dialog/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/dialog.css
//>>css.theme: ../../themes/base/theme.css



$.widget( "ui.dialog", {
	version: "1.12.1",
	options: {
		appendTo: "body",
		autoOpen: true,
		buttons: [],
		classes: {
			"ui-dialog": "ui-corner-all",
			"ui-dialog-titlebar": "ui-corner-all"
		},
		closeOnEscape: true,
		closeText: "Close",
		draggable: true,
		hide: null,
		height: "auto",
		maxHeight: null,
		maxWidth: null,
		minHeight: 150,
		minWidth: 150,
		modal: false,
		position: {
			my: "center",
			at: "center",
			of: window,
			collision: "fit",

			// Ensure the titlebar is always visible
			using: function( pos ) {
				var topOffset = $( this ).css( pos ).offset().top;
				if ( topOffset < 0 ) {
					$( this ).css( "top", pos.top - topOffset );
				}
			}
		},
		resizable: true,
		show: null,
		title: null,
		width: 300,

		// Callbacks
		beforeClose: null,
		close: null,
		drag: null,
		dragStart: null,
		dragStop: null,
		focus: null,
		open: null,
		resize: null,
		resizeStart: null,
		resizeStop: null
	},

	sizeRelatedOptions: {
		buttons: true,
		height: true,
		maxHeight: true,
		maxWidth: true,
		minHeight: true,
		minWidth: true,
		width: true
	},

	resizableRelatedOptions: {
		maxHeight: true,
		maxWidth: true,
		minHeight: true,
		minWidth: true
	},

	_create: function() {
		this.originalCss = {
			display: this.element[ 0 ].style.display,
			width: this.element[ 0 ].style.width,
			minHeight: this.element[ 0 ].style.minHeight,
			maxHeight: this.element[ 0 ].style.maxHeight,
			height: this.element[ 0 ].style.height
		};
		this.originalPosition = {
			parent: this.element.parent(),
			index: this.element.parent().children().index( this.element )
		};
		this.originalTitle = this.element.attr( "title" );
		if ( this.options.title == null && this.originalTitle != null ) {
			this.options.title = this.originalTitle;
		}

		// Dialogs can't be disabled
		if ( this.options.disabled ) {
			this.options.disabled = false;
		}

		this._createWrapper();

		this.element
			.show()
			.removeAttr( "title" )
			.appendTo( this.uiDialog );

		this._addClass( "ui-dialog-content", "ui-widget-content" );

		this._createTitlebar();
		this._createButtonPane();

		if ( this.options.draggable && $.fn.draggable ) {
			this._makeDraggable();
		}
		if ( this.options.resizable && $.fn.resizable ) {
			this._makeResizable();
		}

		this._isOpen = false;

		this._trackFocus();
	},

	_init: function() {
		if ( this.options.autoOpen ) {
			this.open();
		}
	},

	_appendTo: function() {
		var element = this.options.appendTo;
		if ( element && ( element.jquery || element.nodeType ) ) {
			return $( element );
		}
		return this.document.find( element || "body" ).eq( 0 );
	},

	_destroy: function() {
		var next,
			originalPosition = this.originalPosition;

		this._untrackInstance();
		this._destroyOverlay();

		this.element
			.removeUniqueId()
			.css( this.originalCss )

			// Without detaching first, the following becomes really slow
			.detach();

		this.uiDialog.remove();

		if ( this.originalTitle ) {
			this.element.attr( "title", this.originalTitle );
		}

		next = originalPosition.parent.children().eq( originalPosition.index );

		// Don't try to place the dialog next to itself (#8613)
		if ( next.length && next[ 0 ] !== this.element[ 0 ] ) {
			next.before( this.element );
		} else {
			originalPosition.parent.append( this.element );
		}
	},

	widget: function() {
		return this.uiDialog;
	},

	disable: $.noop,
	enable: $.noop,

	close: function( event ) {
		var that = this;

		if ( !this._isOpen || this._trigger( "beforeClose", event ) === false ) {
			return;
		}

		this._isOpen = false;
		this._focusedElement = null;
		this._destroyOverlay();
		this._untrackInstance();

		if ( !this.opener.filter( ":focusable" ).trigger( "focus" ).length ) {

			// Hiding a focused element doesn't trigger blur in WebKit
			// so in case we have nothing to focus on, explicitly blur the active element
			// https://bugs.webkit.org/show_bug.cgi?id=47182
			$.ui.safeBlur( $.ui.safeActiveElement( this.document[ 0 ] ) );
		}

		this._hide( this.uiDialog, this.options.hide, function() {
			that._trigger( "close", event );
		} );
	},

	isOpen: function() {
		return this._isOpen;
	},

	moveToTop: function() {
		this._moveToTop();
	},

	_moveToTop: function( event, silent ) {
		var moved = false,
			zIndices = this.uiDialog.siblings( ".ui-front:visible" ).map( function() {
				return +$( this ).css( "z-index" );
			} ).get(),
			zIndexMax = Math.max.apply( null, zIndices );

		if ( zIndexMax >= +this.uiDialog.css( "z-index" ) ) {
			this.uiDialog.css( "z-index", zIndexMax + 1 );
			moved = true;
		}

		if ( moved && !silent ) {
			this._trigger( "focus", event );
		}
		return moved;
	},

	open: function() {
		var that = this;
		if ( this._isOpen ) {
			if ( this._moveToTop() ) {
				this._focusTabbable();
			}
			return;
		}

		this._isOpen = true;
		this.opener = $( $.ui.safeActiveElement( this.document[ 0 ] ) );

		this._size();
		this._position();
		this._createOverlay();
		this._moveToTop( null, true );

		// Ensure the overlay is moved to the top with the dialog, but only when
		// opening. The overlay shouldn't move after the dialog is open so that
		// modeless dialogs opened after the modal dialog stack properly.
		if ( this.overlay ) {
			this.overlay.css( "z-index", this.uiDialog.css( "z-index" ) - 1 );
		}

		this._show( this.uiDialog, this.options.show, function() {
			that._focusTabbable();
			that._trigger( "focus" );
		} );

		// Track the dialog immediately upon openening in case a focus event
		// somehow occurs outside of the dialog before an element inside the
		// dialog is focused (#10152)
		this._makeFocusTarget();

		this._trigger( "open" );
	},

	_focusTabbable: function() {

		// Set focus to the first match:
		// 1. An element that was focused previously
		// 2. First element inside the dialog matching [autofocus]
		// 3. Tabbable element inside the content element
		// 4. Tabbable element inside the buttonpane
		// 5. The close button
		// 6. The dialog itself
		var hasFocus = this._focusedElement;
		if ( !hasFocus ) {
			hasFocus = this.element.find( "[autofocus]" );
		}
		if ( !hasFocus.length ) {
			hasFocus = this.element.find( ":tabbable" );
		}
		if ( !hasFocus.length ) {
			hasFocus = this.uiDialogButtonPane.find( ":tabbable" );
		}
		if ( !hasFocus.length ) {
			hasFocus = this.uiDialogTitlebarClose.filter( ":tabbable" );
		}
		if ( !hasFocus.length ) {
			hasFocus = this.uiDialog;
		}
		hasFocus.eq( 0 ).trigger( "focus" );
	},

	_keepFocus: function( event ) {
		function checkFocus() {
			var activeElement = $.ui.safeActiveElement( this.document[ 0 ] ),
				isActive = this.uiDialog[ 0 ] === activeElement ||
					$.contains( this.uiDialog[ 0 ], activeElement );
			if ( !isActive ) {
				this._focusTabbable();
			}
		}
		event.preventDefault();
		checkFocus.call( this );

		// support: IE
		// IE <= 8 doesn't prevent moving focus even with event.preventDefault()
		// so we check again later
		this._delay( checkFocus );
	},

	_createWrapper: function() {
		this.uiDialog = $( "<div>" )
			.hide()
			.attr( {

				// Setting tabIndex makes the div focusable
				tabIndex: -1,
				role: "dialog"
			} )
			.appendTo( this._appendTo() );

		this._addClass( this.uiDialog, "ui-dialog", "ui-widget ui-widget-content ui-front" );
		this._on( this.uiDialog, {
			keydown: function( event ) {
				if ( this.options.closeOnEscape && !event.isDefaultPrevented() && event.keyCode &&
						event.keyCode === $.ui.keyCode.ESCAPE ) {
					event.preventDefault();
					this.close( event );
					return;
				}

				// Prevent tabbing out of dialogs
				if ( event.keyCode !== $.ui.keyCode.TAB || event.isDefaultPrevented() ) {
					return;
				}
				var tabbables = this.uiDialog.find( ":tabbable" ),
					first = tabbables.filter( ":first" ),
					last = tabbables.filter( ":last" );

				if ( ( event.target === last[ 0 ] || event.target === this.uiDialog[ 0 ] ) &&
						!event.shiftKey ) {
					this._delay( function() {
						first.trigger( "focus" );
					} );
					event.preventDefault();
				} else if ( ( event.target === first[ 0 ] ||
						event.target === this.uiDialog[ 0 ] ) && event.shiftKey ) {
					this._delay( function() {
						last.trigger( "focus" );
					} );
					event.preventDefault();
				}
			},
			mousedown: function( event ) {
				if ( this._moveToTop( event ) ) {
					this._focusTabbable();
				}
			}
		} );

		// We assume that any existing aria-describedby attribute means
		// that the dialog content is marked up properly
		// otherwise we brute force the content as the description
		if ( !this.element.find( "[aria-describedby]" ).length ) {
			this.uiDialog.attr( {
				"aria-describedby": this.element.uniqueId().attr( "id" )
			} );
		}
	},

	_createTitlebar: function() {
		var uiDialogTitle;

		this.uiDialogTitlebar = $( "<div>" );
		this._addClass( this.uiDialogTitlebar,
			"ui-dialog-titlebar", "ui-widget-header ui-helper-clearfix" );
		this._on( this.uiDialogTitlebar, {
			mousedown: function( event ) {

				// Don't prevent click on close button (#8838)
				// Focusing a dialog that is partially scrolled out of view
				// causes the browser to scroll it into view, preventing the click event
				if ( !$( event.target ).closest( ".ui-dialog-titlebar-close" ) ) {

					// Dialog isn't getting focus when dragging (#8063)
					this.uiDialog.trigger( "focus" );
				}
			}
		} );

		// Support: IE
		// Use type="button" to prevent enter keypresses in textboxes from closing the
		// dialog in IE (#9312)
		this.uiDialogTitlebarClose = $( "<button type='button'></button>" )
			.button( {
				label: $( "<a>" ).text( this.options.closeText ).html(),
				icon: "ui-icon-closethick",
				showLabel: false
			} )
			.appendTo( this.uiDialogTitlebar );

		this._addClass( this.uiDialogTitlebarClose, "ui-dialog-titlebar-close" );
		this._on( this.uiDialogTitlebarClose, {
			click: function( event ) {
				event.preventDefault();
				this.close( event );
			}
		} );

		uiDialogTitle = $( "<span>" ).uniqueId().prependTo( this.uiDialogTitlebar );
		this._addClass( uiDialogTitle, "ui-dialog-title" );
		this._title( uiDialogTitle );

		this.uiDialogTitlebar.prependTo( this.uiDialog );

		this.uiDialog.attr( {
			"aria-labelledby": uiDialogTitle.attr( "id" )
		} );
	},

	_title: function( title ) {
		if ( this.options.title ) {
			title.text( this.options.title );
		} else {
			title.html( "&#160;" );
		}
	},

	_createButtonPane: function() {
		this.uiDialogButtonPane = $( "<div>" );
		this._addClass( this.uiDialogButtonPane, "ui-dialog-buttonpane",
			"ui-widget-content ui-helper-clearfix" );

		this.uiButtonSet = $( "<div>" )
			.appendTo( this.uiDialogButtonPane );
		this._addClass( this.uiButtonSet, "ui-dialog-buttonset" );

		this._createButtons();
	},

	_createButtons: function() {
		var that = this,
			buttons = this.options.buttons;

		// If we already have a button pane, remove it
		this.uiDialogButtonPane.remove();
		this.uiButtonSet.empty();

		if ( $.isEmptyObject( buttons ) || ( $.isArray( buttons ) && !buttons.length ) ) {
			this._removeClass( this.uiDialog, "ui-dialog-buttons" );
			return;
		}

		$.each( buttons, function( name, props ) {
			var click, buttonOptions;
			props = $.isFunction( props ) ?
				{ click: props, text: name } :
				props;

			// Default to a non-submitting button
			props = $.extend( { type: "button" }, props );

			// Change the context for the click callback to be the main element
			click = props.click;
			buttonOptions = {
				icon: props.icon,
				iconPosition: props.iconPosition,
				showLabel: props.showLabel,

				// Deprecated options
				icons: props.icons,
				text: props.text
			};

			delete props.click;
			delete props.icon;
			delete props.iconPosition;
			delete props.showLabel;

			// Deprecated options
			delete props.icons;
			if ( typeof props.text === "boolean" ) {
				delete props.text;
			}

			$( "<button></button>", props )
				.button( buttonOptions )
				.appendTo( that.uiButtonSet )
				.on( "click", function() {
					click.apply( that.element[ 0 ], arguments );
				} );
		} );
		this._addClass( this.uiDialog, "ui-dialog-buttons" );
		this.uiDialogButtonPane.appendTo( this.uiDialog );
	},

	_makeDraggable: function() {
		var that = this,
			options = this.options;

		function filteredUi( ui ) {
			return {
				position: ui.position,
				offset: ui.offset
			};
		}

		this.uiDialog.draggable( {
			cancel: ".ui-dialog-content, .ui-dialog-titlebar-close",
			handle: ".ui-dialog-titlebar",
			containment: "document",
			start: function( event, ui ) {
				that._addClass( $( this ), "ui-dialog-dragging" );
				that._blockFrames();
				that._trigger( "dragStart", event, filteredUi( ui ) );
			},
			drag: function( event, ui ) {
				that._trigger( "drag", event, filteredUi( ui ) );
			},
			stop: function( event, ui ) {
				var left = ui.offset.left - that.document.scrollLeft(),
					top = ui.offset.top - that.document.scrollTop();

				options.position = {
					my: "left top",
					at: "left" + ( left >= 0 ? "+" : "" ) + left + " " +
						"top" + ( top >= 0 ? "+" : "" ) + top,
					of: that.window
				};
				that._removeClass( $( this ), "ui-dialog-dragging" );
				that._unblockFrames();
				that._trigger( "dragStop", event, filteredUi( ui ) );
			}
		} );
	},

	_makeResizable: function() {
		var that = this,
			options = this.options,
			handles = options.resizable,

			// .ui-resizable has position: relative defined in the stylesheet
			// but dialogs have to use absolute or fixed positioning
			position = this.uiDialog.css( "position" ),
			resizeHandles = typeof handles === "string" ?
				handles :
				"n,e,s,w,se,sw,ne,nw";

		function filteredUi( ui ) {
			return {
				originalPosition: ui.originalPosition,
				originalSize: ui.originalSize,
				position: ui.position,
				size: ui.size
			};
		}

		this.uiDialog.resizable( {
			cancel: ".ui-dialog-content",
			containment: "document",
			alsoResize: this.element,
			maxWidth: options.maxWidth,
			maxHeight: options.maxHeight,
			minWidth: options.minWidth,
			minHeight: this._minHeight(),
			handles: resizeHandles,
			start: function( event, ui ) {
				that._addClass( $( this ), "ui-dialog-resizing" );
				that._blockFrames();
				that._trigger( "resizeStart", event, filteredUi( ui ) );
			},
			resize: function( event, ui ) {
				that._trigger( "resize", event, filteredUi( ui ) );
			},
			stop: function( event, ui ) {
				var offset = that.uiDialog.offset(),
					left = offset.left - that.document.scrollLeft(),
					top = offset.top - that.document.scrollTop();

				options.height = that.uiDialog.height();
				options.width = that.uiDialog.width();
				options.position = {
					my: "left top",
					at: "left" + ( left >= 0 ? "+" : "" ) + left + " " +
						"top" + ( top >= 0 ? "+" : "" ) + top,
					of: that.window
				};
				that._removeClass( $( this ), "ui-dialog-resizing" );
				that._unblockFrames();
				that._trigger( "resizeStop", event, filteredUi( ui ) );
			}
		} )
			.css( "position", position );
	},

	_trackFocus: function() {
		this._on( this.widget(), {
			focusin: function( event ) {
				this._makeFocusTarget();
				this._focusedElement = $( event.target );
			}
		} );
	},

	_makeFocusTarget: function() {
		this._untrackInstance();
		this._trackingInstances().unshift( this );
	},

	_untrackInstance: function() {
		var instances = this._trackingInstances(),
			exists = $.inArray( this, instances );
		if ( exists !== -1 ) {
			instances.splice( exists, 1 );
		}
	},

	_trackingInstances: function() {
		var instances = this.document.data( "ui-dialog-instances" );
		if ( !instances ) {
			instances = [];
			this.document.data( "ui-dialog-instances", instances );
		}
		return instances;
	},

	_minHeight: function() {
		var options = this.options;

		return options.height === "auto" ?
			options.minHeight :
			Math.min( options.minHeight, options.height );
	},

	_position: function() {

		// Need to show the dialog to get the actual offset in the position plugin
		var isVisible = this.uiDialog.is( ":visible" );
		if ( !isVisible ) {
			this.uiDialog.show();
		}
		this.uiDialog.position( this.options.position );
		if ( !isVisible ) {
			this.uiDialog.hide();
		}
	},

	_setOptions: function( options ) {
		var that = this,
			resize = false,
			resizableOptions = {};

		$.each( options, function( key, value ) {
			that._setOption( key, value );

			if ( key in that.sizeRelatedOptions ) {
				resize = true;
			}
			if ( key in that.resizableRelatedOptions ) {
				resizableOptions[ key ] = value;
			}
		} );

		if ( resize ) {
			this._size();
			this._position();
		}
		if ( this.uiDialog.is( ":data(ui-resizable)" ) ) {
			this.uiDialog.resizable( "option", resizableOptions );
		}
	},

	_setOption: function( key, value ) {
		var isDraggable, isResizable,
			uiDialog = this.uiDialog;

		if ( key === "disabled" ) {
			return;
		}

		this._super( key, value );

		if ( key === "appendTo" ) {
			this.uiDialog.appendTo( this._appendTo() );
		}

		if ( key === "buttons" ) {
			this._createButtons();
		}

		if ( key === "closeText" ) {
			this.uiDialogTitlebarClose.button( {

				// Ensure that we always pass a string
				label: $( "<a>" ).text( "" + this.options.closeText ).html()
			} );
		}

		if ( key === "draggable" ) {
			isDraggable = uiDialog.is( ":data(ui-draggable)" );
			if ( isDraggable && !value ) {
				uiDialog.draggable( "destroy" );
			}

			if ( !isDraggable && value ) {
				this._makeDraggable();
			}
		}

		if ( key === "position" ) {
			this._position();
		}

		if ( key === "resizable" ) {

			// currently resizable, becoming non-resizable
			isResizable = uiDialog.is( ":data(ui-resizable)" );
			if ( isResizable && !value ) {
				uiDialog.resizable( "destroy" );
			}

			// Currently resizable, changing handles
			if ( isResizable && typeof value === "string" ) {
				uiDialog.resizable( "option", "handles", value );
			}

			// Currently non-resizable, becoming resizable
			if ( !isResizable && value !== false ) {
				this._makeResizable();
			}
		}

		if ( key === "title" ) {
			this._title( this.uiDialogTitlebar.find( ".ui-dialog-title" ) );
		}
	},

	_size: function() {

		// If the user has resized the dialog, the .ui-dialog and .ui-dialog-content
		// divs will both have width and height set, so we need to reset them
		var nonContentHeight, minContentHeight, maxContentHeight,
			options = this.options;

		// Reset content sizing
		this.element.show().css( {
			width: "auto",
			minHeight: 0,
			maxHeight: "none",
			height: 0
		} );

		if ( options.minWidth > options.width ) {
			options.width = options.minWidth;
		}

		// Reset wrapper sizing
		// determine the height of all the non-content elements
		nonContentHeight = this.uiDialog.css( {
			height: "auto",
			width: options.width
		} )
			.outerHeight();
		minContentHeight = Math.max( 0, options.minHeight - nonContentHeight );
		maxContentHeight = typeof options.maxHeight === "number" ?
			Math.max( 0, options.maxHeight - nonContentHeight ) :
			"none";

		if ( options.height === "auto" ) {
			this.element.css( {
				minHeight: minContentHeight,
				maxHeight: maxContentHeight,
				height: "auto"
			} );
		} else {
			this.element.height( Math.max( 0, options.height - nonContentHeight ) );
		}

		if ( this.uiDialog.is( ":data(ui-resizable)" ) ) {
			this.uiDialog.resizable( "option", "minHeight", this._minHeight() );
		}
	},

	_blockFrames: function() {
		this.iframeBlocks = this.document.find( "iframe" ).map( function() {
			var iframe = $( this );

			return $( "<div>" )
				.css( {
					position: "absolute",
					width: iframe.outerWidth(),
					height: iframe.outerHeight()
				} )
				.appendTo( iframe.parent() )
				.offset( iframe.offset() )[ 0 ];
		} );
	},

	_unblockFrames: function() {
		if ( this.iframeBlocks ) {
			this.iframeBlocks.remove();
			delete this.iframeBlocks;
		}
	},

	_allowInteraction: function( event ) {
		if ( $( event.target ).closest( ".ui-dialog" ).length ) {
			return true;
		}

		// TODO: Remove hack when datepicker implements
		// the .ui-front logic (#8989)
		return !!$( event.target ).closest( ".ui-datepicker" ).length;
	},

	_createOverlay: function() {
		if ( !this.options.modal ) {
			return;
		}

		// We use a delay in case the overlay is created from an
		// event that we're going to be cancelling (#2804)
		var isOpening = true;
		this._delay( function() {
			isOpening = false;
		} );

		if ( !this.document.data( "ui-dialog-overlays" ) ) {

			// Prevent use of anchors and inputs
			// Using _on() for an event handler shared across many instances is
			// safe because the dialogs stack and must be closed in reverse order
			this._on( this.document, {
				focusin: function( event ) {
					if ( isOpening ) {
						return;
					}

					if ( !this._allowInteraction( event ) ) {
						event.preventDefault();
						this._trackingInstances()[ 0 ]._focusTabbable();
					}
				}
			} );
		}

		this.overlay = $( "<div>" )
			.appendTo( this._appendTo() );

		this._addClass( this.overlay, null, "ui-widget-overlay ui-front" );
		this._on( this.overlay, {
			mousedown: "_keepFocus"
		} );
		this.document.data( "ui-dialog-overlays",
			( this.document.data( "ui-dialog-overlays" ) || 0 ) + 1 );
	},

	_destroyOverlay: function() {
		if ( !this.options.modal ) {
			return;
		}

		if ( this.overlay ) {
			var overlays = this.document.data( "ui-dialog-overlays" ) - 1;

			if ( !overlays ) {
				this._off( this.document, "focusin" );
				this.document.removeData( "ui-dialog-overlays" );
			} else {
				this.document.data( "ui-dialog-overlays", overlays );
			}

			this.overlay.remove();
			this.overlay = null;
		}
	}
} );

// DEPRECATED
// TODO: switch return back to widget declaration at top of file when this is removed
if ( $.uiBackCompat !== false ) {

	// Backcompat for dialogClass option
	$.widget( "ui.dialog", $.ui.dialog, {
		options: {
			dialogClass: ""
		},
		_createWrapper: function() {
			this._super();
			this.uiDialog.addClass( this.options.dialogClass );
		},
		_setOption: function( key, value ) {
			if ( key === "dialogClass" ) {
				this.uiDialog
					.removeClass( this.options.dialogClass )
					.addClass( value );
			}
			this._superApply( arguments );
		}
	} );
}

var widgetsDialog = $.ui.dialog;


/*!
 * jQuery UI Droppable 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Droppable
//>>group: Interactions
//>>description: Enables drop targets for draggable elements.
//>>docs: http://api.jqueryui.com/droppable/
//>>demos: http://jqueryui.com/droppable/



$.widget( "ui.droppable", {
	version: "1.12.1",
	widgetEventPrefix: "drop",
	options: {
		accept: "*",
		addClasses: true,
		greedy: false,
		scope: "default",
		tolerance: "intersect",

		// Callbacks
		activate: null,
		deactivate: null,
		drop: null,
		out: null,
		over: null
	},
	_create: function() {

		var proportions,
			o = this.options,
			accept = o.accept;

		this.isover = false;
		this.isout = true;

		this.accept = $.isFunction( accept ) ? accept : function( d ) {
			return d.is( accept );
		};

		this.proportions = function( /* valueToWrite */ ) {
			if ( arguments.length ) {

				// Store the droppable's proportions
				proportions = arguments[ 0 ];
			} else {

				// Retrieve or derive the droppable's proportions
				return proportions ?
					proportions :
					proportions = {
						width: this.element[ 0 ].offsetWidth,
						height: this.element[ 0 ].offsetHeight
					};
			}
		};

		this._addToManager( o.scope );

		o.addClasses && this._addClass( "ui-droppable" );

	},

	_addToManager: function( scope ) {

		// Add the reference and positions to the manager
		$.ui.ddmanager.droppables[ scope ] = $.ui.ddmanager.droppables[ scope ] || [];
		$.ui.ddmanager.droppables[ scope ].push( this );
	},

	_splice: function( drop ) {
		var i = 0;
		for ( ; i < drop.length; i++ ) {
			if ( drop[ i ] === this ) {
				drop.splice( i, 1 );
			}
		}
	},

	_destroy: function() {
		var drop = $.ui.ddmanager.droppables[ this.options.scope ];

		this._splice( drop );
	},

	_setOption: function( key, value ) {

		if ( key === "accept" ) {
			this.accept = $.isFunction( value ) ? value : function( d ) {
				return d.is( value );
			};
		} else if ( key === "scope" ) {
			var drop = $.ui.ddmanager.droppables[ this.options.scope ];

			this._splice( drop );
			this._addToManager( value );
		}

		this._super( key, value );
	},

	_activate: function( event ) {
		var draggable = $.ui.ddmanager.current;

		this._addActiveClass();
		if ( draggable ) {
			this._trigger( "activate", event, this.ui( draggable ) );
		}
	},

	_deactivate: function( event ) {
		var draggable = $.ui.ddmanager.current;

		this._removeActiveClass();
		if ( draggable ) {
			this._trigger( "deactivate", event, this.ui( draggable ) );
		}
	},

	_over: function( event ) {

		var draggable = $.ui.ddmanager.current;

		// Bail if draggable and droppable are same element
		if ( !draggable || ( draggable.currentItem ||
				draggable.element )[ 0 ] === this.element[ 0 ] ) {
			return;
		}

		if ( this.accept.call( this.element[ 0 ], ( draggable.currentItem ||
				draggable.element ) ) ) {
			this._addHoverClass();
			this._trigger( "over", event, this.ui( draggable ) );
		}

	},

	_out: function( event ) {

		var draggable = $.ui.ddmanager.current;

		// Bail if draggable and droppable are same element
		if ( !draggable || ( draggable.currentItem ||
				draggable.element )[ 0 ] === this.element[ 0 ] ) {
			return;
		}

		if ( this.accept.call( this.element[ 0 ], ( draggable.currentItem ||
				draggable.element ) ) ) {
			this._removeHoverClass();
			this._trigger( "out", event, this.ui( draggable ) );
		}

	},

	_drop: function( event, custom ) {

		var draggable = custom || $.ui.ddmanager.current,
			childrenIntersection = false;

		// Bail if draggable and droppable are same element
		if ( !draggable || ( draggable.currentItem ||
				draggable.element )[ 0 ] === this.element[ 0 ] ) {
			return false;
		}

		this.element
			.find( ":data(ui-droppable)" )
			.not( ".ui-draggable-dragging" )
			.each( function() {
				var inst = $( this ).droppable( "instance" );
				if (
					inst.options.greedy &&
					!inst.options.disabled &&
					inst.options.scope === draggable.options.scope &&
					inst.accept.call(
						inst.element[ 0 ], ( draggable.currentItem || draggable.element )
					) &&
					intersect(
						draggable,
						$.extend( inst, { offset: inst.element.offset() } ),
						inst.options.tolerance, event
					)
				) {
					childrenIntersection = true;
					return false; }
			} );
		if ( childrenIntersection ) {
			return false;
		}

		if ( this.accept.call( this.element[ 0 ],
				( draggable.currentItem || draggable.element ) ) ) {
			this._removeActiveClass();
			this._removeHoverClass();

			this._trigger( "drop", event, this.ui( draggable ) );
			return this.element;
		}

		return false;

	},

	ui: function( c ) {
		return {
			draggable: ( c.currentItem || c.element ),
			helper: c.helper,
			position: c.position,
			offset: c.positionAbs
		};
	},

	// Extension points just to make backcompat sane and avoid duplicating logic
	// TODO: Remove in 1.13 along with call to it below
	_addHoverClass: function() {
		this._addClass( "ui-droppable-hover" );
	},

	_removeHoverClass: function() {
		this._removeClass( "ui-droppable-hover" );
	},

	_addActiveClass: function() {
		this._addClass( "ui-droppable-active" );
	},

	_removeActiveClass: function() {
		this._removeClass( "ui-droppable-active" );
	}
} );

var intersect = $.ui.intersect = ( function() {
	function isOverAxis( x, reference, size ) {
		return ( x >= reference ) && ( x < ( reference + size ) );
	}

	return function( draggable, droppable, toleranceMode, event ) {

		if ( !droppable.offset ) {
			return false;
		}

		var x1 = ( draggable.positionAbs ||
				draggable.position.absolute ).left + draggable.margins.left,
			y1 = ( draggable.positionAbs ||
				draggable.position.absolute ).top + draggable.margins.top,
			x2 = x1 + draggable.helperProportions.width,
			y2 = y1 + draggable.helperProportions.height,
			l = droppable.offset.left,
			t = droppable.offset.top,
			r = l + droppable.proportions().width,
			b = t + droppable.proportions().height;

		switch ( toleranceMode ) {
		case "fit":
			return ( l <= x1 && x2 <= r && t <= y1 && y2 <= b );
		case "intersect":
			return ( l < x1 + ( draggable.helperProportions.width / 2 ) && // Right Half
				x2 - ( draggable.helperProportions.width / 2 ) < r && // Left Half
				t < y1 + ( draggable.helperProportions.height / 2 ) && // Bottom Half
				y2 - ( draggable.helperProportions.height / 2 ) < b ); // Top Half
		case "pointer":
			return isOverAxis( event.pageY, t, droppable.proportions().height ) &&
				isOverAxis( event.pageX, l, droppable.proportions().width );
		case "touch":
			return (
				( y1 >= t && y1 <= b ) || // Top edge touching
				( y2 >= t && y2 <= b ) || // Bottom edge touching
				( y1 < t && y2 > b ) // Surrounded vertically
			) && (
				( x1 >= l && x1 <= r ) || // Left edge touching
				( x2 >= l && x2 <= r ) || // Right edge touching
				( x1 < l && x2 > r ) // Surrounded horizontally
			);
		default:
			return false;
		}
	};
} )();

/*
	This manager tracks offsets of draggables and droppables
*/
$.ui.ddmanager = {
	current: null,
	droppables: { "default": [] },
	prepareOffsets: function( t, event ) {

		var i, j,
			m = $.ui.ddmanager.droppables[ t.options.scope ] || [],
			type = event ? event.type : null, // workaround for #2317
			list = ( t.currentItem || t.element ).find( ":data(ui-droppable)" ).addBack();

		droppablesLoop: for ( i = 0; i < m.length; i++ ) {

			// No disabled and non-accepted
			if ( m[ i ].options.disabled || ( t && !m[ i ].accept.call( m[ i ].element[ 0 ],
					( t.currentItem || t.element ) ) ) ) {
				continue;
			}

			// Filter out elements in the current dragged item
			for ( j = 0; j < list.length; j++ ) {
				if ( list[ j ] === m[ i ].element[ 0 ] ) {
					m[ i ].proportions().height = 0;
					continue droppablesLoop;
				}
			}

			m[ i ].visible = m[ i ].element.css( "display" ) !== "none";
			if ( !m[ i ].visible ) {
				continue;
			}

			// Activate the droppable if used directly from draggables
			if ( type === "mousedown" ) {
				m[ i ]._activate.call( m[ i ], event );
			}

			m[ i ].offset = m[ i ].element.offset();
			m[ i ].proportions( {
				width: m[ i ].element[ 0 ].offsetWidth,
				height: m[ i ].element[ 0 ].offsetHeight
			} );

		}

	},
	drop: function( draggable, event ) {

		var dropped = false;

		// Create a copy of the droppables in case the list changes during the drop (#9116)
		$.each( ( $.ui.ddmanager.droppables[ draggable.options.scope ] || [] ).slice(), function() {

			if ( !this.options ) {
				return;
			}
			if ( !this.options.disabled && this.visible &&
					intersect( draggable, this, this.options.tolerance, event ) ) {
				dropped = this._drop.call( this, event ) || dropped;
			}

			if ( !this.options.disabled && this.visible && this.accept.call( this.element[ 0 ],
					( draggable.currentItem || draggable.element ) ) ) {
				this.isout = true;
				this.isover = false;
				this._deactivate.call( this, event );
			}

		} );
		return dropped;

	},
	dragStart: function( draggable, event ) {

		// Listen for scrolling so that if the dragging causes scrolling the position of the
		// droppables can be recalculated (see #5003)
		draggable.element.parentsUntil( "body" ).on( "scroll.droppable", function() {
			if ( !draggable.options.refreshPositions ) {
				$.ui.ddmanager.prepareOffsets( draggable, event );
			}
		} );
	},
	drag: function( draggable, event ) {

		// If you have a highly dynamic page, you might try this option. It renders positions
		// every time you move the mouse.
		if ( draggable.options.refreshPositions ) {
			$.ui.ddmanager.prepareOffsets( draggable, event );
		}

		// Run through all droppables and check their positions based on specific tolerance options
		$.each( $.ui.ddmanager.droppables[ draggable.options.scope ] || [], function() {

			if ( this.options.disabled || this.greedyChild || !this.visible ) {
				return;
			}

			var parentInstance, scope, parent,
				intersects = intersect( draggable, this, this.options.tolerance, event ),
				c = !intersects && this.isover ?
					"isout" :
					( intersects && !this.isover ? "isover" : null );
			if ( !c ) {
				return;
			}

			if ( this.options.greedy ) {

				// find droppable parents with same scope
				scope = this.options.scope;
				parent = this.element.parents( ":data(ui-droppable)" ).filter( function() {
					return $( this ).droppable( "instance" ).options.scope === scope;
				} );

				if ( parent.length ) {
					parentInstance = $( parent[ 0 ] ).droppable( "instance" );
					parentInstance.greedyChild = ( c === "isover" );
				}
			}

			// We just moved into a greedy child
			if ( parentInstance && c === "isover" ) {
				parentInstance.isover = false;
				parentInstance.isout = true;
				parentInstance._out.call( parentInstance, event );
			}

			this[ c ] = true;
			this[ c === "isout" ? "isover" : "isout" ] = false;
			this[ c === "isover" ? "_over" : "_out" ].call( this, event );

			// We just moved out of a greedy child
			if ( parentInstance && c === "isout" ) {
				parentInstance.isout = false;
				parentInstance.isover = true;
				parentInstance._over.call( parentInstance, event );
			}
		} );

	},
	dragStop: function( draggable, event ) {
		draggable.element.parentsUntil( "body" ).off( "scroll.droppable" );

		// Call prepareOffsets one final time since IE does not fire return scroll events when
		// overflow was caused by drag (see #5003)
		if ( !draggable.options.refreshPositions ) {
			$.ui.ddmanager.prepareOffsets( draggable, event );
		}
	}
};

// DEPRECATED
// TODO: switch return back to widget declaration at top of file when this is removed
if ( $.uiBackCompat !== false ) {

	// Backcompat for activeClass and hoverClass options
	$.widget( "ui.droppable", $.ui.droppable, {
		options: {
			hoverClass: false,
			activeClass: false
		},
		_addActiveClass: function() {
			this._super();
			if ( this.options.activeClass ) {
				this.element.addClass( this.options.activeClass );
			}
		},
		_removeActiveClass: function() {
			this._super();
			if ( this.options.activeClass ) {
				this.element.removeClass( this.options.activeClass );
			}
		},
		_addHoverClass: function() {
			this._super();
			if ( this.options.hoverClass ) {
				this.element.addClass( this.options.hoverClass );
			}
		},
		_removeHoverClass: function() {
			this._super();
			if ( this.options.hoverClass ) {
				this.element.removeClass( this.options.hoverClass );
			}
		}
	} );
}

var widgetsDroppable = $.ui.droppable;


/*!
 * jQuery UI Progressbar 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Progressbar
//>>group: Widgets
// jscs:disable maximumLineLength
//>>description: Displays a status indicator for loading state, standard percentage, and other progress indicators.
// jscs:enable maximumLineLength
//>>docs: http://api.jqueryui.com/progressbar/
//>>demos: http://jqueryui.com/progressbar/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/progressbar.css
//>>css.theme: ../../themes/base/theme.css



var widgetsProgressbar = $.widget( "ui.progressbar", {
	version: "1.12.1",
	options: {
		classes: {
			"ui-progressbar": "ui-corner-all",
			"ui-progressbar-value": "ui-corner-left",
			"ui-progressbar-complete": "ui-corner-right"
		},
		max: 100,
		value: 0,

		change: null,
		complete: null
	},

	min: 0,

	_create: function() {

		// Constrain initial value
		this.oldValue = this.options.value = this._constrainedValue();

		this.element.attr( {

			// Only set static values; aria-valuenow and aria-valuemax are
			// set inside _refreshValue()
			role: "progressbar",
			"aria-valuemin": this.min
		} );
		this._addClass( "ui-progressbar", "ui-widget ui-widget-content" );

		this.valueDiv = $( "<div>" ).appendTo( this.element );
		this._addClass( this.valueDiv, "ui-progressbar-value", "ui-widget-header" );
		this._refreshValue();
	},

	_destroy: function() {
		this.element.removeAttr( "role aria-valuemin aria-valuemax aria-valuenow" );

		this.valueDiv.remove();
	},

	value: function( newValue ) {
		if ( newValue === undefined ) {
			return this.options.value;
		}

		this.options.value = this._constrainedValue( newValue );
		this._refreshValue();
	},

	_constrainedValue: function( newValue ) {
		if ( newValue === undefined ) {
			newValue = this.options.value;
		}

		this.indeterminate = newValue === false;

		// Sanitize value
		if ( typeof newValue !== "number" ) {
			newValue = 0;
		}

		return this.indeterminate ? false :
			Math.min( this.options.max, Math.max( this.min, newValue ) );
	},

	_setOptions: function( options ) {

		// Ensure "value" option is set after other values (like max)
		var value = options.value;
		delete options.value;

		this._super( options );

		this.options.value = this._constrainedValue( value );
		this._refreshValue();
	},

	_setOption: function( key, value ) {
		if ( key === "max" ) {

			// Don't allow a max less than min
			value = Math.max( this.min, value );
		}
		this._super( key, value );
	},

	_setOptionDisabled: function( value ) {
		this._super( value );

		this.element.attr( "aria-disabled", value );
		this._toggleClass( null, "ui-state-disabled", !!value );
	},

	_percentage: function() {
		return this.indeterminate ?
			100 :
			100 * ( this.options.value - this.min ) / ( this.options.max - this.min );
	},

	_refreshValue: function() {
		var value = this.options.value,
			percentage = this._percentage();

		this.valueDiv
			.toggle( this.indeterminate || value > this.min )
			.width( percentage.toFixed( 0 ) + "%" );

		this
			._toggleClass( this.valueDiv, "ui-progressbar-complete", null,
				value === this.options.max )
			._toggleClass( "ui-progressbar-indeterminate", null, this.indeterminate );

		if ( this.indeterminate ) {
			this.element.removeAttr( "aria-valuenow" );
			if ( !this.overlayDiv ) {
				this.overlayDiv = $( "<div>" ).appendTo( this.valueDiv );
				this._addClass( this.overlayDiv, "ui-progressbar-overlay" );
			}
		} else {
			this.element.attr( {
				"aria-valuemax": this.options.max,
				"aria-valuenow": value
			} );
			if ( this.overlayDiv ) {
				this.overlayDiv.remove();
				this.overlayDiv = null;
			}
		}

		if ( this.oldValue !== value ) {
			this.oldValue = value;
			this._trigger( "change" );
		}
		if ( value === this.options.max ) {
			this._trigger( "complete" );
		}
	}
} );


/*!
 * jQuery UI Selectable 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Selectable
//>>group: Interactions
//>>description: Allows groups of elements to be selected with the mouse.
//>>docs: http://api.jqueryui.com/selectable/
//>>demos: http://jqueryui.com/selectable/
//>>css.structure: ../../themes/base/selectable.css



var widgetsSelectable = $.widget( "ui.selectable", $.ui.mouse, {
	version: "1.12.1",
	options: {
		appendTo: "body",
		autoRefresh: true,
		distance: 0,
		filter: "*",
		tolerance: "touch",

		// Callbacks
		selected: null,
		selecting: null,
		start: null,
		stop: null,
		unselected: null,
		unselecting: null
	},
	_create: function() {
		var that = this;

		this._addClass( "ui-selectable" );

		this.dragged = false;

		// Cache selectee children based on filter
		this.refresh = function() {
			that.elementPos = $( that.element[ 0 ] ).offset();
			that.selectees = $( that.options.filter, that.element[ 0 ] );
			that._addClass( that.selectees, "ui-selectee" );
			that.selectees.each( function() {
				var $this = $( this ),
					selecteeOffset = $this.offset(),
					pos = {
						left: selecteeOffset.left - that.elementPos.left,
						top: selecteeOffset.top - that.elementPos.top
					};
				$.data( this, "selectable-item", {
					element: this,
					$element: $this,
					left: pos.left,
					top: pos.top,
					right: pos.left + $this.outerWidth(),
					bottom: pos.top + $this.outerHeight(),
					startselected: false,
					selected: $this.hasClass( "ui-selected" ),
					selecting: $this.hasClass( "ui-selecting" ),
					unselecting: $this.hasClass( "ui-unselecting" )
				} );
			} );
		};
		this.refresh();

		this._mouseInit();

		this.helper = $( "<div>" );
		this._addClass( this.helper, "ui-selectable-helper" );
	},

	_destroy: function() {
		this.selectees.removeData( "selectable-item" );
		this._mouseDestroy();
	},

	_mouseStart: function( event ) {
		var that = this,
			options = this.options;

		this.opos = [ event.pageX, event.pageY ];
		this.elementPos = $( this.element[ 0 ] ).offset();

		if ( this.options.disabled ) {
			return;
		}

		this.selectees = $( options.filter, this.element[ 0 ] );

		this._trigger( "start", event );

		$( options.appendTo ).append( this.helper );

		// position helper (lasso)
		this.helper.css( {
			"left": event.pageX,
			"top": event.pageY,
			"width": 0,
			"height": 0
		} );

		if ( options.autoRefresh ) {
			this.refresh();
		}

		this.selectees.filter( ".ui-selected" ).each( function() {
			var selectee = $.data( this, "selectable-item" );
			selectee.startselected = true;
			if ( !event.metaKey && !event.ctrlKey ) {
				that._removeClass( selectee.$element, "ui-selected" );
				selectee.selected = false;
				that._addClass( selectee.$element, "ui-unselecting" );
				selectee.unselecting = true;

				// selectable UNSELECTING callback
				that._trigger( "unselecting", event, {
					unselecting: selectee.element
				} );
			}
		} );

		$( event.target ).parents().addBack().each( function() {
			var doSelect,
				selectee = $.data( this, "selectable-item" );
			if ( selectee ) {
				doSelect = ( !event.metaKey && !event.ctrlKey ) ||
					!selectee.$element.hasClass( "ui-selected" );
				that._removeClass( selectee.$element, doSelect ? "ui-unselecting" : "ui-selected" )
					._addClass( selectee.$element, doSelect ? "ui-selecting" : "ui-unselecting" );
				selectee.unselecting = !doSelect;
				selectee.selecting = doSelect;
				selectee.selected = doSelect;

				// selectable (UN)SELECTING callback
				if ( doSelect ) {
					that._trigger( "selecting", event, {
						selecting: selectee.element
					} );
				} else {
					that._trigger( "unselecting", event, {
						unselecting: selectee.element
					} );
				}
				return false;
			}
		} );

	},

	_mouseDrag: function( event ) {

		this.dragged = true;

		if ( this.options.disabled ) {
			return;
		}

		var tmp,
			that = this,
			options = this.options,
			x1 = this.opos[ 0 ],
			y1 = this.opos[ 1 ],
			x2 = event.pageX,
			y2 = event.pageY;

		if ( x1 > x2 ) { tmp = x2; x2 = x1; x1 = tmp; }
		if ( y1 > y2 ) { tmp = y2; y2 = y1; y1 = tmp; }
		this.helper.css( { left: x1, top: y1, width: x2 - x1, height: y2 - y1 } );

		this.selectees.each( function() {
			var selectee = $.data( this, "selectable-item" ),
				hit = false,
				offset = {};

			//prevent helper from being selected if appendTo: selectable
			if ( !selectee || selectee.element === that.element[ 0 ] ) {
				return;
			}

			offset.left   = selectee.left   + that.elementPos.left;
			offset.right  = selectee.right  + that.elementPos.left;
			offset.top    = selectee.top    + that.elementPos.top;
			offset.bottom = selectee.bottom + that.elementPos.top;

			if ( options.tolerance === "touch" ) {
				hit = ( !( offset.left > x2 || offset.right < x1 || offset.top > y2 ||
                    offset.bottom < y1 ) );
			} else if ( options.tolerance === "fit" ) {
				hit = ( offset.left > x1 && offset.right < x2 && offset.top > y1 &&
                    offset.bottom < y2 );
			}

			if ( hit ) {

				// SELECT
				if ( selectee.selected ) {
					that._removeClass( selectee.$element, "ui-selected" );
					selectee.selected = false;
				}
				if ( selectee.unselecting ) {
					that._removeClass( selectee.$element, "ui-unselecting" );
					selectee.unselecting = false;
				}
				if ( !selectee.selecting ) {
					that._addClass( selectee.$element, "ui-selecting" );
					selectee.selecting = true;

					// selectable SELECTING callback
					that._trigger( "selecting", event, {
						selecting: selectee.element
					} );
				}
			} else {

				// UNSELECT
				if ( selectee.selecting ) {
					if ( ( event.metaKey || event.ctrlKey ) && selectee.startselected ) {
						that._removeClass( selectee.$element, "ui-selecting" );
						selectee.selecting = false;
						that._addClass( selectee.$element, "ui-selected" );
						selectee.selected = true;
					} else {
						that._removeClass( selectee.$element, "ui-selecting" );
						selectee.selecting = false;
						if ( selectee.startselected ) {
							that._addClass( selectee.$element, "ui-unselecting" );
							selectee.unselecting = true;
						}

						// selectable UNSELECTING callback
						that._trigger( "unselecting", event, {
							unselecting: selectee.element
						} );
					}
				}
				if ( selectee.selected ) {
					if ( !event.metaKey && !event.ctrlKey && !selectee.startselected ) {
						that._removeClass( selectee.$element, "ui-selected" );
						selectee.selected = false;

						that._addClass( selectee.$element, "ui-unselecting" );
						selectee.unselecting = true;

						// selectable UNSELECTING callback
						that._trigger( "unselecting", event, {
							unselecting: selectee.element
						} );
					}
				}
			}
		} );

		return false;
	},

	_mouseStop: function( event ) {
		var that = this;

		this.dragged = false;

		$( ".ui-unselecting", this.element[ 0 ] ).each( function() {
			var selectee = $.data( this, "selectable-item" );
			that._removeClass( selectee.$element, "ui-unselecting" );
			selectee.unselecting = false;
			selectee.startselected = false;
			that._trigger( "unselected", event, {
				unselected: selectee.element
			} );
		} );
		$( ".ui-selecting", this.element[ 0 ] ).each( function() {
			var selectee = $.data( this, "selectable-item" );
			that._removeClass( selectee.$element, "ui-selecting" )
				._addClass( selectee.$element, "ui-selected" );
			selectee.selecting = false;
			selectee.selected = true;
			selectee.startselected = true;
			that._trigger( "selected", event, {
				selected: selectee.element
			} );
		} );
		this._trigger( "stop", event );

		this.helper.remove();

		return false;
	}

} );


/*!
 * jQuery UI Selectmenu 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Selectmenu
//>>group: Widgets
// jscs:disable maximumLineLength
//>>description: Duplicates and extends the functionality of a native HTML select element, allowing it to be customizable in behavior and appearance far beyond the limitations of a native select.
// jscs:enable maximumLineLength
//>>docs: http://api.jqueryui.com/selectmenu/
//>>demos: http://jqueryui.com/selectmenu/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/selectmenu.css, ../../themes/base/button.css
//>>css.theme: ../../themes/base/theme.css



var widgetsSelectmenu = $.widget( "ui.selectmenu", [ $.ui.formResetMixin, {
	version: "1.12.1",
	defaultElement: "<select>",
	options: {
		appendTo: null,
		classes: {
			"ui-selectmenu-button-open": "ui-corner-top",
			"ui-selectmenu-button-closed": "ui-corner-all"
		},
		disabled: null,
		icons: {
			button: "ui-icon-triangle-1-s"
		},
		position: {
			my: "left top",
			at: "left bottom",
			collision: "none"
		},
		width: false,

		// Callbacks
		change: null,
		close: null,
		focus: null,
		open: null,
		select: null
	},

	_create: function() {
		var selectmenuId = this.element.uniqueId().attr( "id" );
		this.ids = {
			element: selectmenuId,
			button: selectmenuId + "-button",
			menu: selectmenuId + "-menu"
		};

		this._drawButton();
		this._drawMenu();
		this._bindFormResetHandler();

		this._rendered = false;
		this.menuItems = $();
	},

	_drawButton: function() {
		var icon,
			that = this,
			item = this._parseOption(
				this.element.find( "option:selected" ),
				this.element[ 0 ].selectedIndex
			);

		// Associate existing label with the new button
		this.labels = this.element.labels().attr( "for", this.ids.button );
		this._on( this.labels, {
			click: function( event ) {
				this.button.focus();
				event.preventDefault();
			}
		} );

		// Hide original select element
		this.element.hide();

		// Create button
		this.button = $( "<span>", {
			tabindex: this.options.disabled ? -1 : 0,
			id: this.ids.button,
			role: "combobox",
			"aria-expanded": "false",
			"aria-autocomplete": "list",
			"aria-owns": this.ids.menu,
			"aria-haspopup": "true",
			title: this.element.attr( "title" )
		} )
			.insertAfter( this.element );

		this._addClass( this.button, "ui-selectmenu-button ui-selectmenu-button-closed",
			"ui-button ui-widget" );

		icon = $( "<span>" ).appendTo( this.button );
		this._addClass( icon, "ui-selectmenu-icon", "ui-icon " + this.options.icons.button );
		this.buttonItem = this._renderButtonItem( item )
			.appendTo( this.button );

		if ( this.options.width !== false ) {
			this._resizeButton();
		}

		this._on( this.button, this._buttonEvents );
		this.button.one( "focusin", function() {

			// Delay rendering the menu items until the button receives focus.
			// The menu may have already been rendered via a programmatic open.
			if ( !that._rendered ) {
				that._refreshMenu();
			}
		} );
	},

	_drawMenu: function() {
		var that = this;

		// Create menu
		this.menu = $( "<ul>", {
			"aria-hidden": "true",
			"aria-labelledby": this.ids.button,
			id: this.ids.menu
		} );

		// Wrap menu
		this.menuWrap = $( "<div>" ).append( this.menu );
		this._addClass( this.menuWrap, "ui-selectmenu-menu", "ui-front" );
		this.menuWrap.appendTo( this._appendTo() );

		// Initialize menu widget
		this.menuInstance = this.menu
			.menu( {
				classes: {
					"ui-menu": "ui-corner-bottom"
				},
				role: "listbox",
				select: function( event, ui ) {
					event.preventDefault();

					// Support: IE8
					// If the item was selected via a click, the text selection
					// will be destroyed in IE
					that._setSelection();

					that._select( ui.item.data( "ui-selectmenu-item" ), event );
				},
				focus: function( event, ui ) {
					var item = ui.item.data( "ui-selectmenu-item" );

					// Prevent inital focus from firing and check if its a newly focused item
					if ( that.focusIndex != null && item.index !== that.focusIndex ) {
						that._trigger( "focus", event, { item: item } );
						if ( !that.isOpen ) {
							that._select( item, event );
						}
					}
					that.focusIndex = item.index;

					that.button.attr( "aria-activedescendant",
						that.menuItems.eq( item.index ).attr( "id" ) );
				}
			} )
			.menu( "instance" );

		// Don't close the menu on mouseleave
		this.menuInstance._off( this.menu, "mouseleave" );

		// Cancel the menu's collapseAll on document click
		this.menuInstance._closeOnDocumentClick = function() {
			return false;
		};

		// Selects often contain empty items, but never contain dividers
		this.menuInstance._isDivider = function() {
			return false;
		};
	},

	refresh: function() {
		this._refreshMenu();
		this.buttonItem.replaceWith(
			this.buttonItem = this._renderButtonItem(

				// Fall back to an empty object in case there are no options
				this._getSelectedItem().data( "ui-selectmenu-item" ) || {}
			)
		);
		if ( this.options.width === null ) {
			this._resizeButton();
		}
	},

	_refreshMenu: function() {
		var item,
			options = this.element.find( "option" );

		this.menu.empty();

		this._parseOptions( options );
		this._renderMenu( this.menu, this.items );

		this.menuInstance.refresh();
		this.menuItems = this.menu.find( "li" )
			.not( ".ui-selectmenu-optgroup" )
				.find( ".ui-menu-item-wrapper" );

		this._rendered = true;

		if ( !options.length ) {
			return;
		}

		item = this._getSelectedItem();

		// Update the menu to have the correct item focused
		this.menuInstance.focus( null, item );
		this._setAria( item.data( "ui-selectmenu-item" ) );

		// Set disabled state
		this._setOption( "disabled", this.element.prop( "disabled" ) );
	},

	open: function( event ) {
		if ( this.options.disabled ) {
			return;
		}

		// If this is the first time the menu is being opened, render the items
		if ( !this._rendered ) {
			this._refreshMenu();
		} else {

			// Menu clears focus on close, reset focus to selected item
			this._removeClass( this.menu.find( ".ui-state-active" ), null, "ui-state-active" );
			this.menuInstance.focus( null, this._getSelectedItem() );
		}

		// If there are no options, don't open the menu
		if ( !this.menuItems.length ) {
			return;
		}

		this.isOpen = true;
		this._toggleAttr();
		this._resizeMenu();
		this._position();

		this._on( this.document, this._documentClick );

		this._trigger( "open", event );
	},

	_position: function() {
		this.menuWrap.position( $.extend( { of: this.button }, this.options.position ) );
	},

	close: function( event ) {
		if ( !this.isOpen ) {
			return;
		}

		this.isOpen = false;
		this._toggleAttr();

		this.range = null;
		this._off( this.document );

		this._trigger( "close", event );
	},

	widget: function() {
		return this.button;
	},

	menuWidget: function() {
		return this.menu;
	},

	_renderButtonItem: function( item ) {
		var buttonItem = $( "<span>" );

		this._setText( buttonItem, item.label );
		this._addClass( buttonItem, "ui-selectmenu-text" );

		return buttonItem;
	},

	_renderMenu: function( ul, items ) {
		var that = this,
			currentOptgroup = "";

		$.each( items, function( index, item ) {
			var li;

			if ( item.optgroup !== currentOptgroup ) {
				li = $( "<li>", {
					text: item.optgroup
				} );
				that._addClass( li, "ui-selectmenu-optgroup", "ui-menu-divider" +
					( item.element.parent( "optgroup" ).prop( "disabled" ) ?
						" ui-state-disabled" :
						"" ) );

				li.appendTo( ul );

				currentOptgroup = item.optgroup;
			}

			that._renderItemData( ul, item );
		} );
	},

	_renderItemData: function( ul, item ) {
		return this._renderItem( ul, item ).data( "ui-selectmenu-item", item );
	},

	_renderItem: function( ul, item ) {
		var li = $( "<li>" ),
			wrapper = $( "<div>", {
				title: item.element.attr( "title" )
			} );

		if ( item.disabled ) {
			this._addClass( li, null, "ui-state-disabled" );
		}
		this._setText( wrapper, item.label );

		return li.append( wrapper ).appendTo( ul );
	},

	_setText: function( element, value ) {
		if ( value ) {
			element.text( value );
		} else {
			element.html( "&#160;" );
		}
	},

	_move: function( direction, event ) {
		var item, next,
			filter = ".ui-menu-item";

		if ( this.isOpen ) {
			item = this.menuItems.eq( this.focusIndex ).parent( "li" );
		} else {
			item = this.menuItems.eq( this.element[ 0 ].selectedIndex ).parent( "li" );
			filter += ":not(.ui-state-disabled)";
		}

		if ( direction === "first" || direction === "last" ) {
			next = item[ direction === "first" ? "prevAll" : "nextAll" ]( filter ).eq( -1 );
		} else {
			next = item[ direction + "All" ]( filter ).eq( 0 );
		}

		if ( next.length ) {
			this.menuInstance.focus( event, next );
		}
	},

	_getSelectedItem: function() {
		return this.menuItems.eq( this.element[ 0 ].selectedIndex ).parent( "li" );
	},

	_toggle: function( event ) {
		this[ this.isOpen ? "close" : "open" ]( event );
	},

	_setSelection: function() {
		var selection;

		if ( !this.range ) {
			return;
		}

		if ( window.getSelection ) {
			selection = window.getSelection();
			selection.removeAllRanges();
			selection.addRange( this.range );

		// Support: IE8
		} else {
			this.range.select();
		}

		// Support: IE
		// Setting the text selection kills the button focus in IE, but
		// restoring the focus doesn't kill the selection.
		this.button.focus();
	},

	_documentClick: {
		mousedown: function( event ) {
			if ( !this.isOpen ) {
				return;
			}

			if ( !$( event.target ).closest( ".ui-selectmenu-menu, #" +
					$.ui.escapeSelector( this.ids.button ) ).length ) {
				this.close( event );
			}
		}
	},

	_buttonEvents: {

		// Prevent text selection from being reset when interacting with the selectmenu (#10144)
		mousedown: function() {
			var selection;

			if ( window.getSelection ) {
				selection = window.getSelection();
				if ( selection.rangeCount ) {
					this.range = selection.getRangeAt( 0 );
				}

			// Support: IE8
			} else {
				this.range = document.selection.createRange();
			}
		},

		click: function( event ) {
			this._setSelection();
			this._toggle( event );
		},

		keydown: function( event ) {
			var preventDefault = true;
			switch ( event.keyCode ) {
			case $.ui.keyCode.TAB:
			case $.ui.keyCode.ESCAPE:
				this.close( event );
				preventDefault = false;
				break;
			case $.ui.keyCode.ENTER:
				if ( this.isOpen ) {
					this._selectFocusedItem( event );
				}
				break;
			case $.ui.keyCode.UP:
				if ( event.altKey ) {
					this._toggle( event );
				} else {
					this._move( "prev", event );
				}
				break;
			case $.ui.keyCode.DOWN:
				if ( event.altKey ) {
					this._toggle( event );
				} else {
					this._move( "next", event );
				}
				break;
			case $.ui.keyCode.SPACE:
				if ( this.isOpen ) {
					this._selectFocusedItem( event );
				} else {
					this._toggle( event );
				}
				break;
			case $.ui.keyCode.LEFT:
				this._move( "prev", event );
				break;
			case $.ui.keyCode.RIGHT:
				this._move( "next", event );
				break;
			case $.ui.keyCode.HOME:
			case $.ui.keyCode.PAGE_UP:
				this._move( "first", event );
				break;
			case $.ui.keyCode.END:
			case $.ui.keyCode.PAGE_DOWN:
				this._move( "last", event );
				break;
			default:
				this.menu.trigger( event );
				preventDefault = false;
			}

			if ( preventDefault ) {
				event.preventDefault();
			}
		}
	},

	_selectFocusedItem: function( event ) {
		var item = this.menuItems.eq( this.focusIndex ).parent( "li" );
		if ( !item.hasClass( "ui-state-disabled" ) ) {
			this._select( item.data( "ui-selectmenu-item" ), event );
		}
	},

	_select: function( item, event ) {
		var oldIndex = this.element[ 0 ].selectedIndex;

		// Change native select element
		this.element[ 0 ].selectedIndex = item.index;
		this.buttonItem.replaceWith( this.buttonItem = this._renderButtonItem( item ) );
		this._setAria( item );
		this._trigger( "select", event, { item: item } );

		if ( item.index !== oldIndex ) {
			this._trigger( "change", event, { item: item } );
		}

		this.close( event );
	},

	_setAria: function( item ) {
		var id = this.menuItems.eq( item.index ).attr( "id" );

		this.button.attr( {
			"aria-labelledby": id,
			"aria-activedescendant": id
		} );
		this.menu.attr( "aria-activedescendant", id );
	},

	_setOption: function( key, value ) {
		if ( key === "icons" ) {
			var icon = this.button.find( "span.ui-icon" );
			this._removeClass( icon, null, this.options.icons.button )
				._addClass( icon, null, value.button );
		}

		this._super( key, value );

		if ( key === "appendTo" ) {
			this.menuWrap.appendTo( this._appendTo() );
		}

		if ( key === "width" ) {
			this._resizeButton();
		}
	},

	_setOptionDisabled: function( value ) {
		this._super( value );

		this.menuInstance.option( "disabled", value );
		this.button.attr( "aria-disabled", value );
		this._toggleClass( this.button, null, "ui-state-disabled", value );

		this.element.prop( "disabled", value );
		if ( value ) {
			this.button.attr( "tabindex", -1 );
			this.close();
		} else {
			this.button.attr( "tabindex", 0 );
		}
	},

	_appendTo: function() {
		var element = this.options.appendTo;

		if ( element ) {
			element = element.jquery || element.nodeType ?
				$( element ) :
				this.document.find( element ).eq( 0 );
		}

		if ( !element || !element[ 0 ] ) {
			element = this.element.closest( ".ui-front, dialog" );
		}

		if ( !element.length ) {
			element = this.document[ 0 ].body;
		}

		return element;
	},

	_toggleAttr: function() {
		this.button.attr( "aria-expanded", this.isOpen );

		// We can't use two _toggleClass() calls here, because we need to make sure
		// we always remove classes first and add them second, otherwise if both classes have the
		// same theme class, it will be removed after we add it.
		this._removeClass( this.button, "ui-selectmenu-button-" +
			( this.isOpen ? "closed" : "open" ) )
			._addClass( this.button, "ui-selectmenu-button-" +
				( this.isOpen ? "open" : "closed" ) )
			._toggleClass( this.menuWrap, "ui-selectmenu-open", null, this.isOpen );

		this.menu.attr( "aria-hidden", !this.isOpen );
	},

	_resizeButton: function() {
		var width = this.options.width;

		// For `width: false`, just remove inline style and stop
		if ( width === false ) {
			this.button.css( "width", "" );
			return;
		}

		// For `width: null`, match the width of the original element
		if ( width === null ) {
			width = this.element.show().outerWidth();
			this.element.hide();
		}

		this.button.outerWidth( width );
	},

	_resizeMenu: function() {
		this.menu.outerWidth( Math.max(
			this.button.outerWidth(),

			// Support: IE10
			// IE10 wraps long text (possibly a rounding bug)
			// so we add 1px to avoid the wrapping
			this.menu.width( "" ).outerWidth() + 1
		) );
	},

	_getCreateOptions: function() {
		var options = this._super();

		options.disabled = this.element.prop( "disabled" );

		return options;
	},

	_parseOptions: function( options ) {
		var that = this,
			data = [];
		options.each( function( index, item ) {
			data.push( that._parseOption( $( item ), index ) );
		} );
		this.items = data;
	},

	_parseOption: function( option, index ) {
		var optgroup = option.parent( "optgroup" );

		return {
			element: option,
			index: index,
			value: option.val(),
			label: option.text(),
			optgroup: optgroup.attr( "label" ) || "",
			disabled: optgroup.prop( "disabled" ) || option.prop( "disabled" )
		};
	},

	_destroy: function() {
		this._unbindFormResetHandler();
		this.menuWrap.remove();
		this.button.remove();
		this.element.show();
		this.element.removeUniqueId();
		this.labels.attr( "for", this.ids.element );
	}
} ] );


/*!
 * jQuery UI Slider 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Slider
//>>group: Widgets
//>>description: Displays a flexible slider with ranges and accessibility via keyboard.
//>>docs: http://api.jqueryui.com/slider/
//>>demos: http://jqueryui.com/slider/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/slider.css
//>>css.theme: ../../themes/base/theme.css



var widgetsSlider = $.widget( "ui.slider", $.ui.mouse, {
	version: "1.12.1",
	widgetEventPrefix: "slide",

	options: {
		animate: false,
		classes: {
			"ui-slider": "ui-corner-all",
			"ui-slider-handle": "ui-corner-all",

			// Note: ui-widget-header isn't the most fittingly semantic framework class for this
			// element, but worked best visually with a variety of themes
			"ui-slider-range": "ui-corner-all ui-widget-header"
		},
		distance: 0,
		max: 100,
		min: 0,
		orientation: "horizontal",
		range: false,
		step: 1,
		value: 0,
		values: null,

		// Callbacks
		change: null,
		slide: null,
		start: null,
		stop: null
	},

	// Number of pages in a slider
	// (how many times can you page up/down to go through the whole range)
	numPages: 5,

	_create: function() {
		this._keySliding = false;
		this._mouseSliding = false;
		this._animateOff = true;
		this._handleIndex = null;
		this._detectOrientation();
		this._mouseInit();
		this._calculateNewMax();

		this._addClass( "ui-slider ui-slider-" + this.orientation,
			"ui-widget ui-widget-content" );

		this._refresh();

		this._animateOff = false;
	},

	_refresh: function() {
		this._createRange();
		this._createHandles();
		this._setupEvents();
		this._refreshValue();
	},

	_createHandles: function() {
		var i, handleCount,
			options = this.options,
			existingHandles = this.element.find( ".ui-slider-handle" ),
			handle = "<span tabindex='0'></span>",
			handles = [];

		handleCount = ( options.values && options.values.length ) || 1;

		if ( existingHandles.length > handleCount ) {
			existingHandles.slice( handleCount ).remove();
			existingHandles = existingHandles.slice( 0, handleCount );
		}

		for ( i = existingHandles.length; i < handleCount; i++ ) {
			handles.push( handle );
		}

		this.handles = existingHandles.add( $( handles.join( "" ) ).appendTo( this.element ) );

		this._addClass( this.handles, "ui-slider-handle", "ui-state-default" );

		this.handle = this.handles.eq( 0 );

		this.handles.each( function( i ) {
			$( this )
				.data( "ui-slider-handle-index", i )
				.attr( "tabIndex", 0 );
		} );
	},

	_createRange: function() {
		var options = this.options;

		if ( options.range ) {
			if ( options.range === true ) {
				if ( !options.values ) {
					options.values = [ this._valueMin(), this._valueMin() ];
				} else if ( options.values.length && options.values.length !== 2 ) {
					options.values = [ options.values[ 0 ], options.values[ 0 ] ];
				} else if ( $.isArray( options.values ) ) {
					options.values = options.values.slice( 0 );
				}
			}

			if ( !this.range || !this.range.length ) {
				this.range = $( "<div>" )
					.appendTo( this.element );

				this._addClass( this.range, "ui-slider-range" );
			} else {
				this._removeClass( this.range, "ui-slider-range-min ui-slider-range-max" );

				// Handle range switching from true to min/max
				this.range.css( {
					"left": "",
					"bottom": ""
				} );
			}
			if ( options.range === "min" || options.range === "max" ) {
				this._addClass( this.range, "ui-slider-range-" + options.range );
			}
		} else {
			if ( this.range ) {
				this.range.remove();
			}
			this.range = null;
		}
	},

	_setupEvents: function() {
		this._off( this.handles );
		this._on( this.handles, this._handleEvents );
		this._hoverable( this.handles );
		this._focusable( this.handles );
	},

	_destroy: function() {
		this.handles.remove();
		if ( this.range ) {
			this.range.remove();
		}

		this._mouseDestroy();
	},

	_mouseCapture: function( event ) {
		var position, normValue, distance, closestHandle, index, allowed, offset, mouseOverHandle,
			that = this,
			o = this.options;

		if ( o.disabled ) {
			return false;
		}

		this.elementSize = {
			width: this.element.outerWidth(),
			height: this.element.outerHeight()
		};
		this.elementOffset = this.element.offset();

		position = { x: event.pageX, y: event.pageY };
		normValue = this._normValueFromMouse( position );
		distance = this._valueMax() - this._valueMin() + 1;
		this.handles.each( function( i ) {
			var thisDistance = Math.abs( normValue - that.values( i ) );
			if ( ( distance > thisDistance ) ||
				( distance === thisDistance &&
					( i === that._lastChangedValue || that.values( i ) === o.min ) ) ) {
				distance = thisDistance;
				closestHandle = $( this );
				index = i;
			}
		} );

		allowed = this._start( event, index );
		if ( allowed === false ) {
			return false;
		}
		this._mouseSliding = true;

		this._handleIndex = index;

		this._addClass( closestHandle, null, "ui-state-active" );
		closestHandle.trigger( "focus" );

		offset = closestHandle.offset();
		mouseOverHandle = !$( event.target ).parents().addBack().is( ".ui-slider-handle" );
		this._clickOffset = mouseOverHandle ? { left: 0, top: 0 } : {
			left: event.pageX - offset.left - ( closestHandle.width() / 2 ),
			top: event.pageY - offset.top -
				( closestHandle.height() / 2 ) -
				( parseInt( closestHandle.css( "borderTopWidth" ), 10 ) || 0 ) -
				( parseInt( closestHandle.css( "borderBottomWidth" ), 10 ) || 0 ) +
				( parseInt( closestHandle.css( "marginTop" ), 10 ) || 0 )
		};

		if ( !this.handles.hasClass( "ui-state-hover" ) ) {
			this._slide( event, index, normValue );
		}
		this._animateOff = true;
		return true;
	},

	_mouseStart: function() {
		return true;
	},

	_mouseDrag: function( event ) {
		var position = { x: event.pageX, y: event.pageY },
			normValue = this._normValueFromMouse( position );

		this._slide( event, this._handleIndex, normValue );

		return false;
	},

	_mouseStop: function( event ) {
		this._removeClass( this.handles, null, "ui-state-active" );
		this._mouseSliding = false;

		this._stop( event, this._handleIndex );
		this._change( event, this._handleIndex );

		this._handleIndex = null;
		this._clickOffset = null;
		this._animateOff = false;

		return false;
	},

	_detectOrientation: function() {
		this.orientation = ( this.options.orientation === "vertical" ) ? "vertical" : "horizontal";
	},

	_normValueFromMouse: function( position ) {
		var pixelTotal,
			pixelMouse,
			percentMouse,
			valueTotal,
			valueMouse;

		if ( this.orientation === "horizontal" ) {
			pixelTotal = this.elementSize.width;
			pixelMouse = position.x - this.elementOffset.left -
				( this._clickOffset ? this._clickOffset.left : 0 );
		} else {
			pixelTotal = this.elementSize.height;
			pixelMouse = position.y - this.elementOffset.top -
				( this._clickOffset ? this._clickOffset.top : 0 );
		}

		percentMouse = ( pixelMouse / pixelTotal );
		if ( percentMouse > 1 ) {
			percentMouse = 1;
		}
		if ( percentMouse < 0 ) {
			percentMouse = 0;
		}
		if ( this.orientation === "vertical" ) {
			percentMouse = 1 - percentMouse;
		}

		valueTotal = this._valueMax() - this._valueMin();
		valueMouse = this._valueMin() + percentMouse * valueTotal;

		return this._trimAlignValue( valueMouse );
	},

	_uiHash: function( index, value, values ) {
		var uiHash = {
			handle: this.handles[ index ],
			handleIndex: index,
			value: value !== undefined ? value : this.value()
		};

		if ( this._hasMultipleValues() ) {
			uiHash.value = value !== undefined ? value : this.values( index );
			uiHash.values = values || this.values();
		}

		return uiHash;
	},

	_hasMultipleValues: function() {
		return this.options.values && this.options.values.length;
	},

	_start: function( event, index ) {
		return this._trigger( "start", event, this._uiHash( index ) );
	},

	_slide: function( event, index, newVal ) {
		var allowed, otherVal,
			currentValue = this.value(),
			newValues = this.values();

		if ( this._hasMultipleValues() ) {
			otherVal = this.values( index ? 0 : 1 );
			currentValue = this.values( index );

			if ( this.options.values.length === 2 && this.options.range === true ) {
				newVal =  index === 0 ? Math.min( otherVal, newVal ) : Math.max( otherVal, newVal );
			}

			newValues[ index ] = newVal;
		}

		if ( newVal === currentValue ) {
			return;
		}

		allowed = this._trigger( "slide", event, this._uiHash( index, newVal, newValues ) );

		// A slide can be canceled by returning false from the slide callback
		if ( allowed === false ) {
			return;
		}

		if ( this._hasMultipleValues() ) {
			this.values( index, newVal );
		} else {
			this.value( newVal );
		}
	},

	_stop: function( event, index ) {
		this._trigger( "stop", event, this._uiHash( index ) );
	},

	_change: function( event, index ) {
		if ( !this._keySliding && !this._mouseSliding ) {

			//store the last changed value index for reference when handles overlap
			this._lastChangedValue = index;
			this._trigger( "change", event, this._uiHash( index ) );
		}
	},

	value: function( newValue ) {
		if ( arguments.length ) {
			this.options.value = this._trimAlignValue( newValue );
			this._refreshValue();
			this._change( null, 0 );
			return;
		}

		return this._value();
	},

	values: function( index, newValue ) {
		var vals,
			newValues,
			i;

		if ( arguments.length > 1 ) {
			this.options.values[ index ] = this._trimAlignValue( newValue );
			this._refreshValue();
			this._change( null, index );
			return;
		}

		if ( arguments.length ) {
			if ( $.isArray( arguments[ 0 ] ) ) {
				vals = this.options.values;
				newValues = arguments[ 0 ];
				for ( i = 0; i < vals.length; i += 1 ) {
					vals[ i ] = this._trimAlignValue( newValues[ i ] );
					this._change( null, i );
				}
				this._refreshValue();
			} else {
				if ( this._hasMultipleValues() ) {
					return this._values( index );
				} else {
					return this.value();
				}
			}
		} else {
			return this._values();
		}
	},

	_setOption: function( key, value ) {
		var i,
			valsLength = 0;

		if ( key === "range" && this.options.range === true ) {
			if ( value === "min" ) {
				this.options.value = this._values( 0 );
				this.options.values = null;
			} else if ( value === "max" ) {
				this.options.value = this._values( this.options.values.length - 1 );
				this.options.values = null;
			}
		}

		if ( $.isArray( this.options.values ) ) {
			valsLength = this.options.values.length;
		}

		this._super( key, value );

		switch ( key ) {
			case "orientation":
				this._detectOrientation();
				this._removeClass( "ui-slider-horizontal ui-slider-vertical" )
					._addClass( "ui-slider-" + this.orientation );
				this._refreshValue();
				if ( this.options.range ) {
					this._refreshRange( value );
				}

				// Reset positioning from previous orientation
				this.handles.css( value === "horizontal" ? "bottom" : "left", "" );
				break;
			case "value":
				this._animateOff = true;
				this._refreshValue();
				this._change( null, 0 );
				this._animateOff = false;
				break;
			case "values":
				this._animateOff = true;
				this._refreshValue();

				// Start from the last handle to prevent unreachable handles (#9046)
				for ( i = valsLength - 1; i >= 0; i-- ) {
					this._change( null, i );
				}
				this._animateOff = false;
				break;
			case "step":
			case "min":
			case "max":
				this._animateOff = true;
				this._calculateNewMax();
				this._refreshValue();
				this._animateOff = false;
				break;
			case "range":
				this._animateOff = true;
				this._refresh();
				this._animateOff = false;
				break;
		}
	},

	_setOptionDisabled: function( value ) {
		this._super( value );

		this._toggleClass( null, "ui-state-disabled", !!value );
	},

	//internal value getter
	// _value() returns value trimmed by min and max, aligned by step
	_value: function() {
		var val = this.options.value;
		val = this._trimAlignValue( val );

		return val;
	},

	//internal values getter
	// _values() returns array of values trimmed by min and max, aligned by step
	// _values( index ) returns single value trimmed by min and max, aligned by step
	_values: function( index ) {
		var val,
			vals,
			i;

		if ( arguments.length ) {
			val = this.options.values[ index ];
			val = this._trimAlignValue( val );

			return val;
		} else if ( this._hasMultipleValues() ) {

			// .slice() creates a copy of the array
			// this copy gets trimmed by min and max and then returned
			vals = this.options.values.slice();
			for ( i = 0; i < vals.length; i += 1 ) {
				vals[ i ] = this._trimAlignValue( vals[ i ] );
			}

			return vals;
		} else {
			return [];
		}
	},

	// Returns the step-aligned value that val is closest to, between (inclusive) min and max
	_trimAlignValue: function( val ) {
		if ( val <= this._valueMin() ) {
			return this._valueMin();
		}
		if ( val >= this._valueMax() ) {
			return this._valueMax();
		}
		var step = ( this.options.step > 0 ) ? this.options.step : 1,
			valModStep = ( val - this._valueMin() ) % step,
			alignValue = val - valModStep;

		if ( Math.abs( valModStep ) * 2 >= step ) {
			alignValue += ( valModStep > 0 ) ? step : ( -step );
		}

		// Since JavaScript has problems with large floats, round
		// the final value to 5 digits after the decimal point (see #4124)
		return parseFloat( alignValue.toFixed( 5 ) );
	},

	_calculateNewMax: function() {
		var max = this.options.max,
			min = this._valueMin(),
			step = this.options.step,
			aboveMin = Math.round( ( max - min ) / step ) * step;
		max = aboveMin + min;
		if ( max > this.options.max ) {

			//If max is not divisible by step, rounding off may increase its value
			max -= step;
		}
		this.max = parseFloat( max.toFixed( this._precision() ) );
	},

	_precision: function() {
		var precision = this._precisionOf( this.options.step );
		if ( this.options.min !== null ) {
			precision = Math.max( precision, this._precisionOf( this.options.min ) );
		}
		return precision;
	},

	_precisionOf: function( num ) {
		var str = num.toString(),
			decimal = str.indexOf( "." );
		return decimal === -1 ? 0 : str.length - decimal - 1;
	},

	_valueMin: function() {
		return this.options.min;
	},

	_valueMax: function() {
		return this.max;
	},

	_refreshRange: function( orientation ) {
		if ( orientation === "vertical" ) {
			this.range.css( { "width": "", "left": "" } );
		}
		if ( orientation === "horizontal" ) {
			this.range.css( { "height": "", "bottom": "" } );
		}
	},

	_refreshValue: function() {
		var lastValPercent, valPercent, value, valueMin, valueMax,
			oRange = this.options.range,
			o = this.options,
			that = this,
			animate = ( !this._animateOff ) ? o.animate : false,
			_set = {};

		if ( this._hasMultipleValues() ) {
			this.handles.each( function( i ) {
				valPercent = ( that.values( i ) - that._valueMin() ) / ( that._valueMax() -
					that._valueMin() ) * 100;
				_set[ that.orientation === "horizontal" ? "left" : "bottom" ] = valPercent + "%";
				$( this ).stop( 1, 1 )[ animate ? "animate" : "css" ]( _set, o.animate );
				if ( that.options.range === true ) {
					if ( that.orientation === "horizontal" ) {
						if ( i === 0 ) {
							that.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( {
								left: valPercent + "%"
							}, o.animate );
						}
						if ( i === 1 ) {
							that.range[ animate ? "animate" : "css" ]( {
								width: ( valPercent - lastValPercent ) + "%"
							}, {
								queue: false,
								duration: o.animate
							} );
						}
					} else {
						if ( i === 0 ) {
							that.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( {
								bottom: ( valPercent ) + "%"
							}, o.animate );
						}
						if ( i === 1 ) {
							that.range[ animate ? "animate" : "css" ]( {
								height: ( valPercent - lastValPercent ) + "%"
							}, {
								queue: false,
								duration: o.animate
							} );
						}
					}
				}
				lastValPercent = valPercent;
			} );
		} else {
			value = this.value();
			valueMin = this._valueMin();
			valueMax = this._valueMax();
			valPercent = ( valueMax !== valueMin ) ?
					( value - valueMin ) / ( valueMax - valueMin ) * 100 :
					0;
			_set[ this.orientation === "horizontal" ? "left" : "bottom" ] = valPercent + "%";
			this.handle.stop( 1, 1 )[ animate ? "animate" : "css" ]( _set, o.animate );

			if ( oRange === "min" && this.orientation === "horizontal" ) {
				this.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( {
					width: valPercent + "%"
				}, o.animate );
			}
			if ( oRange === "max" && this.orientation === "horizontal" ) {
				this.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( {
					width: ( 100 - valPercent ) + "%"
				}, o.animate );
			}
			if ( oRange === "min" && this.orientation === "vertical" ) {
				this.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( {
					height: valPercent + "%"
				}, o.animate );
			}
			if ( oRange === "max" && this.orientation === "vertical" ) {
				this.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( {
					height: ( 100 - valPercent ) + "%"
				}, o.animate );
			}
		}
	},

	_handleEvents: {
		keydown: function( event ) {
			var allowed, curVal, newVal, step,
				index = $( event.target ).data( "ui-slider-handle-index" );

			switch ( event.keyCode ) {
				case $.ui.keyCode.HOME:
				case $.ui.keyCode.END:
				case $.ui.keyCode.PAGE_UP:
				case $.ui.keyCode.PAGE_DOWN:
				case $.ui.keyCode.UP:
				case $.ui.keyCode.RIGHT:
				case $.ui.keyCode.DOWN:
				case $.ui.keyCode.LEFT:
					event.preventDefault();
					if ( !this._keySliding ) {
						this._keySliding = true;
						this._addClass( $( event.target ), null, "ui-state-active" );
						allowed = this._start( event, index );
						if ( allowed === false ) {
							return;
						}
					}
					break;
			}

			step = this.options.step;
			if ( this._hasMultipleValues() ) {
				curVal = newVal = this.values( index );
			} else {
				curVal = newVal = this.value();
			}

			switch ( event.keyCode ) {
				case $.ui.keyCode.HOME:
					newVal = this._valueMin();
					break;
				case $.ui.keyCode.END:
					newVal = this._valueMax();
					break;
				case $.ui.keyCode.PAGE_UP:
					newVal = this._trimAlignValue(
						curVal + ( ( this._valueMax() - this._valueMin() ) / this.numPages )
					);
					break;
				case $.ui.keyCode.PAGE_DOWN:
					newVal = this._trimAlignValue(
						curVal - ( ( this._valueMax() - this._valueMin() ) / this.numPages ) );
					break;
				case $.ui.keyCode.UP:
				case $.ui.keyCode.RIGHT:
					if ( curVal === this._valueMax() ) {
						return;
					}
					newVal = this._trimAlignValue( curVal + step );
					break;
				case $.ui.keyCode.DOWN:
				case $.ui.keyCode.LEFT:
					if ( curVal === this._valueMin() ) {
						return;
					}
					newVal = this._trimAlignValue( curVal - step );
					break;
			}

			this._slide( event, index, newVal );
		},
		keyup: function( event ) {
			var index = $( event.target ).data( "ui-slider-handle-index" );

			if ( this._keySliding ) {
				this._keySliding = false;
				this._stop( event, index );
				this._change( event, index );
				this._removeClass( $( event.target ), null, "ui-state-active" );
			}
		}
	}
} );


/*!
 * jQuery UI Sortable 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Sortable
//>>group: Interactions
//>>description: Enables items in a list to be sorted using the mouse.
//>>docs: http://api.jqueryui.com/sortable/
//>>demos: http://jqueryui.com/sortable/
//>>css.structure: ../../themes/base/sortable.css



var widgetsSortable = $.widget( "ui.sortable", $.ui.mouse, {
	version: "1.12.1",
	widgetEventPrefix: "sort",
	ready: false,
	options: {
		appendTo: "parent",
		axis: false,
		connectWith: false,
		containment: false,
		cursor: "auto",
		cursorAt: false,
		dropOnEmpty: true,
		forcePlaceholderSize: false,
		forceHelperSize: false,
		grid: false,
		handle: false,
		helper: "original",
		items: "> *",
		opacity: false,
		placeholder: false,
		revert: false,
		scroll: true,
		scrollSensitivity: 20,
		scrollSpeed: 20,
		scope: "default",
		tolerance: "intersect",
		zIndex: 1000,

		// Callbacks
		activate: null,
		beforeStop: null,
		change: null,
		deactivate: null,
		out: null,
		over: null,
		receive: null,
		remove: null,
		sort: null,
		start: null,
		stop: null,
		update: null
	},

	_isOverAxis: function( x, reference, size ) {
		return ( x >= reference ) && ( x < ( reference + size ) );
	},

	_isFloating: function( item ) {
		return ( /left|right/ ).test( item.css( "float" ) ) ||
			( /inline|table-cell/ ).test( item.css( "display" ) );
	},

	_create: function() {
		this.containerCache = {};
		this._addClass( "ui-sortable" );

		//Get the items
		this.refresh();

		//Let's determine the parent's offset
		this.offset = this.element.offset();

		//Initialize mouse events for interaction
		this._mouseInit();

		this._setHandleClassName();

		//We're ready to go
		this.ready = true;

	},

	_setOption: function( key, value ) {
		this._super( key, value );

		if ( key === "handle" ) {
			this._setHandleClassName();
		}
	},

	_setHandleClassName: function() {
		var that = this;
		this._removeClass( this.element.find( ".ui-sortable-handle" ), "ui-sortable-handle" );
		$.each( this.items, function() {
			that._addClass(
				this.instance.options.handle ?
					this.item.find( this.instance.options.handle ) :
					this.item,
				"ui-sortable-handle"
			);
		} );
	},

	_destroy: function() {
		this._mouseDestroy();

		for ( var i = this.items.length - 1; i >= 0; i-- ) {
			this.items[ i ].item.removeData( this.widgetName + "-item" );
		}

		return this;
	},

	_mouseCapture: function( event, overrideHandle ) {
		var currentItem = null,
			validHandle = false,
			that = this;

		if ( this.reverting ) {
			return false;
		}

		if ( this.options.disabled || this.options.type === "static" ) {
			return false;
		}

		//We have to refresh the items data once first
		this._refreshItems( event );

		//Find out if the clicked node (or one of its parents) is a actual item in this.items
		$( event.target ).parents().each( function() {
			if ( $.data( this, that.widgetName + "-item" ) === that ) {
				currentItem = $( this );
				return false;
			}
		} );
		if ( $.data( event.target, that.widgetName + "-item" ) === that ) {
			currentItem = $( event.target );
		}

		if ( !currentItem ) {
			return false;
		}
		if ( this.options.handle && !overrideHandle ) {
			$( this.options.handle, currentItem ).find( "*" ).addBack().each( function() {
				if ( this === event.target ) {
					validHandle = true;
				}
			} );
			if ( !validHandle ) {
				return false;
			}
		}

		this.currentItem = currentItem;
		this._removeCurrentsFromItems();
		return true;

	},

	_mouseStart: function( event, overrideHandle, noActivation ) {

		var i, body,
			o = this.options;

		this.currentContainer = this;

		//We only need to call refreshPositions, because the refreshItems call has been moved to
		// mouseCapture
		this.refreshPositions();

		//Create and append the visible helper
		this.helper = this._createHelper( event );

		//Cache the helper size
		this._cacheHelperProportions();

		/*
		 * - Position generation -
		 * This block generates everything position related - it's the core of draggables.
		 */

		//Cache the margins of the original element
		this._cacheMargins();

		//Get the next scrolling parent
		this.scrollParent = this.helper.scrollParent();

		//The element's absolute position on the page minus margins
		this.offset = this.currentItem.offset();
		this.offset = {
			top: this.offset.top - this.margins.top,
			left: this.offset.left - this.margins.left
		};

		$.extend( this.offset, {
			click: { //Where the click happened, relative to the element
				left: event.pageX - this.offset.left,
				top: event.pageY - this.offset.top
			},
			parent: this._getParentOffset(),

			// This is a relative to absolute position minus the actual position calculation -
			// only used for relative positioned helper
			relative: this._getRelativeOffset()
		} );

		// Only after we got the offset, we can change the helper's position to absolute
		// TODO: Still need to figure out a way to make relative sorting possible
		this.helper.css( "position", "absolute" );
		this.cssPosition = this.helper.css( "position" );

		//Generate the original position
		this.originalPosition = this._generatePosition( event );
		this.originalPageX = event.pageX;
		this.originalPageY = event.pageY;

		//Adjust the mouse offset relative to the helper if "cursorAt" is supplied
		( o.cursorAt && this._adjustOffsetFromHelper( o.cursorAt ) );

		//Cache the former DOM position
		this.domPosition = {
			prev: this.currentItem.prev()[ 0 ],
			parent: this.currentItem.parent()[ 0 ]
		};

		// If the helper is not the original, hide the original so it's not playing any role during
		// the drag, won't cause anything bad this way
		if ( this.helper[ 0 ] !== this.currentItem[ 0 ] ) {
			this.currentItem.hide();
		}

		//Create the placeholder
		this._createPlaceholder();

		//Set a containment if given in the options
		if ( o.containment ) {
			this._setContainment();
		}

		if ( o.cursor && o.cursor !== "auto" ) { // cursor option
			body = this.document.find( "body" );

			// Support: IE
			this.storedCursor = body.css( "cursor" );
			body.css( "cursor", o.cursor );

			this.storedStylesheet =
				$( "<style>*{ cursor: " + o.cursor + " !important; }</style>" ).appendTo( body );
		}

		if ( o.opacity ) { // opacity option
			if ( this.helper.css( "opacity" ) ) {
				this._storedOpacity = this.helper.css( "opacity" );
			}
			this.helper.css( "opacity", o.opacity );
		}

		if ( o.zIndex ) { // zIndex option
			if ( this.helper.css( "zIndex" ) ) {
				this._storedZIndex = this.helper.css( "zIndex" );
			}
			this.helper.css( "zIndex", o.zIndex );
		}

		//Prepare scrolling
		if ( this.scrollParent[ 0 ] !== this.document[ 0 ] &&
				this.scrollParent[ 0 ].tagName !== "HTML" ) {
			this.overflowOffset = this.scrollParent.offset();
		}

		//Call callbacks
		this._trigger( "start", event, this._uiHash() );

		//Recache the helper size
		if ( !this._preserveHelperProportions ) {
			this._cacheHelperProportions();
		}

		//Post "activate" events to possible containers
		if ( !noActivation ) {
			for ( i = this.containers.length - 1; i >= 0; i-- ) {
				this.containers[ i ]._trigger( "activate", event, this._uiHash( this ) );
			}
		}

		//Prepare possible droppables
		if ( $.ui.ddmanager ) {
			$.ui.ddmanager.current = this;
		}

		if ( $.ui.ddmanager && !o.dropBehaviour ) {
			$.ui.ddmanager.prepareOffsets( this, event );
		}

		this.dragging = true;

		this._addClass( this.helper, "ui-sortable-helper" );

		// Execute the drag once - this causes the helper not to be visiblebefore getting its
		// correct position
		this._mouseDrag( event );
		return true;

	},

	_mouseDrag: function( event ) {
		var i, item, itemElement, intersection,
			o = this.options,
			scrolled = false;

		//Compute the helpers position
		this.position = this._generatePosition( event );
		this.positionAbs = this._convertPositionTo( "absolute" );

		if ( !this.lastPositionAbs ) {
			this.lastPositionAbs = this.positionAbs;
		}

		//Do scrolling
		if ( this.options.scroll ) {
			if ( this.scrollParent[ 0 ] !== this.document[ 0 ] &&
					this.scrollParent[ 0 ].tagName !== "HTML" ) {

				if ( ( this.overflowOffset.top + this.scrollParent[ 0 ].offsetHeight ) -
						event.pageY < o.scrollSensitivity ) {
					this.scrollParent[ 0 ].scrollTop =
						scrolled = this.scrollParent[ 0 ].scrollTop + o.scrollSpeed;
				} else if ( event.pageY - this.overflowOffset.top < o.scrollSensitivity ) {
					this.scrollParent[ 0 ].scrollTop =
						scrolled = this.scrollParent[ 0 ].scrollTop - o.scrollSpeed;
				}

				if ( ( this.overflowOffset.left + this.scrollParent[ 0 ].offsetWidth ) -
						event.pageX < o.scrollSensitivity ) {
					this.scrollParent[ 0 ].scrollLeft = scrolled =
						this.scrollParent[ 0 ].scrollLeft + o.scrollSpeed;
				} else if ( event.pageX - this.overflowOffset.left < o.scrollSensitivity ) {
					this.scrollParent[ 0 ].scrollLeft = scrolled =
						this.scrollParent[ 0 ].scrollLeft - o.scrollSpeed;
				}

			} else {

				if ( event.pageY - this.document.scrollTop() < o.scrollSensitivity ) {
					scrolled = this.document.scrollTop( this.document.scrollTop() - o.scrollSpeed );
				} else if ( this.window.height() - ( event.pageY - this.document.scrollTop() ) <
						o.scrollSensitivity ) {
					scrolled = this.document.scrollTop( this.document.scrollTop() + o.scrollSpeed );
				}

				if ( event.pageX - this.document.scrollLeft() < o.scrollSensitivity ) {
					scrolled = this.document.scrollLeft(
						this.document.scrollLeft() - o.scrollSpeed
					);
				} else if ( this.window.width() - ( event.pageX - this.document.scrollLeft() ) <
						o.scrollSensitivity ) {
					scrolled = this.document.scrollLeft(
						this.document.scrollLeft() + o.scrollSpeed
					);
				}

			}

			if ( scrolled !== false && $.ui.ddmanager && !o.dropBehaviour ) {
				$.ui.ddmanager.prepareOffsets( this, event );
			}
		}

		//Regenerate the absolute position used for position checks
		this.positionAbs = this._convertPositionTo( "absolute" );

		//Set the helper position
		if ( !this.options.axis || this.options.axis !== "y" ) {
			this.helper[ 0 ].style.left = this.position.left + "px";
		}
		if ( !this.options.axis || this.options.axis !== "x" ) {
			this.helper[ 0 ].style.top = this.position.top + "px";
		}

		//Rearrange
		for ( i = this.items.length - 1; i >= 0; i-- ) {

			//Cache variables and intersection, continue if no intersection
			item = this.items[ i ];
			itemElement = item.item[ 0 ];
			intersection = this._intersectsWithPointer( item );
			if ( !intersection ) {
				continue;
			}

			// Only put the placeholder inside the current Container, skip all
			// items from other containers. This works because when moving
			// an item from one container to another the
			// currentContainer is switched before the placeholder is moved.
			//
			// Without this, moving items in "sub-sortables" can cause
			// the placeholder to jitter between the outer and inner container.
			if ( item.instance !== this.currentContainer ) {
				continue;
			}

			// Cannot intersect with itself
			// no useless actions that have been done before
			// no action if the item moved is the parent of the item checked
			if ( itemElement !== this.currentItem[ 0 ] &&
				this.placeholder[ intersection === 1 ? "next" : "prev" ]()[ 0 ] !== itemElement &&
				!$.contains( this.placeholder[ 0 ], itemElement ) &&
				( this.options.type === "semi-dynamic" ?
					!$.contains( this.element[ 0 ], itemElement ) :
					true
				)
			) {

				this.direction = intersection === 1 ? "down" : "up";

				if ( this.options.tolerance === "pointer" || this._intersectsWithSides( item ) ) {
					this._rearrange( event, item );
				} else {
					break;
				}

				this._trigger( "change", event, this._uiHash() );
				break;
			}
		}

		//Post events to containers
		this._contactContainers( event );

		//Interconnect with droppables
		if ( $.ui.ddmanager ) {
			$.ui.ddmanager.drag( this, event );
		}

		//Call callbacks
		this._trigger( "sort", event, this._uiHash() );

		this.lastPositionAbs = this.positionAbs;
		return false;

	},

	_mouseStop: function( event, noPropagation ) {

		if ( !event ) {
			return;
		}

		//If we are using droppables, inform the manager about the drop
		if ( $.ui.ddmanager && !this.options.dropBehaviour ) {
			$.ui.ddmanager.drop( this, event );
		}

		if ( this.options.revert ) {
			var that = this,
				cur = this.placeholder.offset(),
				axis = this.options.axis,
				animation = {};

			if ( !axis || axis === "x" ) {
				animation.left = cur.left - this.offset.parent.left - this.margins.left +
					( this.offsetParent[ 0 ] === this.document[ 0 ].body ?
						0 :
						this.offsetParent[ 0 ].scrollLeft
					);
			}
			if ( !axis || axis === "y" ) {
				animation.top = cur.top - this.offset.parent.top - this.margins.top +
					( this.offsetParent[ 0 ] === this.document[ 0 ].body ?
						0 :
						this.offsetParent[ 0 ].scrollTop
					);
			}
			this.reverting = true;
			$( this.helper ).animate(
				animation,
				parseInt( this.options.revert, 10 ) || 500,
				function() {
					that._clear( event );
				}
			);
		} else {
			this._clear( event, noPropagation );
		}

		return false;

	},

	cancel: function() {

		if ( this.dragging ) {

			this._mouseUp( new $.Event( "mouseup", { target: null } ) );

			if ( this.options.helper === "original" ) {
				this.currentItem.css( this._storedCSS );
				this._removeClass( this.currentItem, "ui-sortable-helper" );
			} else {
				this.currentItem.show();
			}

			//Post deactivating events to containers
			for ( var i = this.containers.length - 1; i >= 0; i-- ) {
				this.containers[ i ]._trigger( "deactivate", null, this._uiHash( this ) );
				if ( this.containers[ i ].containerCache.over ) {
					this.containers[ i ]._trigger( "out", null, this._uiHash( this ) );
					this.containers[ i ].containerCache.over = 0;
				}
			}

		}

		if ( this.placeholder ) {

			//$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately,
			// it unbinds ALL events from the original node!
			if ( this.placeholder[ 0 ].parentNode ) {
				this.placeholder[ 0 ].parentNode.removeChild( this.placeholder[ 0 ] );
			}
			if ( this.options.helper !== "original" && this.helper &&
					this.helper[ 0 ].parentNode ) {
				this.helper.remove();
			}

			$.extend( this, {
				helper: null,
				dragging: false,
				reverting: false,
				_noFinalSort: null
			} );

			if ( this.domPosition.prev ) {
				$( this.domPosition.prev ).after( this.currentItem );
			} else {
				$( this.domPosition.parent ).prepend( this.currentItem );
			}
		}

		return this;

	},

	serialize: function( o ) {

		var items = this._getItemsAsjQuery( o && o.connected ),
			str = [];
		o = o || {};

		$( items ).each( function() {
			var res = ( $( o.item || this ).attr( o.attribute || "id" ) || "" )
				.match( o.expression || ( /(.+)[\-=_](.+)/ ) );
			if ( res ) {
				str.push(
					( o.key || res[ 1 ] + "[]" ) +
					"=" + ( o.key && o.expression ? res[ 1 ] : res[ 2 ] ) );
			}
		} );

		if ( !str.length && o.key ) {
			str.push( o.key + "=" );
		}

		return str.join( "&" );

	},

	toArray: function( o ) {

		var items = this._getItemsAsjQuery( o && o.connected ),
			ret = [];

		o = o || {};

		items.each( function() {
			ret.push( $( o.item || this ).attr( o.attribute || "id" ) || "" );
		} );
		return ret;

	},

	/* Be careful with the following core functions */
	_intersectsWith: function( item ) {

		var x1 = this.positionAbs.left,
			x2 = x1 + this.helperProportions.width,
			y1 = this.positionAbs.top,
			y2 = y1 + this.helperProportions.height,
			l = item.left,
			r = l + item.width,
			t = item.top,
			b = t + item.height,
			dyClick = this.offset.click.top,
			dxClick = this.offset.click.left,
			isOverElementHeight = ( this.options.axis === "x" ) || ( ( y1 + dyClick ) > t &&
				( y1 + dyClick ) < b ),
			isOverElementWidth = ( this.options.axis === "y" ) || ( ( x1 + dxClick ) > l &&
				( x1 + dxClick ) < r ),
			isOverElement = isOverElementHeight && isOverElementWidth;

		if ( this.options.tolerance === "pointer" ||
			this.options.forcePointerForContainers ||
			( this.options.tolerance !== "pointer" &&
				this.helperProportions[ this.floating ? "width" : "height" ] >
				item[ this.floating ? "width" : "height" ] )
		) {
			return isOverElement;
		} else {

			return ( l < x1 + ( this.helperProportions.width / 2 ) && // Right Half
				x2 - ( this.helperProportions.width / 2 ) < r && // Left Half
				t < y1 + ( this.helperProportions.height / 2 ) && // Bottom Half
				y2 - ( this.helperProportions.height / 2 ) < b ); // Top Half

		}
	},

	_intersectsWithPointer: function( item ) {
		var verticalDirection, horizontalDirection,
			isOverElementHeight = ( this.options.axis === "x" ) ||
				this._isOverAxis(
					this.positionAbs.top + this.offset.click.top, item.top, item.height ),
			isOverElementWidth = ( this.options.axis === "y" ) ||
				this._isOverAxis(
					this.positionAbs.left + this.offset.click.left, item.left, item.width ),
			isOverElement = isOverElementHeight && isOverElementWidth;

		if ( !isOverElement ) {
			return false;
		}

		verticalDirection = this._getDragVerticalDirection();
		horizontalDirection = this._getDragHorizontalDirection();

		return this.floating ?
			( ( horizontalDirection === "right" || verticalDirection === "down" ) ? 2 : 1 )
			: ( verticalDirection && ( verticalDirection === "down" ? 2 : 1 ) );

	},

	_intersectsWithSides: function( item ) {

		var isOverBottomHalf = this._isOverAxis( this.positionAbs.top +
				this.offset.click.top, item.top + ( item.height / 2 ), item.height ),
			isOverRightHalf = this._isOverAxis( this.positionAbs.left +
				this.offset.click.left, item.left + ( item.width / 2 ), item.width ),
			verticalDirection = this._getDragVerticalDirection(),
			horizontalDirection = this._getDragHorizontalDirection();

		if ( this.floating && horizontalDirection ) {
			return ( ( horizontalDirection === "right" && isOverRightHalf ) ||
				( horizontalDirection === "left" && !isOverRightHalf ) );
		} else {
			return verticalDirection && ( ( verticalDirection === "down" && isOverBottomHalf ) ||
				( verticalDirection === "up" && !isOverBottomHalf ) );
		}

	},

	_getDragVerticalDirection: function() {
		var delta = this.positionAbs.top - this.lastPositionAbs.top;
		return delta !== 0 && ( delta > 0 ? "down" : "up" );
	},

	_getDragHorizontalDirection: function() {
		var delta = this.positionAbs.left - this.lastPositionAbs.left;
		return delta !== 0 && ( delta > 0 ? "right" : "left" );
	},

	refresh: function( event ) {
		this._refreshItems( event );
		this._setHandleClassName();
		this.refreshPositions();
		return this;
	},

	_connectWith: function() {
		var options = this.options;
		return options.connectWith.constructor === String ?
			[ options.connectWith ] :
			options.connectWith;
	},

	_getItemsAsjQuery: function( connected ) {

		var i, j, cur, inst,
			items = [],
			queries = [],
			connectWith = this._connectWith();

		if ( connectWith && connected ) {
			for ( i = connectWith.length - 1; i >= 0; i-- ) {
				cur = $( connectWith[ i ], this.document[ 0 ] );
				for ( j = cur.length - 1; j >= 0; j-- ) {
					inst = $.data( cur[ j ], this.widgetFullName );
					if ( inst && inst !== this && !inst.options.disabled ) {
						queries.push( [ $.isFunction( inst.options.items ) ?
							inst.options.items.call( inst.element ) :
							$( inst.options.items, inst.element )
								.not( ".ui-sortable-helper" )
								.not( ".ui-sortable-placeholder" ), inst ] );
					}
				}
			}
		}

		queries.push( [ $.isFunction( this.options.items ) ?
			this.options.items
				.call( this.element, null, { options: this.options, item: this.currentItem } ) :
			$( this.options.items, this.element )
				.not( ".ui-sortable-helper" )
				.not( ".ui-sortable-placeholder" ), this ] );

		function addItems() {
			items.push( this );
		}
		for ( i = queries.length - 1; i >= 0; i-- ) {
			queries[ i ][ 0 ].each( addItems );
		}

		return $( items );

	},

	_removeCurrentsFromItems: function() {

		var list = this.currentItem.find( ":data(" + this.widgetName + "-item)" );

		this.items = $.grep( this.items, function( item ) {
			for ( var j = 0; j < list.length; j++ ) {
				if ( list[ j ] === item.item[ 0 ] ) {
					return false;
				}
			}
			return true;
		} );

	},

	_refreshItems: function( event ) {

		this.items = [];
		this.containers = [ this ];

		var i, j, cur, inst, targetData, _queries, item, queriesLength,
			items = this.items,
			queries = [ [ $.isFunction( this.options.items ) ?
				this.options.items.call( this.element[ 0 ], event, { item: this.currentItem } ) :
				$( this.options.items, this.element ), this ] ],
			connectWith = this._connectWith();

		//Shouldn't be run the first time through due to massive slow-down
		if ( connectWith && this.ready ) {
			for ( i = connectWith.length - 1; i >= 0; i-- ) {
				cur = $( connectWith[ i ], this.document[ 0 ] );
				for ( j = cur.length - 1; j >= 0; j-- ) {
					inst = $.data( cur[ j ], this.widgetFullName );
					if ( inst && inst !== this && !inst.options.disabled ) {
						queries.push( [ $.isFunction( inst.options.items ) ?
							inst.options.items
								.call( inst.element[ 0 ], event, { item: this.currentItem } ) :
							$( inst.options.items, inst.element ), inst ] );
						this.containers.push( inst );
					}
				}
			}
		}

		for ( i = queries.length - 1; i >= 0; i-- ) {
			targetData = queries[ i ][ 1 ];
			_queries = queries[ i ][ 0 ];

			for ( j = 0, queriesLength = _queries.length; j < queriesLength; j++ ) {
				item = $( _queries[ j ] );

				// Data for target checking (mouse manager)
				item.data( this.widgetName + "-item", targetData );

				items.push( {
					item: item,
					instance: targetData,
					width: 0, height: 0,
					left: 0, top: 0
				} );
			}
		}

	},

	refreshPositions: function( fast ) {

		// Determine whether items are being displayed horizontally
		this.floating = this.items.length ?
			this.options.axis === "x" || this._isFloating( this.items[ 0 ].item ) :
			false;

		//This has to be redone because due to the item being moved out/into the offsetParent,
		// the offsetParent's position will change
		if ( this.offsetParent && this.helper ) {
			this.offset.parent = this._getParentOffset();
		}

		var i, item, t, p;

		for ( i = this.items.length - 1; i >= 0; i-- ) {
			item = this.items[ i ];

			//We ignore calculating positions of all connected containers when we're not over them
			if ( item.instance !== this.currentContainer && this.currentContainer &&
					item.item[ 0 ] !== this.currentItem[ 0 ] ) {
				continue;
			}

			t = this.options.toleranceElement ?
				$( this.options.toleranceElement, item.item ) :
				item.item;

			if ( !fast ) {
				item.width = t.outerWidth();
				item.height = t.outerHeight();
			}

			p = t.offset();
			item.left = p.left;
			item.top = p.top;
		}

		if ( this.options.custom && this.options.custom.refreshContainers ) {
			this.options.custom.refreshContainers.call( this );
		} else {
			for ( i = this.containers.length - 1; i >= 0; i-- ) {
				p = this.containers[ i ].element.offset();
				this.containers[ i ].containerCache.left = p.left;
				this.containers[ i ].containerCache.top = p.top;
				this.containers[ i ].containerCache.width =
					this.containers[ i ].element.outerWidth();
				this.containers[ i ].containerCache.height =
					this.containers[ i ].element.outerHeight();
			}
		}

		return this;
	},

	_createPlaceholder: function( that ) {
		that = that || this;
		var className,
			o = that.options;

		if ( !o.placeholder || o.placeholder.constructor === String ) {
			className = o.placeholder;
			o.placeholder = {
				element: function() {

					var nodeName = that.currentItem[ 0 ].nodeName.toLowerCase(),
						element = $( "<" + nodeName + ">", that.document[ 0 ] );

						that._addClass( element, "ui-sortable-placeholder",
								className || that.currentItem[ 0 ].className )
							._removeClass( element, "ui-sortable-helper" );

					if ( nodeName === "tbody" ) {
						that._createTrPlaceholder(
							that.currentItem.find( "tr" ).eq( 0 ),
							$( "<tr>", that.document[ 0 ] ).appendTo( element )
						);
					} else if ( nodeName === "tr" ) {
						that._createTrPlaceholder( that.currentItem, element );
					} else if ( nodeName === "img" ) {
						element.attr( "src", that.currentItem.attr( "src" ) );
					}

					if ( !className ) {
						element.css( "visibility", "hidden" );
					}

					return element;
				},
				update: function( container, p ) {

					// 1. If a className is set as 'placeholder option, we don't force sizes -
					// the class is responsible for that
					// 2. The option 'forcePlaceholderSize can be enabled to force it even if a
					// class name is specified
					if ( className && !o.forcePlaceholderSize ) {
						return;
					}

					//If the element doesn't have a actual height by itself (without styles coming
					// from a stylesheet), it receives the inline height from the dragged item
					if ( !p.height() ) {
						p.height(
							that.currentItem.innerHeight() -
							parseInt( that.currentItem.css( "paddingTop" ) || 0, 10 ) -
							parseInt( that.currentItem.css( "paddingBottom" ) || 0, 10 ) );
					}
					if ( !p.width() ) {
						p.width(
							that.currentItem.innerWidth() -
							parseInt( that.currentItem.css( "paddingLeft" ) || 0, 10 ) -
							parseInt( that.currentItem.css( "paddingRight" ) || 0, 10 ) );
					}
				}
			};
		}

		//Create the placeholder
		that.placeholder = $( o.placeholder.element.call( that.element, that.currentItem ) );

		//Append it after the actual current item
		that.currentItem.after( that.placeholder );

		//Update the size of the placeholder (TODO: Logic to fuzzy, see line 316/317)
		o.placeholder.update( that, that.placeholder );

	},

	_createTrPlaceholder: function( sourceTr, targetTr ) {
		var that = this;

		sourceTr.children().each( function() {
			$( "<td>&#160;</td>", that.document[ 0 ] )
				.attr( "colspan", $( this ).attr( "colspan" ) || 1 )
				.appendTo( targetTr );
		} );
	},

	_contactContainers: function( event ) {
		var i, j, dist, itemWithLeastDistance, posProperty, sizeProperty, cur, nearBottom,
			floating, axis,
			innermostContainer = null,
			innermostIndex = null;

		// Get innermost container that intersects with item
		for ( i = this.containers.length - 1; i >= 0; i-- ) {

			// Never consider a container that's located within the item itself
			if ( $.contains( this.currentItem[ 0 ], this.containers[ i ].element[ 0 ] ) ) {
				continue;
			}

			if ( this._intersectsWith( this.containers[ i ].containerCache ) ) {

				// If we've already found a container and it's more "inner" than this, then continue
				if ( innermostContainer &&
						$.contains(
							this.containers[ i ].element[ 0 ],
							innermostContainer.element[ 0 ] ) ) {
					continue;
				}

				innermostContainer = this.containers[ i ];
				innermostIndex = i;

			} else {

				// container doesn't intersect. trigger "out" event if necessary
				if ( this.containers[ i ].containerCache.over ) {
					this.containers[ i ]._trigger( "out", event, this._uiHash( this ) );
					this.containers[ i ].containerCache.over = 0;
				}
			}

		}

		// If no intersecting containers found, return
		if ( !innermostContainer ) {
			return;
		}

		// Move the item into the container if it's not there already
		if ( this.containers.length === 1 ) {
			if ( !this.containers[ innermostIndex ].containerCache.over ) {
				this.containers[ innermostIndex ]._trigger( "over", event, this._uiHash( this ) );
				this.containers[ innermostIndex ].containerCache.over = 1;
			}
		} else {

			// When entering a new container, we will find the item with the least distance and
			// append our item near it
			dist = 10000;
			itemWithLeastDistance = null;
			floating = innermostContainer.floating || this._isFloating( this.currentItem );
			posProperty = floating ? "left" : "top";
			sizeProperty = floating ? "width" : "height";
			axis = floating ? "pageX" : "pageY";

			for ( j = this.items.length - 1; j >= 0; j-- ) {
				if ( !$.contains(
						this.containers[ innermostIndex ].element[ 0 ], this.items[ j ].item[ 0 ] )
				) {
					continue;
				}
				if ( this.items[ j ].item[ 0 ] === this.currentItem[ 0 ] ) {
					continue;
				}

				cur = this.items[ j ].item.offset()[ posProperty ];
				nearBottom = false;
				if ( event[ axis ] - cur > this.items[ j ][ sizeProperty ] / 2 ) {
					nearBottom = true;
				}

				if ( Math.abs( event[ axis ] - cur ) < dist ) {
					dist = Math.abs( event[ axis ] - cur );
					itemWithLeastDistance = this.items[ j ];
					this.direction = nearBottom ? "up" : "down";
				}
			}

			//Check if dropOnEmpty is enabled
			if ( !itemWithLeastDistance && !this.options.dropOnEmpty ) {
				return;
			}

			if ( this.currentContainer === this.containers[ innermostIndex ] ) {
				if ( !this.currentContainer.containerCache.over ) {
					this.containers[ innermostIndex ]._trigger( "over", event, this._uiHash() );
					this.currentContainer.containerCache.over = 1;
				}
				return;
			}

			itemWithLeastDistance ?
				this._rearrange( event, itemWithLeastDistance, null, true ) :
				this._rearrange( event, null, this.containers[ innermostIndex ].element, true );
			this._trigger( "change", event, this._uiHash() );
			this.containers[ innermostIndex ]._trigger( "change", event, this._uiHash( this ) );
			this.currentContainer = this.containers[ innermostIndex ];

			//Update the placeholder
			this.options.placeholder.update( this.currentContainer, this.placeholder );

			this.containers[ innermostIndex ]._trigger( "over", event, this._uiHash( this ) );
			this.containers[ innermostIndex ].containerCache.over = 1;
		}

	},

	_createHelper: function( event ) {

		var o = this.options,
			helper = $.isFunction( o.helper ) ?
				$( o.helper.apply( this.element[ 0 ], [ event, this.currentItem ] ) ) :
				( o.helper === "clone" ? this.currentItem.clone() : this.currentItem );

		//Add the helper to the DOM if that didn't happen already
		if ( !helper.parents( "body" ).length ) {
			$( o.appendTo !== "parent" ?
				o.appendTo :
				this.currentItem[ 0 ].parentNode )[ 0 ].appendChild( helper[ 0 ] );
		}

		if ( helper[ 0 ] === this.currentItem[ 0 ] ) {
			this._storedCSS = {
				width: this.currentItem[ 0 ].style.width,
				height: this.currentItem[ 0 ].style.height,
				position: this.currentItem.css( "position" ),
				top: this.currentItem.css( "top" ),
				left: this.currentItem.css( "left" )
			};
		}

		if ( !helper[ 0 ].style.width || o.forceHelperSize ) {
			helper.width( this.currentItem.width() );
		}
		if ( !helper[ 0 ].style.height || o.forceHelperSize ) {
			helper.height( this.currentItem.height() );
		}

		return helper;

	},

	_adjustOffsetFromHelper: function( obj ) {
		if ( typeof obj === "string" ) {
			obj = obj.split( " " );
		}
		if ( $.isArray( obj ) ) {
			obj = { left: +obj[ 0 ], top: +obj[ 1 ] || 0 };
		}
		if ( "left" in obj ) {
			this.offset.click.left = obj.left + this.margins.left;
		}
		if ( "right" in obj ) {
			this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
		}
		if ( "top" in obj ) {
			this.offset.click.top = obj.top + this.margins.top;
		}
		if ( "bottom" in obj ) {
			this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
		}
	},

	_getParentOffset: function() {

		//Get the offsetParent and cache its position
		this.offsetParent = this.helper.offsetParent();
		var po = this.offsetParent.offset();

		// This is a special case where we need to modify a offset calculated on start, since the
		// following happened:
		// 1. The position of the helper is absolute, so it's position is calculated based on the
		// next positioned parent
		// 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't
		// the document, which means that the scroll is included in the initial calculation of the
		// offset of the parent, and never recalculated upon drag
		if ( this.cssPosition === "absolute" && this.scrollParent[ 0 ] !== this.document[ 0 ] &&
				$.contains( this.scrollParent[ 0 ], this.offsetParent[ 0 ] ) ) {
			po.left += this.scrollParent.scrollLeft();
			po.top += this.scrollParent.scrollTop();
		}

		// This needs to be actually done for all browsers, since pageX/pageY includes this
		// information with an ugly IE fix
		if ( this.offsetParent[ 0 ] === this.document[ 0 ].body ||
				( this.offsetParent[ 0 ].tagName &&
				this.offsetParent[ 0 ].tagName.toLowerCase() === "html" && $.ui.ie ) ) {
			po = { top: 0, left: 0 };
		}

		return {
			top: po.top + ( parseInt( this.offsetParent.css( "borderTopWidth" ), 10 ) || 0 ),
			left: po.left + ( parseInt( this.offsetParent.css( "borderLeftWidth" ), 10 ) || 0 )
		};

	},

	_getRelativeOffset: function() {

		if ( this.cssPosition === "relative" ) {
			var p = this.currentItem.position();
			return {
				top: p.top - ( parseInt( this.helper.css( "top" ), 10 ) || 0 ) +
					this.scrollParent.scrollTop(),
				left: p.left - ( parseInt( this.helper.css( "left" ), 10 ) || 0 ) +
					this.scrollParent.scrollLeft()
			};
		} else {
			return { top: 0, left: 0 };
		}

	},

	_cacheMargins: function() {
		this.margins = {
			left: ( parseInt( this.currentItem.css( "marginLeft" ), 10 ) || 0 ),
			top: ( parseInt( this.currentItem.css( "marginTop" ), 10 ) || 0 )
		};
	},

	_cacheHelperProportions: function() {
		this.helperProportions = {
			width: this.helper.outerWidth(),
			height: this.helper.outerHeight()
		};
	},

	_setContainment: function() {

		var ce, co, over,
			o = this.options;
		if ( o.containment === "parent" ) {
			o.containment = this.helper[ 0 ].parentNode;
		}
		if ( o.containment === "document" || o.containment === "window" ) {
			this.containment = [
				0 - this.offset.relative.left - this.offset.parent.left,
				0 - this.offset.relative.top - this.offset.parent.top,
				o.containment === "document" ?
					this.document.width() :
					this.window.width() - this.helperProportions.width - this.margins.left,
				( o.containment === "document" ?
					( this.document.height() || document.body.parentNode.scrollHeight ) :
					this.window.height() || this.document[ 0 ].body.parentNode.scrollHeight
				) - this.helperProportions.height - this.margins.top
			];
		}

		if ( !( /^(document|window|parent)$/ ).test( o.containment ) ) {
			ce = $( o.containment )[ 0 ];
			co = $( o.containment ).offset();
			over = ( $( ce ).css( "overflow" ) !== "hidden" );

			this.containment = [
				co.left + ( parseInt( $( ce ).css( "borderLeftWidth" ), 10 ) || 0 ) +
					( parseInt( $( ce ).css( "paddingLeft" ), 10 ) || 0 ) - this.margins.left,
				co.top + ( parseInt( $( ce ).css( "borderTopWidth" ), 10 ) || 0 ) +
					( parseInt( $( ce ).css( "paddingTop" ), 10 ) || 0 ) - this.margins.top,
				co.left + ( over ? Math.max( ce.scrollWidth, ce.offsetWidth ) : ce.offsetWidth ) -
					( parseInt( $( ce ).css( "borderLeftWidth" ), 10 ) || 0 ) -
					( parseInt( $( ce ).css( "paddingRight" ), 10 ) || 0 ) -
					this.helperProportions.width - this.margins.left,
				co.top + ( over ? Math.max( ce.scrollHeight, ce.offsetHeight ) : ce.offsetHeight ) -
					( parseInt( $( ce ).css( "borderTopWidth" ), 10 ) || 0 ) -
					( parseInt( $( ce ).css( "paddingBottom" ), 10 ) || 0 ) -
					this.helperProportions.height - this.margins.top
			];
		}

	},

	_convertPositionTo: function( d, pos ) {

		if ( !pos ) {
			pos = this.position;
		}
		var mod = d === "absolute" ? 1 : -1,
			scroll = this.cssPosition === "absolute" &&
				!( this.scrollParent[ 0 ] !== this.document[ 0 ] &&
				$.contains( this.scrollParent[ 0 ], this.offsetParent[ 0 ] ) ) ?
					this.offsetParent :
					this.scrollParent,
			scrollIsRootNode = ( /(html|body)/i ).test( scroll[ 0 ].tagName );

		return {
			top: (

				// The absolute mouse position
				pos.top	+

				// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.relative.top * mod +

				// The offsetParent's offset without borders (offset + border)
				this.offset.parent.top * mod -
				( ( this.cssPosition === "fixed" ?
					-this.scrollParent.scrollTop() :
					( scrollIsRootNode ? 0 : scroll.scrollTop() ) ) * mod )
			),
			left: (

				// The absolute mouse position
				pos.left +

				// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.relative.left * mod +

				// The offsetParent's offset without borders (offset + border)
				this.offset.parent.left * mod	-
				( ( this.cssPosition === "fixed" ?
					-this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 :
					scroll.scrollLeft() ) * mod )
			)
		};

	},

	_generatePosition: function( event ) {

		var top, left,
			o = this.options,
			pageX = event.pageX,
			pageY = event.pageY,
			scroll = this.cssPosition === "absolute" &&
				!( this.scrollParent[ 0 ] !== this.document[ 0 ] &&
				$.contains( this.scrollParent[ 0 ], this.offsetParent[ 0 ] ) ) ?
					this.offsetParent :
					this.scrollParent,
				scrollIsRootNode = ( /(html|body)/i ).test( scroll[ 0 ].tagName );

		// This is another very weird special case that only happens for relative elements:
		// 1. If the css position is relative
		// 2. and the scroll parent is the document or similar to the offset parent
		// we have to refresh the relative offset during the scroll so there are no jumps
		if ( this.cssPosition === "relative" && !( this.scrollParent[ 0 ] !== this.document[ 0 ] &&
				this.scrollParent[ 0 ] !== this.offsetParent[ 0 ] ) ) {
			this.offset.relative = this._getRelativeOffset();
		}

		/*
		 * - Position constraining -
		 * Constrain the position to a mix of grid, containment.
		 */

		if ( this.originalPosition ) { //If we are not dragging yet, we won't check for options

			if ( this.containment ) {
				if ( event.pageX - this.offset.click.left < this.containment[ 0 ] ) {
					pageX = this.containment[ 0 ] + this.offset.click.left;
				}
				if ( event.pageY - this.offset.click.top < this.containment[ 1 ] ) {
					pageY = this.containment[ 1 ] + this.offset.click.top;
				}
				if ( event.pageX - this.offset.click.left > this.containment[ 2 ] ) {
					pageX = this.containment[ 2 ] + this.offset.click.left;
				}
				if ( event.pageY - this.offset.click.top > this.containment[ 3 ] ) {
					pageY = this.containment[ 3 ] + this.offset.click.top;
				}
			}

			if ( o.grid ) {
				top = this.originalPageY + Math.round( ( pageY - this.originalPageY ) /
					o.grid[ 1 ] ) * o.grid[ 1 ];
				pageY = this.containment ?
					( ( top - this.offset.click.top >= this.containment[ 1 ] &&
						top - this.offset.click.top <= this.containment[ 3 ] ) ?
							top :
							( ( top - this.offset.click.top >= this.containment[ 1 ] ) ?
								top - o.grid[ 1 ] : top + o.grid[ 1 ] ) ) :
								top;

				left = this.originalPageX + Math.round( ( pageX - this.originalPageX ) /
					o.grid[ 0 ] ) * o.grid[ 0 ];
				pageX = this.containment ?
					( ( left - this.offset.click.left >= this.containment[ 0 ] &&
						left - this.offset.click.left <= this.containment[ 2 ] ) ?
							left :
							( ( left - this.offset.click.left >= this.containment[ 0 ] ) ?
								left - o.grid[ 0 ] : left + o.grid[ 0 ] ) ) :
								left;
			}

		}

		return {
			top: (

				// The absolute mouse position
				pageY -

				// Click offset (relative to the element)
				this.offset.click.top -

				// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.relative.top -

				// The offsetParent's offset without borders (offset + border)
				this.offset.parent.top +
				( ( this.cssPosition === "fixed" ?
					-this.scrollParent.scrollTop() :
					( scrollIsRootNode ? 0 : scroll.scrollTop() ) ) )
			),
			left: (

				// The absolute mouse position
				pageX -

				// Click offset (relative to the element)
				this.offset.click.left -

				// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.relative.left -

				// The offsetParent's offset without borders (offset + border)
				this.offset.parent.left +
				( ( this.cssPosition === "fixed" ?
					-this.scrollParent.scrollLeft() :
					scrollIsRootNode ? 0 : scroll.scrollLeft() ) )
			)
		};

	},

	_rearrange: function( event, i, a, hardRefresh ) {

		a ? a[ 0 ].appendChild( this.placeholder[ 0 ] ) :
			i.item[ 0 ].parentNode.insertBefore( this.placeholder[ 0 ],
				( this.direction === "down" ? i.item[ 0 ] : i.item[ 0 ].nextSibling ) );

		//Various things done here to improve the performance:
		// 1. we create a setTimeout, that calls refreshPositions
		// 2. on the instance, we have a counter variable, that get's higher after every append
		// 3. on the local scope, we copy the counter variable, and check in the timeout,
		// if it's still the same
		// 4. this lets only the last addition to the timeout stack through
		this.counter = this.counter ? ++this.counter : 1;
		var counter = this.counter;

		this._delay( function() {
			if ( counter === this.counter ) {

				//Precompute after each DOM insertion, NOT on mousemove
				this.refreshPositions( !hardRefresh );
			}
		} );

	},

	_clear: function( event, noPropagation ) {

		this.reverting = false;

		// We delay all events that have to be triggered to after the point where the placeholder
		// has been removed and everything else normalized again
		var i,
			delayedTriggers = [];

		// We first have to update the dom position of the actual currentItem
		// Note: don't do it if the current item is already removed (by a user), or it gets
		// reappended (see #4088)
		if ( !this._noFinalSort && this.currentItem.parent().length ) {
			this.placeholder.before( this.currentItem );
		}
		this._noFinalSort = null;

		if ( this.helper[ 0 ] === this.currentItem[ 0 ] ) {
			for ( i in this._storedCSS ) {
				if ( this._storedCSS[ i ] === "auto" || this._storedCSS[ i ] === "static" ) {
					this._storedCSS[ i ] = "";
				}
			}
			this.currentItem.css( this._storedCSS );
			this._removeClass( this.currentItem, "ui-sortable-helper" );
		} else {
			this.currentItem.show();
		}

		if ( this.fromOutside && !noPropagation ) {
			delayedTriggers.push( function( event ) {
				this._trigger( "receive", event, this._uiHash( this.fromOutside ) );
			} );
		}
		if ( ( this.fromOutside ||
				this.domPosition.prev !==
				this.currentItem.prev().not( ".ui-sortable-helper" )[ 0 ] ||
				this.domPosition.parent !== this.currentItem.parent()[ 0 ] ) && !noPropagation ) {

			// Trigger update callback if the DOM position has changed
			delayedTriggers.push( function( event ) {
				this._trigger( "update", event, this._uiHash() );
			} );
		}

		// Check if the items Container has Changed and trigger appropriate
		// events.
		if ( this !== this.currentContainer ) {
			if ( !noPropagation ) {
				delayedTriggers.push( function( event ) {
					this._trigger( "remove", event, this._uiHash() );
				} );
				delayedTriggers.push( ( function( c ) {
					return function( event ) {
						c._trigger( "receive", event, this._uiHash( this ) );
					};
				} ).call( this, this.currentContainer ) );
				delayedTriggers.push( ( function( c ) {
					return function( event ) {
						c._trigger( "update", event, this._uiHash( this ) );
					};
				} ).call( this, this.currentContainer ) );
			}
		}

		//Post events to containers
		function delayEvent( type, instance, container ) {
			return function( event ) {
				container._trigger( type, event, instance._uiHash( instance ) );
			};
		}
		for ( i = this.containers.length - 1; i >= 0; i-- ) {
			if ( !noPropagation ) {
				delayedTriggers.push( delayEvent( "deactivate", this, this.containers[ i ] ) );
			}
			if ( this.containers[ i ].containerCache.over ) {
				delayedTriggers.push( delayEvent( "out", this, this.containers[ i ] ) );
				this.containers[ i ].containerCache.over = 0;
			}
		}

		//Do what was originally in plugins
		if ( this.storedCursor ) {
			this.document.find( "body" ).css( "cursor", this.storedCursor );
			this.storedStylesheet.remove();
		}
		if ( this._storedOpacity ) {
			this.helper.css( "opacity", this._storedOpacity );
		}
		if ( this._storedZIndex ) {
			this.helper.css( "zIndex", this._storedZIndex === "auto" ? "" : this._storedZIndex );
		}

		this.dragging = false;

		if ( !noPropagation ) {
			this._trigger( "beforeStop", event, this._uiHash() );
		}

		//$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately,
		// it unbinds ALL events from the original node!
		this.placeholder[ 0 ].parentNode.removeChild( this.placeholder[ 0 ] );

		if ( !this.cancelHelperRemoval ) {
			if ( this.helper[ 0 ] !== this.currentItem[ 0 ] ) {
				this.helper.remove();
			}
			this.helper = null;
		}

		if ( !noPropagation ) {
			for ( i = 0; i < delayedTriggers.length; i++ ) {

				// Trigger all delayed events
				delayedTriggers[ i ].call( this, event );
			}
			this._trigger( "stop", event, this._uiHash() );
		}

		this.fromOutside = false;
		return !this.cancelHelperRemoval;

	},

	_trigger: function() {
		if ( $.Widget.prototype._trigger.apply( this, arguments ) === false ) {
			this.cancel();
		}
	},

	_uiHash: function( _inst ) {
		var inst = _inst || this;
		return {
			helper: inst.helper,
			placeholder: inst.placeholder || $( [] ),
			position: inst.position,
			originalPosition: inst.originalPosition,
			offset: inst.positionAbs,
			item: inst.currentItem,
			sender: _inst ? _inst.element : null
		};
	}

} );


/*!
 * jQuery UI Spinner 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Spinner
//>>group: Widgets
//>>description: Displays buttons to easily input numbers via the keyboard or mouse.
//>>docs: http://api.jqueryui.com/spinner/
//>>demos: http://jqueryui.com/spinner/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/spinner.css
//>>css.theme: ../../themes/base/theme.css



function spinnerModifer( fn ) {
	return function() {
		var previous = this.element.val();
		fn.apply( this, arguments );
		this._refresh();
		if ( previous !== this.element.val() ) {
			this._trigger( "change" );
		}
	};
}

$.widget( "ui.spinner", {
	version: "1.12.1",
	defaultElement: "<input>",
	widgetEventPrefix: "spin",
	options: {
		classes: {
			"ui-spinner": "ui-corner-all",
			"ui-spinner-down": "ui-corner-br",
			"ui-spinner-up": "ui-corner-tr"
		},
		culture: null,
		icons: {
			down: "ui-icon-triangle-1-s",
			up: "ui-icon-triangle-1-n"
		},
		incremental: true,
		max: null,
		min: null,
		numberFormat: null,
		page: 10,
		step: 1,

		change: null,
		spin: null,
		start: null,
		stop: null
	},

	_create: function() {

		// handle string values that need to be parsed
		this._setOption( "max", this.options.max );
		this._setOption( "min", this.options.min );
		this._setOption( "step", this.options.step );

		// Only format if there is a value, prevents the field from being marked
		// as invalid in Firefox, see #9573.
		if ( this.value() !== "" ) {

			// Format the value, but don't constrain.
			this._value( this.element.val(), true );
		}

		this._draw();
		this._on( this._events );
		this._refresh();

		// Turning off autocomplete prevents the browser from remembering the
		// value when navigating through history, so we re-enable autocomplete
		// if the page is unloaded before the widget is destroyed. #7790
		this._on( this.window, {
			beforeunload: function() {
				this.element.removeAttr( "autocomplete" );
			}
		} );
	},

	_getCreateOptions: function() {
		var options = this._super();
		var element = this.element;

		$.each( [ "min", "max", "step" ], function( i, option ) {
			var value = element.attr( option );
			if ( value != null && value.length ) {
				options[ option ] = value;
			}
		} );

		return options;
	},

	_events: {
		keydown: function( event ) {
			if ( this._start( event ) && this._keydown( event ) ) {
				event.preventDefault();
			}
		},
		keyup: "_stop",
		focus: function() {
			this.previous = this.element.val();
		},
		blur: function( event ) {
			if ( this.cancelBlur ) {
				delete this.cancelBlur;
				return;
			}

			this._stop();
			this._refresh();
			if ( this.previous !== this.element.val() ) {
				this._trigger( "change", event );
			}
		},
		mousewheel: function( event, delta ) {
			if ( !delta ) {
				return;
			}
			if ( !this.spinning && !this._start( event ) ) {
				return false;
			}

			this._spin( ( delta > 0 ? 1 : -1 ) * this.options.step, event );
			clearTimeout( this.mousewheelTimer );
			this.mousewheelTimer = this._delay( function() {
				if ( this.spinning ) {
					this._stop( event );
				}
			}, 100 );
			event.preventDefault();
		},
		"mousedown .ui-spinner-button": function( event ) {
			var previous;

			// We never want the buttons to have focus; whenever the user is
			// interacting with the spinner, the focus should be on the input.
			// If the input is focused then this.previous is properly set from
			// when the input first received focus. If the input is not focused
			// then we need to set this.previous based on the value before spinning.
			previous = this.element[ 0 ] === $.ui.safeActiveElement( this.document[ 0 ] ) ?
				this.previous : this.element.val();
			function checkFocus() {
				var isActive = this.element[ 0 ] === $.ui.safeActiveElement( this.document[ 0 ] );
				if ( !isActive ) {
					this.element.trigger( "focus" );
					this.previous = previous;

					// support: IE
					// IE sets focus asynchronously, so we need to check if focus
					// moved off of the input because the user clicked on the button.
					this._delay( function() {
						this.previous = previous;
					} );
				}
			}

			// Ensure focus is on (or stays on) the text field
			event.preventDefault();
			checkFocus.call( this );

			// Support: IE
			// IE doesn't prevent moving focus even with event.preventDefault()
			// so we set a flag to know when we should ignore the blur event
			// and check (again) if focus moved off of the input.
			this.cancelBlur = true;
			this._delay( function() {
				delete this.cancelBlur;
				checkFocus.call( this );
			} );

			if ( this._start( event ) === false ) {
				return;
			}

			this._repeat( null, $( event.currentTarget )
				.hasClass( "ui-spinner-up" ) ? 1 : -1, event );
		},
		"mouseup .ui-spinner-button": "_stop",
		"mouseenter .ui-spinner-button": function( event ) {

			// button will add ui-state-active if mouse was down while mouseleave and kept down
			if ( !$( event.currentTarget ).hasClass( "ui-state-active" ) ) {
				return;
			}

			if ( this._start( event ) === false ) {
				return false;
			}
			this._repeat( null, $( event.currentTarget )
				.hasClass( "ui-spinner-up" ) ? 1 : -1, event );
		},

		// TODO: do we really want to consider this a stop?
		// shouldn't we just stop the repeater and wait until mouseup before
		// we trigger the stop event?
		"mouseleave .ui-spinner-button": "_stop"
	},

	// Support mobile enhanced option and make backcompat more sane
	_enhance: function() {
		this.uiSpinner = this.element
			.attr( "autocomplete", "off" )
			.wrap( "<span>" )
			.parent()

				// Add buttons
				.append(
					"<a></a><a></a>"
				);
	},

	_draw: function() {
		this._enhance();

		this._addClass( this.uiSpinner, "ui-spinner", "ui-widget ui-widget-content" );
		this._addClass( "ui-spinner-input" );

		this.element.attr( "role", "spinbutton" );

		// Button bindings
		this.buttons = this.uiSpinner.children( "a" )
			.attr( "tabIndex", -1 )
			.attr( "aria-hidden", true )
			.button( {
				classes: {
					"ui-button": ""
				}
			} );

		// TODO: Right now button does not support classes this is already updated in button PR
		this._removeClass( this.buttons, "ui-corner-all" );

		this._addClass( this.buttons.first(), "ui-spinner-button ui-spinner-up" );
		this._addClass( this.buttons.last(), "ui-spinner-button ui-spinner-down" );
		this.buttons.first().button( {
			"icon": this.options.icons.up,
			"showLabel": false
		} );
		this.buttons.last().button( {
			"icon": this.options.icons.down,
			"showLabel": false
		} );

		// IE 6 doesn't understand height: 50% for the buttons
		// unless the wrapper has an explicit height
		if ( this.buttons.height() > Math.ceil( this.uiSpinner.height() * 0.5 ) &&
				this.uiSpinner.height() > 0 ) {
			this.uiSpinner.height( this.uiSpinner.height() );
		}
	},

	_keydown: function( event ) {
		var options = this.options,
			keyCode = $.ui.keyCode;

		switch ( event.keyCode ) {
		case keyCode.UP:
			this._repeat( null, 1, event );
			return true;
		case keyCode.DOWN:
			this._repeat( null, -1, event );
			return true;
		case keyCode.PAGE_UP:
			this._repeat( null, options.page, event );
			return true;
		case keyCode.PAGE_DOWN:
			this._repeat( null, -options.page, event );
			return true;
		}

		return false;
	},

	_start: function( event ) {
		if ( !this.spinning && this._trigger( "start", event ) === false ) {
			return false;
		}

		if ( !this.counter ) {
			this.counter = 1;
		}
		this.spinning = true;
		return true;
	},

	_repeat: function( i, steps, event ) {
		i = i || 500;

		clearTimeout( this.timer );
		this.timer = this._delay( function() {
			this._repeat( 40, steps, event );
		}, i );

		this._spin( steps * this.options.step, event );
	},

	_spin: function( step, event ) {
		var value = this.value() || 0;

		if ( !this.counter ) {
			this.counter = 1;
		}

		value = this._adjustValue( value + step * this._increment( this.counter ) );

		if ( !this.spinning || this._trigger( "spin", event, { value: value } ) !== false ) {
			this._value( value );
			this.counter++;
		}
	},

	_increment: function( i ) {
		var incremental = this.options.incremental;

		if ( incremental ) {
			return $.isFunction( incremental ) ?
				incremental( i ) :
				Math.floor( i * i * i / 50000 - i * i / 500 + 17 * i / 200 + 1 );
		}

		return 1;
	},

	_precision: function() {
		var precision = this._precisionOf( this.options.step );
		if ( this.options.min !== null ) {
			precision = Math.max( precision, this._precisionOf( this.options.min ) );
		}
		return precision;
	},

	_precisionOf: function( num ) {
		var str = num.toString(),
			decimal = str.indexOf( "." );
		return decimal === -1 ? 0 : str.length - decimal - 1;
	},

	_adjustValue: function( value ) {
		var base, aboveMin,
			options = this.options;

		// Make sure we're at a valid step
		// - find out where we are relative to the base (min or 0)
		base = options.min !== null ? options.min : 0;
		aboveMin = value - base;

		// - round to the nearest step
		aboveMin = Math.round( aboveMin / options.step ) * options.step;

		// - rounding is based on 0, so adjust back to our base
		value = base + aboveMin;

		// Fix precision from bad JS floating point math
		value = parseFloat( value.toFixed( this._precision() ) );

		// Clamp the value
		if ( options.max !== null && value > options.max ) {
			return options.max;
		}
		if ( options.min !== null && value < options.min ) {
			return options.min;
		}

		return value;
	},

	_stop: function( event ) {
		if ( !this.spinning ) {
			return;
		}

		clearTimeout( this.timer );
		clearTimeout( this.mousewheelTimer );
		this.counter = 0;
		this.spinning = false;
		this._trigger( "stop", event );
	},

	_setOption: function( key, value ) {
		var prevValue, first, last;

		if ( key === "culture" || key === "numberFormat" ) {
			prevValue = this._parse( this.element.val() );
			this.options[ key ] = value;
			this.element.val( this._format( prevValue ) );
			return;
		}

		if ( key === "max" || key === "min" || key === "step" ) {
			if ( typeof value === "string" ) {
				value = this._parse( value );
			}
		}
		if ( key === "icons" ) {
			first = this.buttons.first().find( ".ui-icon" );
			this._removeClass( first, null, this.options.icons.up );
			this._addClass( first, null, value.up );
			last = this.buttons.last().find( ".ui-icon" );
			this._removeClass( last, null, this.options.icons.down );
			this._addClass( last, null, value.down );
		}

		this._super( key, value );
	},

	_setOptionDisabled: function( value ) {
		this._super( value );

		this._toggleClass( this.uiSpinner, null, "ui-state-disabled", !!value );
		this.element.prop( "disabled", !!value );
		this.buttons.button( value ? "disable" : "enable" );
	},

	_setOptions: spinnerModifer( function( options ) {
		this._super( options );
	} ),

	_parse: function( val ) {
		if ( typeof val === "string" && val !== "" ) {
			val = window.Globalize && this.options.numberFormat ?
				Globalize.parseFloat( val, 10, this.options.culture ) : +val;
		}
		return val === "" || isNaN( val ) ? null : val;
	},

	_format: function( value ) {
		if ( value === "" ) {
			return "";
		}
		return window.Globalize && this.options.numberFormat ?
			Globalize.format( value, this.options.numberFormat, this.options.culture ) :
			value;
	},

	_refresh: function() {
		this.element.attr( {
			"aria-valuemin": this.options.min,
			"aria-valuemax": this.options.max,

			// TODO: what should we do with values that can't be parsed?
			"aria-valuenow": this._parse( this.element.val() )
		} );
	},

	isValid: function() {
		var value = this.value();

		// Null is invalid
		if ( value === null ) {
			return false;
		}

		// If value gets adjusted, it's invalid
		return value === this._adjustValue( value );
	},

	// Update the value without triggering change
	_value: function( value, allowAny ) {
		var parsed;
		if ( value !== "" ) {
			parsed = this._parse( value );
			if ( parsed !== null ) {
				if ( !allowAny ) {
					parsed = this._adjustValue( parsed );
				}
				value = this._format( parsed );
			}
		}
		this.element.val( value );
		this._refresh();
	},

	_destroy: function() {
		this.element
			.prop( "disabled", false )
			.removeAttr( "autocomplete role aria-valuemin aria-valuemax aria-valuenow" );

		this.uiSpinner.replaceWith( this.element );
	},

	stepUp: spinnerModifer( function( steps ) {
		this._stepUp( steps );
	} ),
	_stepUp: function( steps ) {
		if ( this._start() ) {
			this._spin( ( steps || 1 ) * this.options.step );
			this._stop();
		}
	},

	stepDown: spinnerModifer( function( steps ) {
		this._stepDown( steps );
	} ),
	_stepDown: function( steps ) {
		if ( this._start() ) {
			this._spin( ( steps || 1 ) * -this.options.step );
			this._stop();
		}
	},

	pageUp: spinnerModifer( function( pages ) {
		this._stepUp( ( pages || 1 ) * this.options.page );
	} ),

	pageDown: spinnerModifer( function( pages ) {
		this._stepDown( ( pages || 1 ) * this.options.page );
	} ),

	value: function( newVal ) {
		if ( !arguments.length ) {
			return this._parse( this.element.val() );
		}
		spinnerModifer( this._value ).call( this, newVal );
	},

	widget: function() {
		return this.uiSpinner;
	}
} );

// DEPRECATED
// TODO: switch return back to widget declaration at top of file when this is removed
if ( $.uiBackCompat !== false ) {

	// Backcompat for spinner html extension points
	$.widget( "ui.spinner", $.ui.spinner, {
		_enhance: function() {
			this.uiSpinner = this.element
				.attr( "autocomplete", "off" )
				.wrap( this._uiSpinnerHtml() )
				.parent()

					// Add buttons
					.append( this._buttonHtml() );
		},
		_uiSpinnerHtml: function() {
			return "<span>";
		},

		_buttonHtml: function() {
			return "<a></a><a></a>";
		}
	} );
}

var widgetsSpinner = $.ui.spinner;


/*!
 * jQuery UI Tabs 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Tabs
//>>group: Widgets
//>>description: Transforms a set of container elements into a tab structure.
//>>docs: http://api.jqueryui.com/tabs/
//>>demos: http://jqueryui.com/tabs/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/tabs.css
//>>css.theme: ../../themes/base/theme.css



$.widget( "ui.tabs", {
	version: "1.12.1",
	delay: 300,
	options: {
		active: null,
		classes: {
			"ui-tabs": "ui-corner-all",
			"ui-tabs-nav": "ui-corner-all",
			"ui-tabs-panel": "ui-corner-bottom",
			"ui-tabs-tab": "ui-corner-top"
		},
		collapsible: false,
		event: "click",
		heightStyle: "content",
		hide: null,
		show: null,

		// Callbacks
		activate: null,
		beforeActivate: null,
		beforeLoad: null,
		load: null
	},

	_isLocal: ( function() {
		var rhash = /#.*$/;

		return function( anchor ) {
			var anchorUrl, locationUrl;

			anchorUrl = anchor.href.replace( rhash, "" );
			locationUrl = location.href.replace( rhash, "" );

			// Decoding may throw an error if the URL isn't UTF-8 (#9518)
			try {
				anchorUrl = decodeURIComponent( anchorUrl );
			} catch ( error ) {}
			try {
				locationUrl = decodeURIComponent( locationUrl );
			} catch ( error ) {}

			return anchor.hash.length > 1 && anchorUrl === locationUrl;
		};
	} )(),

	_create: function() {
		var that = this,
			options = this.options;

		this.running = false;

		this._addClass( "ui-tabs", "ui-widget ui-widget-content" );
		this._toggleClass( "ui-tabs-collapsible", null, options.collapsible );

		this._processTabs();
		options.active = this._initialActive();

		// Take disabling tabs via class attribute from HTML
		// into account and update option properly.
		if ( $.isArray( options.disabled ) ) {
			options.disabled = $.unique( options.disabled.concat(
				$.map( this.tabs.filter( ".ui-state-disabled" ), function( li ) {
					return that.tabs.index( li );
				} )
			) ).sort();
		}

		// Check for length avoids error when initializing empty list
		if ( this.options.active !== false && this.anchors.length ) {
			this.active = this._findActive( options.active );
		} else {
			this.active = $();
		}

		this._refresh();

		if ( this.active.length ) {
			this.load( options.active );
		}
	},

	_initialActive: function() {
		var active = this.options.active,
			collapsible = this.options.collapsible,
			locationHash = location.hash.substring( 1 );

		if ( active === null ) {

			// check the fragment identifier in the URL
			if ( locationHash ) {
				this.tabs.each( function( i, tab ) {
					if ( $( tab ).attr( "aria-controls" ) === locationHash ) {
						active = i;
						return false;
					}
				} );
			}

			// Check for a tab marked active via a class
			if ( active === null ) {
				active = this.tabs.index( this.tabs.filter( ".ui-tabs-active" ) );
			}

			// No active tab, set to false
			if ( active === null || active === -1 ) {
				active = this.tabs.length ? 0 : false;
			}
		}

		// Handle numbers: negative, out of range
		if ( active !== false ) {
			active = this.tabs.index( this.tabs.eq( active ) );
			if ( active === -1 ) {
				active = collapsible ? false : 0;
			}
		}

		// Don't allow collapsible: false and active: false
		if ( !collapsible && active === false && this.anchors.length ) {
			active = 0;
		}

		return active;
	},

	_getCreateEventData: function() {
		return {
			tab: this.active,
			panel: !this.active.length ? $() : this._getPanelForTab( this.active )
		};
	},

	_tabKeydown: function( event ) {
		var focusedTab = $( $.ui.safeActiveElement( this.document[ 0 ] ) ).closest( "li" ),
			selectedIndex = this.tabs.index( focusedTab ),
			goingForward = true;

		if ( this._handlePageNav( event ) ) {
			return;
		}

		switch ( event.keyCode ) {
		case $.ui.keyCode.RIGHT:
		case $.ui.keyCode.DOWN:
			selectedIndex++;
			break;
		case $.ui.keyCode.UP:
		case $.ui.keyCode.LEFT:
			goingForward = false;
			selectedIndex--;
			break;
		case $.ui.keyCode.END:
			selectedIndex = this.anchors.length - 1;
			break;
		case $.ui.keyCode.HOME:
			selectedIndex = 0;
			break;
		case $.ui.keyCode.SPACE:

			// Activate only, no collapsing
			event.preventDefault();
			clearTimeout( this.activating );
			this._activate( selectedIndex );
			return;
		case $.ui.keyCode.ENTER:

			// Toggle (cancel delayed activation, allow collapsing)
			event.preventDefault();
			clearTimeout( this.activating );

			// Determine if we should collapse or activate
			this._activate( selectedIndex === this.options.active ? false : selectedIndex );
			return;
		default:
			return;
		}

		// Focus the appropriate tab, based on which key was pressed
		event.preventDefault();
		clearTimeout( this.activating );
		selectedIndex = this._focusNextTab( selectedIndex, goingForward );

		// Navigating with control/command key will prevent automatic activation
		if ( !event.ctrlKey && !event.metaKey ) {

			// Update aria-selected immediately so that AT think the tab is already selected.
			// Otherwise AT may confuse the user by stating that they need to activate the tab,
			// but the tab will already be activated by the time the announcement finishes.
			focusedTab.attr( "aria-selected", "false" );
			this.tabs.eq( selectedIndex ).attr( "aria-selected", "true" );

			this.activating = this._delay( function() {
				this.option( "active", selectedIndex );
			}, this.delay );
		}
	},

	_panelKeydown: function( event ) {
		if ( this._handlePageNav( event ) ) {
			return;
		}

		// Ctrl+up moves focus to the current tab
		if ( event.ctrlKey && event.keyCode === $.ui.keyCode.UP ) {
			event.preventDefault();
			this.active.trigger( "focus" );
		}
	},

	// Alt+page up/down moves focus to the previous/next tab (and activates)
	_handlePageNav: function( event ) {
		if ( event.altKey && event.keyCode === $.ui.keyCode.PAGE_UP ) {
			this._activate( this._focusNextTab( this.options.active - 1, false ) );
			return true;
		}
		if ( event.altKey && event.keyCode === $.ui.keyCode.PAGE_DOWN ) {
			this._activate( this._focusNextTab( this.options.active + 1, true ) );
			return true;
		}
	},

	_findNextTab: function( index, goingForward ) {
		var lastTabIndex = this.tabs.length - 1;

		function constrain() {
			if ( index > lastTabIndex ) {
				index = 0;
			}
			if ( index < 0 ) {
				index = lastTabIndex;
			}
			return index;
		}

		while ( $.inArray( constrain(), this.options.disabled ) !== -1 ) {
			index = goingForward ? index + 1 : index - 1;
		}

		return index;
	},

	_focusNextTab: function( index, goingForward ) {
		index = this._findNextTab( index, goingForward );
		this.tabs.eq( index ).trigger( "focus" );
		return index;
	},

	_setOption: function( key, value ) {
		if ( key === "active" ) {

			// _activate() will handle invalid values and update this.options
			this._activate( value );
			return;
		}

		this._super( key, value );

		if ( key === "collapsible" ) {
			this._toggleClass( "ui-tabs-collapsible", null, value );

			// Setting collapsible: false while collapsed; open first panel
			if ( !value && this.options.active === false ) {
				this._activate( 0 );
			}
		}

		if ( key === "event" ) {
			this._setupEvents( value );
		}

		if ( key === "heightStyle" ) {
			this._setupHeightStyle( value );
		}
	},

	_sanitizeSelector: function( hash ) {
		return hash ? hash.replace( /[!"$%&'()*+,.\/:;<=>?@\[\]\^`{|}~]/g, "\\$&" ) : "";
	},

	refresh: function() {
		var options = this.options,
			lis = this.tablist.children( ":has(a[href])" );

		// Get disabled tabs from class attribute from HTML
		// this will get converted to a boolean if needed in _refresh()
		options.disabled = $.map( lis.filter( ".ui-state-disabled" ), function( tab ) {
			return lis.index( tab );
		} );

		this._processTabs();

		// Was collapsed or no tabs
		if ( options.active === false || !this.anchors.length ) {
			options.active = false;
			this.active = $();

		// was active, but active tab is gone
		} else if ( this.active.length && !$.contains( this.tablist[ 0 ], this.active[ 0 ] ) ) {

			// all remaining tabs are disabled
			if ( this.tabs.length === options.disabled.length ) {
				options.active = false;
				this.active = $();

			// activate previous tab
			} else {
				this._activate( this._findNextTab( Math.max( 0, options.active - 1 ), false ) );
			}

		// was active, active tab still exists
		} else {

			// make sure active index is correct
			options.active = this.tabs.index( this.active );
		}

		this._refresh();
	},

	_refresh: function() {
		this._setOptionDisabled( this.options.disabled );
		this._setupEvents( this.options.event );
		this._setupHeightStyle( this.options.heightStyle );

		this.tabs.not( this.active ).attr( {
			"aria-selected": "false",
			"aria-expanded": "false",
			tabIndex: -1
		} );
		this.panels.not( this._getPanelForTab( this.active ) )
			.hide()
			.attr( {
				"aria-hidden": "true"
			} );

		// Make sure one tab is in the tab order
		if ( !this.active.length ) {
			this.tabs.eq( 0 ).attr( "tabIndex", 0 );
		} else {
			this.active
				.attr( {
					"aria-selected": "true",
					"aria-expanded": "true",
					tabIndex: 0
				} );
			this._addClass( this.active, "ui-tabs-active", "ui-state-active" );
			this._getPanelForTab( this.active )
				.show()
				.attr( {
					"aria-hidden": "false"
				} );
		}
	},

	_processTabs: function() {
		var that = this,
			prevTabs = this.tabs,
			prevAnchors = this.anchors,
			prevPanels = this.panels;

		this.tablist = this._getList().attr( "role", "tablist" );
		this._addClass( this.tablist, "ui-tabs-nav",
			"ui-helper-reset ui-helper-clearfix ui-widget-header" );

		// Prevent users from focusing disabled tabs via click
		this.tablist
			.on( "mousedown" + this.eventNamespace, "> li", function( event ) {
				if ( $( this ).is( ".ui-state-disabled" ) ) {
					event.preventDefault();
				}
			} )

			// Support: IE <9
			// Preventing the default action in mousedown doesn't prevent IE
			// from focusing the element, so if the anchor gets focused, blur.
			// We don't have to worry about focusing the previously focused
			// element since clicking on a non-focusable element should focus
			// the body anyway.
			.on( "focus" + this.eventNamespace, ".ui-tabs-anchor", function() {
				if ( $( this ).closest( "li" ).is( ".ui-state-disabled" ) ) {
					this.blur();
				}
			} );

		this.tabs = this.tablist.find( "> li:has(a[href])" )
			.attr( {
				role: "tab",
				tabIndex: -1
			} );
		this._addClass( this.tabs, "ui-tabs-tab", "ui-state-default" );

		this.anchors = this.tabs.map( function() {
			return $( "a", this )[ 0 ];
		} )
			.attr( {
				role: "presentation",
				tabIndex: -1
			} );
		this._addClass( this.anchors, "ui-tabs-anchor" );

		this.panels = $();

		this.anchors.each( function( i, anchor ) {
			var selector, panel, panelId,
				anchorId = $( anchor ).uniqueId().attr( "id" ),
				tab = $( anchor ).closest( "li" ),
				originalAriaControls = tab.attr( "aria-controls" );

			// Inline tab
			if ( that._isLocal( anchor ) ) {
				selector = anchor.hash;
				panelId = selector.substring( 1 );
				panel = that.element.find( that._sanitizeSelector( selector ) );

			// remote tab
			} else {

				// If the tab doesn't already have aria-controls,
				// generate an id by using a throw-away element
				panelId = tab.attr( "aria-controls" ) || $( {} ).uniqueId()[ 0 ].id;
				selector = "#" + panelId;
				panel = that.element.find( selector );
				if ( !panel.length ) {
					panel = that._createPanel( panelId );
					panel.insertAfter( that.panels[ i - 1 ] || that.tablist );
				}
				panel.attr( "aria-live", "polite" );
			}

			if ( panel.length ) {
				that.panels = that.panels.add( panel );
			}
			if ( originalAriaControls ) {
				tab.data( "ui-tabs-aria-controls", originalAriaControls );
			}
			tab.attr( {
				"aria-controls": panelId,
				"aria-labelledby": anchorId
			} );
			panel.attr( "aria-labelledby", anchorId );
		} );

		this.panels.attr( "role", "tabpanel" );
		this._addClass( this.panels, "ui-tabs-panel", "ui-widget-content" );

		// Avoid memory leaks (#10056)
		if ( prevTabs ) {
			this._off( prevTabs.not( this.tabs ) );
			this._off( prevAnchors.not( this.anchors ) );
			this._off( prevPanels.not( this.panels ) );
		}
	},

	// Allow overriding how to find the list for rare usage scenarios (#7715)
	_getList: function() {
		return this.tablist || this.element.find( "ol, ul" ).eq( 0 );
	},

	_createPanel: function( id ) {
		return $( "<div>" )
			.attr( "id", id )
			.data( "ui-tabs-destroy", true );
	},

	_setOptionDisabled: function( disabled ) {
		var currentItem, li, i;

		if ( $.isArray( disabled ) ) {
			if ( !disabled.length ) {
				disabled = false;
			} else if ( disabled.length === this.anchors.length ) {
				disabled = true;
			}
		}

		// Disable tabs
		for ( i = 0; ( li = this.tabs[ i ] ); i++ ) {
			currentItem = $( li );
			if ( disabled === true || $.inArray( i, disabled ) !== -1 ) {
				currentItem.attr( "aria-disabled", "true" );
				this._addClass( currentItem, null, "ui-state-disabled" );
			} else {
				currentItem.removeAttr( "aria-disabled" );
				this._removeClass( currentItem, null, "ui-state-disabled" );
			}
		}

		this.options.disabled = disabled;

		this._toggleClass( this.widget(), this.widgetFullName + "-disabled", null,
			disabled === true );
	},

	_setupEvents: function( event ) {
		var events = {};
		if ( event ) {
			$.each( event.split( " " ), function( index, eventName ) {
				events[ eventName ] = "_eventHandler";
			} );
		}

		this._off( this.anchors.add( this.tabs ).add( this.panels ) );

		// Always prevent the default action, even when disabled
		this._on( true, this.anchors, {
			click: function( event ) {
				event.preventDefault();
			}
		} );
		this._on( this.anchors, events );
		this._on( this.tabs, { keydown: "_tabKeydown" } );
		this._on( this.panels, { keydown: "_panelKeydown" } );

		this._focusable( this.tabs );
		this._hoverable( this.tabs );
	},

	_setupHeightStyle: function( heightStyle ) {
		var maxHeight,
			parent = this.element.parent();

		if ( heightStyle === "fill" ) {
			maxHeight = parent.height();
			maxHeight -= this.element.outerHeight() - this.element.height();

			this.element.siblings( ":visible" ).each( function() {
				var elem = $( this ),
					position = elem.css( "position" );

				if ( position === "absolute" || position === "fixed" ) {
					return;
				}
				maxHeight -= elem.outerHeight( true );
			} );

			this.element.children().not( this.panels ).each( function() {
				maxHeight -= $( this ).outerHeight( true );
			} );

			this.panels.each( function() {
				$( this ).height( Math.max( 0, maxHeight -
					$( this ).innerHeight() + $( this ).height() ) );
			} )
				.css( "overflow", "auto" );
		} else if ( heightStyle === "auto" ) {
			maxHeight = 0;
			this.panels.each( function() {
				maxHeight = Math.max( maxHeight, $( this ).height( "" ).height() );
			} ).height( maxHeight );
		}
	},

	_eventHandler: function( event ) {
		var options = this.options,
			active = this.active,
			anchor = $( event.currentTarget ),
			tab = anchor.closest( "li" ),
			clickedIsActive = tab[ 0 ] === active[ 0 ],
			collapsing = clickedIsActive && options.collapsible,
			toShow = collapsing ? $() : this._getPanelForTab( tab ),
			toHide = !active.length ? $() : this._getPanelForTab( active ),
			eventData = {
				oldTab: active,
				oldPanel: toHide,
				newTab: collapsing ? $() : tab,
				newPanel: toShow
			};

		event.preventDefault();

		if ( tab.hasClass( "ui-state-disabled" ) ||

				// tab is already loading
				tab.hasClass( "ui-tabs-loading" ) ||

				// can't switch durning an animation
				this.running ||

				// click on active header, but not collapsible
				( clickedIsActive && !options.collapsible ) ||

				// allow canceling activation
				( this._trigger( "beforeActivate", event, eventData ) === false ) ) {
			return;
		}

		options.active = collapsing ? false : this.tabs.index( tab );

		this.active = clickedIsActive ? $() : tab;
		if ( this.xhr ) {
			this.xhr.abort();
		}

		if ( !toHide.length && !toShow.length ) {
			$.error( "jQuery UI Tabs: Mismatching fragment identifier." );
		}

		if ( toShow.length ) {
			this.load( this.tabs.index( tab ), event );
		}
		this._toggle( event, eventData );
	},

	// Handles show/hide for selecting tabs
	_toggle: function( event, eventData ) {
		var that = this,
			toShow = eventData.newPanel,
			toHide = eventData.oldPanel;

		this.running = true;

		function complete() {
			that.running = false;
			that._trigger( "activate", event, eventData );
		}

		function show() {
			that._addClass( eventData.newTab.closest( "li" ), "ui-tabs-active", "ui-state-active" );

			if ( toShow.length && that.options.show ) {
				that._show( toShow, that.options.show, complete );
			} else {
				toShow.show();
				complete();
			}
		}

		// Start out by hiding, then showing, then completing
		if ( toHide.length && this.options.hide ) {
			this._hide( toHide, this.options.hide, function() {
				that._removeClass( eventData.oldTab.closest( "li" ),
					"ui-tabs-active", "ui-state-active" );
				show();
			} );
		} else {
			this._removeClass( eventData.oldTab.closest( "li" ),
				"ui-tabs-active", "ui-state-active" );
			toHide.hide();
			show();
		}

		toHide.attr( "aria-hidden", "true" );
		eventData.oldTab.attr( {
			"aria-selected": "false",
			"aria-expanded": "false"
		} );

		// If we're switching tabs, remove the old tab from the tab order.
		// If we're opening from collapsed state, remove the previous tab from the tab order.
		// If we're collapsing, then keep the collapsing tab in the tab order.
		if ( toShow.length && toHide.length ) {
			eventData.oldTab.attr( "tabIndex", -1 );
		} else if ( toShow.length ) {
			this.tabs.filter( function() {
				return $( this ).attr( "tabIndex" ) === 0;
			} )
				.attr( "tabIndex", -1 );
		}

		toShow.attr( "aria-hidden", "false" );
		eventData.newTab.attr( {
			"aria-selected": "true",
			"aria-expanded": "true",
			tabIndex: 0
		} );
	},

	_activate: function( index ) {
		var anchor,
			active = this._findActive( index );

		// Trying to activate the already active panel
		if ( active[ 0 ] === this.active[ 0 ] ) {
			return;
		}

		// Trying to collapse, simulate a click on the current active header
		if ( !active.length ) {
			active = this.active;
		}

		anchor = active.find( ".ui-tabs-anchor" )[ 0 ];
		this._eventHandler( {
			target: anchor,
			currentTarget: anchor,
			preventDefault: $.noop
		} );
	},

	_findActive: function( index ) {
		return index === false ? $() : this.tabs.eq( index );
	},

	_getIndex: function( index ) {

		// meta-function to give users option to provide a href string instead of a numerical index.
		if ( typeof index === "string" ) {
			index = this.anchors.index( this.anchors.filter( "[href$='" +
				$.ui.escapeSelector( index ) + "']" ) );
		}

		return index;
	},

	_destroy: function() {
		if ( this.xhr ) {
			this.xhr.abort();
		}

		this.tablist
			.removeAttr( "role" )
			.off( this.eventNamespace );

		this.anchors
			.removeAttr( "role tabIndex" )
			.removeUniqueId();

		this.tabs.add( this.panels ).each( function() {
			if ( $.data( this, "ui-tabs-destroy" ) ) {
				$( this ).remove();
			} else {
				$( this ).removeAttr( "role tabIndex " +
					"aria-live aria-busy aria-selected aria-labelledby aria-hidden aria-expanded" );
			}
		} );

		this.tabs.each( function() {
			var li = $( this ),
				prev = li.data( "ui-tabs-aria-controls" );
			if ( prev ) {
				li
					.attr( "aria-controls", prev )
					.removeData( "ui-tabs-aria-controls" );
			} else {
				li.removeAttr( "aria-controls" );
			}
		} );

		this.panels.show();

		if ( this.options.heightStyle !== "content" ) {
			this.panels.css( "height", "" );
		}
	},

	enable: function( index ) {
		var disabled = this.options.disabled;
		if ( disabled === false ) {
			return;
		}

		if ( index === undefined ) {
			disabled = false;
		} else {
			index = this._getIndex( index );
			if ( $.isArray( disabled ) ) {
				disabled = $.map( disabled, function( num ) {
					return num !== index ? num : null;
				} );
			} else {
				disabled = $.map( this.tabs, function( li, num ) {
					return num !== index ? num : null;
				} );
			}
		}
		this._setOptionDisabled( disabled );
	},

	disable: function( index ) {
		var disabled = this.options.disabled;
		if ( disabled === true ) {
			return;
		}

		if ( index === undefined ) {
			disabled = true;
		} else {
			index = this._getIndex( index );
			if ( $.inArray( index, disabled ) !== -1 ) {
				return;
			}
			if ( $.isArray( disabled ) ) {
				disabled = $.merge( [ index ], disabled ).sort();
			} else {
				disabled = [ index ];
			}
		}
		this._setOptionDisabled( disabled );
	},

	load: function( index, event ) {
		index = this._getIndex( index );
		var that = this,
			tab = this.tabs.eq( index ),
			anchor = tab.find( ".ui-tabs-anchor" ),
			panel = this._getPanelForTab( tab ),
			eventData = {
				tab: tab,
				panel: panel
			},
			complete = function( jqXHR, status ) {
				if ( status === "abort" ) {
					that.panels.stop( false, true );
				}

				that._removeClass( tab, "ui-tabs-loading" );
				panel.removeAttr( "aria-busy" );

				if ( jqXHR === that.xhr ) {
					delete that.xhr;
				}
			};

		// Not remote
		if ( this._isLocal( anchor[ 0 ] ) ) {
			return;
		}

		this.xhr = $.ajax( this._ajaxSettings( anchor, event, eventData ) );

		// Support: jQuery <1.8
		// jQuery <1.8 returns false if the request is canceled in beforeSend,
		// but as of 1.8, $.ajax() always returns a jqXHR object.
		if ( this.xhr && this.xhr.statusText !== "canceled" ) {
			this._addClass( tab, "ui-tabs-loading" );
			panel.attr( "aria-busy", "true" );

			this.xhr
				.done( function( response, status, jqXHR ) {

					// support: jQuery <1.8
					// http://bugs.jquery.com/ticket/11778
					setTimeout( function() {
						panel.html( response );
						that._trigger( "load", event, eventData );

						complete( jqXHR, status );
					}, 1 );
				} )
				.fail( function( jqXHR, status ) {

					// support: jQuery <1.8
					// http://bugs.jquery.com/ticket/11778
					setTimeout( function() {
						complete( jqXHR, status );
					}, 1 );
				} );
		}
	},

	_ajaxSettings: function( anchor, event, eventData ) {
		var that = this;
		return {

			// Support: IE <11 only
			// Strip any hash that exists to prevent errors with the Ajax request
			url: anchor.attr( "href" ).replace( /#.*$/, "" ),
			beforeSend: function( jqXHR, settings ) {
				return that._trigger( "beforeLoad", event,
					$.extend( { jqXHR: jqXHR, ajaxSettings: settings }, eventData ) );
			}
		};
	},

	_getPanelForTab: function( tab ) {
		var id = $( tab ).attr( "aria-controls" );
		return this.element.find( this._sanitizeSelector( "#" + id ) );
	}
} );

// DEPRECATED
// TODO: Switch return back to widget declaration at top of file when this is removed
if ( $.uiBackCompat !== false ) {

	// Backcompat for ui-tab class (now ui-tabs-tab)
	$.widget( "ui.tabs", $.ui.tabs, {
		_processTabs: function() {
			this._superApply( arguments );
			this._addClass( this.tabs, "ui-tab" );
		}
	} );
}

var widgetsTabs = $.ui.tabs;


/*!
 * jQuery UI Tooltip 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Tooltip
//>>group: Widgets
//>>description: Shows additional information for any element on hover or focus.
//>>docs: http://api.jqueryui.com/tooltip/
//>>demos: http://jqueryui.com/tooltip/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/tooltip.css
//>>css.theme: ../../themes/base/theme.css



$.widget( "ui.tooltip", {
	version: "1.12.1",
	options: {
		classes: {
			"ui-tooltip": "ui-corner-all ui-widget-shadow"
		},
		content: function() {

			// support: IE<9, Opera in jQuery <1.7
			// .text() can't accept undefined, so coerce to a string
			var title = $( this ).attr( "title" ) || "";

			// Escape title, since we're going from an attribute to raw HTML
			return $( "<a>" ).text( title ).html();
		},
		hide: true,

		// Disabled elements have inconsistent behavior across browsers (#8661)
		items: "[title]:not([disabled])",
		position: {
			my: "left top+15",
			at: "left bottom",
			collision: "flipfit flip"
		},
		show: true,
		track: false,

		// Callbacks
		close: null,
		open: null
	},

	_addDescribedBy: function( elem, id ) {
		var describedby = ( elem.attr( "aria-describedby" ) || "" ).split( /\s+/ );
		describedby.push( id );
		elem
			.data( "ui-tooltip-id", id )
			.attr( "aria-describedby", $.trim( describedby.join( " " ) ) );
	},

	_removeDescribedBy: function( elem ) {
		var id = elem.data( "ui-tooltip-id" ),
			describedby = ( elem.attr( "aria-describedby" ) || "" ).split( /\s+/ ),
			index = $.inArray( id, describedby );

		if ( index !== -1 ) {
			describedby.splice( index, 1 );
		}

		elem.removeData( "ui-tooltip-id" );
		describedby = $.trim( describedby.join( " " ) );
		if ( describedby ) {
			elem.attr( "aria-describedby", describedby );
		} else {
			elem.removeAttr( "aria-describedby" );
		}
	},

	_create: function() {
		this._on( {
			mouseover: "open",
			focusin: "open"
		} );

		// IDs of generated tooltips, needed for destroy
		this.tooltips = {};

		// IDs of parent tooltips where we removed the title attribute
		this.parents = {};

		// Append the aria-live region so tooltips announce correctly
		this.liveRegion = $( "<div>" )
			.attr( {
				role: "log",
				"aria-live": "assertive",
				"aria-relevant": "additions"
			} )
			.appendTo( this.document[ 0 ].body );
		this._addClass( this.liveRegion, null, "ui-helper-hidden-accessible" );

		this.disabledTitles = $( [] );
	},

	_setOption: function( key, value ) {
		var that = this;

		this._super( key, value );

		if ( key === "content" ) {
			$.each( this.tooltips, function( id, tooltipData ) {
				that._updateContent( tooltipData.element );
			} );
		}
	},

	_setOptionDisabled: function( value ) {
		this[ value ? "_disable" : "_enable" ]();
	},

	_disable: function() {
		var that = this;

		// Close open tooltips
		$.each( this.tooltips, function( id, tooltipData ) {
			var event = $.Event( "blur" );
			event.target = event.currentTarget = tooltipData.element[ 0 ];
			that.close( event, true );
		} );

		// Remove title attributes to prevent native tooltips
		this.disabledTitles = this.disabledTitles.add(
			this.element.find( this.options.items ).addBack()
				.filter( function() {
					var element = $( this );
					if ( element.is( "[title]" ) ) {
						return element
							.data( "ui-tooltip-title", element.attr( "title" ) )
							.removeAttr( "title" );
					}
				} )
		);
	},

	_enable: function() {

		// restore title attributes
		this.disabledTitles.each( function() {
			var element = $( this );
			if ( element.data( "ui-tooltip-title" ) ) {
				element.attr( "title", element.data( "ui-tooltip-title" ) );
			}
		} );
		this.disabledTitles = $( [] );
	},

	open: function( event ) {
		var that = this,
			target = $( event ? event.target : this.element )

				// we need closest here due to mouseover bubbling,
				// but always pointing at the same event target
				.closest( this.options.items );

		// No element to show a tooltip for or the tooltip is already open
		if ( !target.length || target.data( "ui-tooltip-id" ) ) {
			return;
		}

		if ( target.attr( "title" ) ) {
			target.data( "ui-tooltip-title", target.attr( "title" ) );
		}

		target.data( "ui-tooltip-open", true );

		// Kill parent tooltips, custom or native, for hover
		if ( event && event.type === "mouseover" ) {
			target.parents().each( function() {
				var parent = $( this ),
					blurEvent;
				if ( parent.data( "ui-tooltip-open" ) ) {
					blurEvent = $.Event( "blur" );
					blurEvent.target = blurEvent.currentTarget = this;
					that.close( blurEvent, true );
				}
				if ( parent.attr( "title" ) ) {
					parent.uniqueId();
					that.parents[ this.id ] = {
						element: this,
						title: parent.attr( "title" )
					};
					parent.attr( "title", "" );
				}
			} );
		}

		this._registerCloseHandlers( event, target );
		this._updateContent( target, event );
	},

	_updateContent: function( target, event ) {
		var content,
			contentOption = this.options.content,
			that = this,
			eventType = event ? event.type : null;

		if ( typeof contentOption === "string" || contentOption.nodeType ||
				contentOption.jquery ) {
			return this._open( event, target, contentOption );
		}

		content = contentOption.call( target[ 0 ], function( response ) {

			// IE may instantly serve a cached response for ajax requests
			// delay this call to _open so the other call to _open runs first
			that._delay( function() {

				// Ignore async response if tooltip was closed already
				if ( !target.data( "ui-tooltip-open" ) ) {
					return;
				}

				// JQuery creates a special event for focusin when it doesn't
				// exist natively. To improve performance, the native event
				// object is reused and the type is changed. Therefore, we can't
				// rely on the type being correct after the event finished
				// bubbling, so we set it back to the previous value. (#8740)
				if ( event ) {
					event.type = eventType;
				}
				this._open( event, target, response );
			} );
		} );
		if ( content ) {
			this._open( event, target, content );
		}
	},

	_open: function( event, target, content ) {
		var tooltipData, tooltip, delayedShow, a11yContent,
			positionOption = $.extend( {}, this.options.position );

		if ( !content ) {
			return;
		}

		// Content can be updated multiple times. If the tooltip already
		// exists, then just update the content and bail.
		tooltipData = this._find( target );
		if ( tooltipData ) {
			tooltipData.tooltip.find( ".ui-tooltip-content" ).html( content );
			return;
		}

		// If we have a title, clear it to prevent the native tooltip
		// we have to check first to avoid defining a title if none exists
		// (we don't want to cause an element to start matching [title])
		//
		// We use removeAttr only for key events, to allow IE to export the correct
		// accessible attributes. For mouse events, set to empty string to avoid
		// native tooltip showing up (happens only when removing inside mouseover).
		if ( target.is( "[title]" ) ) {
			if ( event && event.type === "mouseover" ) {
				target.attr( "title", "" );
			} else {
				target.removeAttr( "title" );
			}
		}

		tooltipData = this._tooltip( target );
		tooltip = tooltipData.tooltip;
		this._addDescribedBy( target, tooltip.attr( "id" ) );
		tooltip.find( ".ui-tooltip-content" ).html( content );

		// Support: Voiceover on OS X, JAWS on IE <= 9
		// JAWS announces deletions even when aria-relevant="additions"
		// Voiceover will sometimes re-read the entire log region's contents from the beginning
		this.liveRegion.children().hide();
		a11yContent = $( "<div>" ).html( tooltip.find( ".ui-tooltip-content" ).html() );
		a11yContent.removeAttr( "name" ).find( "[name]" ).removeAttr( "name" );
		a11yContent.removeAttr( "id" ).find( "[id]" ).removeAttr( "id" );
		a11yContent.appendTo( this.liveRegion );

		function position( event ) {
			positionOption.of = event;
			if ( tooltip.is( ":hidden" ) ) {
				return;
			}
			tooltip.position( positionOption );
		}
		if ( this.options.track && event && /^mouse/.test( event.type ) ) {
			this._on( this.document, {
				mousemove: position
			} );

			// trigger once to override element-relative positioning
			position( event );
		} else {
			tooltip.position( $.extend( {
				of: target
			}, this.options.position ) );
		}

		tooltip.hide();

		this._show( tooltip, this.options.show );

		// Handle tracking tooltips that are shown with a delay (#8644). As soon
		// as the tooltip is visible, position the tooltip using the most recent
		// event.
		// Adds the check to add the timers only when both delay and track options are set (#14682)
		if ( this.options.track && this.options.show && this.options.show.delay ) {
			delayedShow = this.delayedShow = setInterval( function() {
				if ( tooltip.is( ":visible" ) ) {
					position( positionOption.of );
					clearInterval( delayedShow );
				}
			}, $.fx.interval );
		}

		this._trigger( "open", event, { tooltip: tooltip } );
	},

	_registerCloseHandlers: function( event, target ) {
		var events = {
			keyup: function( event ) {
				if ( event.keyCode === $.ui.keyCode.ESCAPE ) {
					var fakeEvent = $.Event( event );
					fakeEvent.currentTarget = target[ 0 ];
					this.close( fakeEvent, true );
				}
			}
		};

		// Only bind remove handler for delegated targets. Non-delegated
		// tooltips will handle this in destroy.
		if ( target[ 0 ] !== this.element[ 0 ] ) {
			events.remove = function() {
				this._removeTooltip( this._find( target ).tooltip );
			};
		}

		if ( !event || event.type === "mouseover" ) {
			events.mouseleave = "close";
		}
		if ( !event || event.type === "focusin" ) {
			events.focusout = "close";
		}
		this._on( true, target, events );
	},

	close: function( event ) {
		var tooltip,
			that = this,
			target = $( event ? event.currentTarget : this.element ),
			tooltipData = this._find( target );

		// The tooltip may already be closed
		if ( !tooltipData ) {

			// We set ui-tooltip-open immediately upon open (in open()), but only set the
			// additional data once there's actually content to show (in _open()). So even if the
			// tooltip doesn't have full data, we always remove ui-tooltip-open in case we're in
			// the period between open() and _open().
			target.removeData( "ui-tooltip-open" );
			return;
		}

		tooltip = tooltipData.tooltip;

		// Disabling closes the tooltip, so we need to track when we're closing
		// to avoid an infinite loop in case the tooltip becomes disabled on close
		if ( tooltipData.closing ) {
			return;
		}

		// Clear the interval for delayed tracking tooltips
		clearInterval( this.delayedShow );

		// Only set title if we had one before (see comment in _open())
		// If the title attribute has changed since open(), don't restore
		if ( target.data( "ui-tooltip-title" ) && !target.attr( "title" ) ) {
			target.attr( "title", target.data( "ui-tooltip-title" ) );
		}

		this._removeDescribedBy( target );

		tooltipData.hiding = true;
		tooltip.stop( true );
		this._hide( tooltip, this.options.hide, function() {
			that._removeTooltip( $( this ) );
		} );

		target.removeData( "ui-tooltip-open" );
		this._off( target, "mouseleave focusout keyup" );

		// Remove 'remove' binding only on delegated targets
		if ( target[ 0 ] !== this.element[ 0 ] ) {
			this._off( target, "remove" );
		}
		this._off( this.document, "mousemove" );

		if ( event && event.type === "mouseleave" ) {
			$.each( this.parents, function( id, parent ) {
				$( parent.element ).attr( "title", parent.title );
				delete that.parents[ id ];
			} );
		}

		tooltipData.closing = true;
		this._trigger( "close", event, { tooltip: tooltip } );
		if ( !tooltipData.hiding ) {
			tooltipData.closing = false;
		}
	},

	_tooltip: function( element ) {
		var tooltip = $( "<div>" ).attr( "role", "tooltip" ),
			content = $( "<div>" ).appendTo( tooltip ),
			id = tooltip.uniqueId().attr( "id" );

		this._addClass( content, "ui-tooltip-content" );
		this._addClass( tooltip, "ui-tooltip", "ui-widget ui-widget-content" );

		tooltip.appendTo( this._appendTo( element ) );

		return this.tooltips[ id ] = {
			element: element,
			tooltip: tooltip
		};
	},

	_find: function( target ) {
		var id = target.data( "ui-tooltip-id" );
		return id ? this.tooltips[ id ] : null;
	},

	_removeTooltip: function( tooltip ) {
		tooltip.remove();
		delete this.tooltips[ tooltip.attr( "id" ) ];
	},

	_appendTo: function( target ) {
		var element = target.closest( ".ui-front, dialog" );

		if ( !element.length ) {
			element = this.document[ 0 ].body;
		}

		return element;
	},

	_destroy: function() {
		var that = this;

		// Close open tooltips
		$.each( this.tooltips, function( id, tooltipData ) {

			// Delegate to close method to handle common cleanup
			var event = $.Event( "blur" ),
				element = tooltipData.element;
			event.target = event.currentTarget = element[ 0 ];
			that.close( event, true );

			// Remove immediately; destroying an open tooltip doesn't use the
			// hide animation
			$( "#" + id ).remove();

			// Restore the title
			if ( element.data( "ui-tooltip-title" ) ) {

				// If the title attribute has changed since open(), don't restore
				if ( !element.attr( "title" ) ) {
					element.attr( "title", element.data( "ui-tooltip-title" ) );
				}
				element.removeData( "ui-tooltip-title" );
			}
		} );
		this.liveRegion.remove();
	}
} );

// DEPRECATED
// TODO: Switch return back to widget declaration at top of file when this is removed
if ( $.uiBackCompat !== false ) {

	// Backcompat for tooltipClass option
	$.widget( "ui.tooltip", $.ui.tooltip, {
		options: {
			tooltipClass: null
		},
		_tooltip: function() {
			var tooltipData = this._superApply( arguments );
			if ( this.options.tooltipClass ) {
				tooltipData.tooltip.addClass( this.options.tooltipClass );
			}
			return tooltipData;
		}
	} );
}

var widgetsTooltip = $.ui.tooltip;




}));
// the semi-colon before function invocation is a safety net against concatenated
// scripts and/or other plugins which may not be closed properly.
;(function ( $, window, uitk, Modernizr, undefined ) {

    "use strict";

    var errorPrefix = "UITK BrowserStorage",

        //error types
        localStorage = 'local',
        sessionStorage = 'session',
        persistentCookieStorage = 'persistentCookies',
        sessionCookieStorage = 'sessionCookies',
        pageStorage = 'page',

        browserStoragePrototype = {
            //save values
            saveItem : function(key, value, expiry){
                var type = this.type,
                    saveItemErrorPrefix = " saveItem(key, value, expiry): ";

                if (typeof key !== "string"){
                    throw new TypeError(errorPrefix + saveItemErrorPrefix + "'key' must be a string");
                }
                if (typeof value !== "string" && type !== pageStorage){
                    throw new TypeError(errorPrefix + saveItemErrorPrefix + "'value' must be a string");
                }
                if (expiry && typeof expiry !== "number" && (type === persistentCookieStorage || type === sessionCookieStorage)){
                    throw new TypeError(errorPrefix + saveItemErrorPrefix + "'expiry' must be a number");
                }
                this.endpoint.setItem(key, value, expiry);
            },
            saveItems: function(keyValueObj, expiry){
                if (typeof keyValueObj === "object"){
                    for (var key in keyValueObj){
                        if (keyValueObj.hasOwnProperty(key)){
                            this.saveItem(key, keyValueObj[key], expiry);
                        }
                    }
                }else{
                    throw new TypeError(errorPrefix + " saveItems(keyValueObj): 'keyValueObj' must be an object");
                }
            },
            saveAsJSON : function(key, value, expiry){
                if (JSON) {
                    this.saveItem(key, JSON.stringify(value), expiry);
                }
            },

            //read values
            readItem : function(key){
                if (typeof key === "string"){
                    return this.endpoint.getItem(key);
                }else{
                    throw new TypeError(errorPrefix + " readItem(key): 'key' must be a string");
                }
            },
            readJSONAsObject: function(key) {
                return jQuery.parseJSON(this.readItem(key));
            },
            doesKeyExist : function(key){
                return (this.readItem(key) !== null);
            },

            //delete values
            deleteItem : function(key){
                if (typeof key === "string"){
                    this.endpoint.removeItem(key);
                }else{
                    throw new TypeError(errorPrefix + " deleteItem(key): 'key' must be a string");
                }
            },
            deleteItems : function(keyArray){
                var that = this,
                    arrayLength = keyArray.length,
                    i;

                for(i=0; i<arrayLength; i=i+1){
                    that.endpoint.removeItem(keyArray[i]);
                }
            }
        },

        html5StorageTypes = {},
        hasLocalStorage = Modernizr.localstorage,
        hasSessionStorage = Modernizr.sessionstorage;


    html5StorageTypes[localStorage] = {
        available: hasLocalStorage,
        endpoint: hasLocalStorage ? window.localStorage : {},
        fallback: pageStorage
    };

    html5StorageTypes[sessionStorage] =  {
        available: hasSessionStorage,
        endpoint: hasSessionStorage ? window.sessionStorage : {},
        fallback: pageStorage
    };

    //HTML5 BROWSER STORAGE (used for localStorage and sessionStorage)
    function Html5BrowserStorage(type){
        var that=this;

        if(!html5StorageTypes[type]){
            throw new Error("UITK Html5BrowserStorage: 'type' must be '" + localStorage + "' or '" + sessionStorage + "' and not '" + type + "'");
        }

        that.type = type;
        that.endpoint = html5StorageTypes[type].endpoint;
    }

    Html5BrowserStorage.prototype = browserStoragePrototype;
    Html5BrowserStorage.prototype.constructor=Html5BrowserStorage;


    //COOKIE BROWSER STORAGE
    function CookieBrowserStorage(type, defaultExpiry){
        var that=this;

        if(type !== persistentCookieStorage && type !== sessionCookieStorage){
            throw new Error("UITK CookieBrowserStorage: 'type' must be '" + persistentCookieStorage + "' or '" + sessionCookieStorage + "' and not '" + type + "'");
        }

        that.type = type;
        that.storage = {};
        that.endpoint = {
            setItem : function(key, value, expiry){
                expiry = expiry || defaultExpiry;

                uitk.createCookie(key, value, expiry);
            },
            getItem : function(key){
                return uitk.readCookie(key);
            },
            removeItem : function(key){
                return uitk.deleteCookie(key);
            }
        };
    }

    CookieBrowserStorage.prototype = browserStoragePrototype;
    CookieBrowserStorage.prototype.constructor=CookieBrowserStorage;


    //PAGE BROWSER STORAGE
    function PageBrowserStorage(){
        var that=this;

        that.type = pageStorage;
        that.storage = {};
        that.endpoint = {
            setItem : function(key, value){
                that.storage[key] = value;
            },
            getItem : function(key){
                if (!that.storage.hasOwnProperty(key)){
                    return null;
                }else{
                    return that.storage[key];
                }
            },
            removeItem : function(key){
                if (that.storage.hasOwnProperty(key)){
                    delete that.storage[key];
                }
            }
        };
    }

    PageBrowserStorage.prototype = browserStoragePrototype;
    PageBrowserStorage.prototype.constructor=PageBrowserStorage;


    //add uitk.createBrowserStorage(type[, fallback][, expiry]);
    //'type' equals the type of storage
    //'fallback' equals the type of storage to fallback to if 'type' isn't available. Can equal 'sessionCookie', 'persistentCookie' or 'page'
    uitk.createBrowserStorage = function(type){

        var args = arguments,
            fallback,
            expiry,
            secondArg = args[1],
            thirdArg = args[2];

        //work out what the second argument represents (fallback or expiry)
        if (typeof secondArg === "string"){
            fallback = secondArg;

            //see if third argument is the expiry
            if(typeof thirdArg === "number"){
                expiry = thirdArg;
            }
        }else if(typeof secondArg === "number"){
            expiry = secondArg;
        }


        if (fallback && fallback !== persistentCookieStorage && fallback !== sessionCookieStorage && fallback !== pageStorage){
            throw new Error("uitk.createBrowserStorage: 'fallback' must be '" + persistentCookieStorage + "', '" + sessionCookieStorage + "', '" + pageStorage + "' or '' and not '" + fallback + "'");
        }

        if (type === localStorage || type === sessionStorage){
            //check storage type is available
            if (html5StorageTypes[type].available){
                return new Html5BrowserStorage(type);
            }else{
                //fallback to fallback storage
                type = fallback || html5StorageTypes[type].fallback;
            }
        }

        if (type === sessionCookieStorage){
            return new CookieBrowserStorage(type);
        }

        if (type === persistentCookieStorage){
            expiry = expiry || 365;
            return new CookieBrowserStorage(type, expiry);
        }

        if (type === pageStorage){
            return new PageBrowserStorage();
        }

        //if type doesn't equal any of the above throw error
        throw new Error("uitk.createBrowserStorage: 'type' must be '" + localStorage + "', '" + sessionStorage + "', '" + persistentCookieStorage + "', '" + sessionCookieStorage + "' or '" + pageStorage + "' and not '" + type + "'");
    };

}(jQuery, window, uitk, Modernizr));

/*
 *  Project: UITKv2 UITK plugin utility
 *  Description: A helper constructor and fn to use across different modules
 *  Author: a-sszenti@expedia.com
 */

// the semi-colon before function invocation is a safety net against concatenated
// scripts and/or other plugins which may not be closed properly.
;(function ( $, window, uitk, undefined ) {

    'use strict';

    var defaults = {};

    function newModule( element, jsOptions, defaults ) {
        var newOptions;

        this.element = $(element);

        jsOptions = jsOptions || {};
        newOptions = this.element.data() || {};

        this.options = $.extend(true, {}, defaults, newOptions, jsOptions);

        if (this.init){
            this.init();
        }

    }

    function initPlugin(pluginName, constructor) {
        /* JQUERY PLUGIN DEFINITION */
        $.fn[pluginName] = function () {

            var options, method, arg, arg2;

            if (typeof arguments[0] === 'object'){
                options = arguments[0];
                method = arguments[1];
                arg = arguments[2];
                arg2 = arguments[3];
            }else{
                options = {};
                method = arguments[0];
                arg = arguments[1];
                arg2 = arguments[2];
            }

            return this.each(function () {
                if (!$.data(this, pluginName)) {
                    $.data(this, pluginName, new constructor( this, options ));
                }
                if (typeof method === 'string') {
                    $.data(this, pluginName)[method](arg, arg2);
                }
            });
        };
//        return $.fn[pluginName];
    }

    uitk.utils.newModule = newModule;
    uitk.utils.initPlugin = initPlugin;



}(jQuery, window, uitk));
/*
 *  Project: UI Toolkit Tooltip Plugin
 *  Description: jQuery Tooltip Plugin for use in the Expedia.com UI Toolkit
 *  Author: dstrugnell@expedia.com
 */

/*
 *  OPTIONS (passed via data-* attributes in the html)
 *
 *  @param data-arrow (optional) should the tooltip have an arrow. Default: true
 *  @param data-delay (optional) the delay before the tooltip is show / hidden. Default: 150
 *  @param data-fade (optional) should the tooltip fade in and out. 'true'|'false'|'out' Default: true
 *  @param data-pos (optional) The position of the tooltip. Default: 'tc'. Can be:
 *          'tc' (top-center),
 *          'tl'(top left),
 *          'tr'(top right),
 *          'ml'(middle left),
 *          'mr'(middle right),
 *          'bc' (top-center),
 *          'bl'(top left),
 *          'br'(top right)
 *  @param data-pos-offset (optional) Extra space between the tooltip and the trigger . Default: 5
 *  @param data-text-align (optional) The alignment of the text with in the tooltip. Default: 'left'
 *  @param data-trigger (optional) How the tooltip is triggered. 'hover' | 'click' Default: 'hover'
 *  @param data-width (optional) The width of the tooltip. Default: 150
 *  @param data-content (optional) Contents of the tooltip if a string.
 *  @param data-content-id (optional) Id of html containing html (use href instead if its not needed to link else where).
 *  @param data-manual (optional) should the tooltip be manually open / close / both. Default: none.
 */

// the semi-colon before function invocation is a safety net against concatenated
// scripts and/or other plugins which may not be closed properly.
;
(function ($, window, undefined) {

    'use strict';

    // Create the defaults once
    var pluginName = 'uitk_tooltip',
        $window = $(window),
        $body = $('body'),
        $document = $(document),
        activeTooltipClass = 'active-tooltip',
        tooltipOpenClass = 'tooltip-open',
        fadeClass = 'fade',
        bodyMinWidth = parseFloat($body.css('min-width'), 10),
        nonResponsivePage = bodyMinWidth > 950 || Modernizr.mediaqueries === 'false' || Modernizr.mediaqueries === false,
        defaults = {
            arrow: true,
            delay: 0,
            fade: 'out',
            pos: 'tc',
            showTooltip: true,
            posClass: {
                arrow: 'show-arrow',
                t: 'top',
                b: 'bottom',
                m: 'mid',
                mTop: 'mid-top',
                mBottom: 'mid-bottom',
                l: 'left',
                r: 'right',
                c: 'center'
            },
            posOffset: 6,
            template: '<div class="uitk-tooltip"><div class="tooltip-inner"></div><span class="tooltip-arrow"></span></div>',
            textAlign: 'left',
            trigger: 'click',
            width: 288,
            arrowSize: 7,
            arrowOffset: 24,
            hideOffScreen: true, // Hide Tooltip when the Tooltip's trigger is off the screen
            announce: true, // Live announce Tooltip content to screen readers
            style: false, // Background theme for Tooltip (light or dark)
            respondToSmallScreen: false, // Setting to allow full-width at small screen size
            offsetBefore: false
        },
        theme = {
            standard: {},
            'standard-inverse': {},
            hover: {
                delay: 0,
                pos: 'tc',
                trigger: 'hover',
                width: 'auto'
            },
            menu: {
                pos: 'bc',
                width: 'auto',
                posOffset: 0,
                preventFlip: true,
                trigger: 'click'
            },
            // TODO do we still have utility menu?
            'utility-menu': {
                pos: 'bc',
                width: 'auto',
                preventFlip: true,
                style: 'light',
                trigger: 'click'
            },
            invalid: {
                pos: 'mr',
                width: 'auto',
                style: 'light',
                trigger: 'click'
            },
            calendar: {
                delay: {show: 0, hide: 0},
                pos: 'bl',
                posOffset: 7,
                trigger: 'focus',
                width: 600,
                hideOffScreen: false, //make sure the calendar is visible even when the input has been scrolled off the screen
                announce: false,
                respondToSmallScreen: true,
                offsetBefore: true
            },
            "annual-calendar": {
                delay: {show: 0, hide: 0},
                pos: 'bl',
                posOffset: 7,
                trigger: 'focus',
                width: 900,
                respondToSmallScreen: true,
                offsetBefore: true
            },
            typeahead: {
                delay: {show: 0, hide: 0},
                pos: 'bl',
                posOffset: 7,
                preventFlip: true,
                width: 390,
                hideOffScreen: false,
                announce: false,
                respondToSmallScreen: true,
                offsetBefore: true
            },
            'typeahead-by-category': {
                delay: {show: 0, hide: 0},
                pos: 'bl',
                posOffset: 7,
                preventFlip: true,
                width: 480,
                hideOffScreen: false,
                announce: false,
                respondToSmallScreen: true,
                offsetBefore: true
            }

        },
        hideAll,
        handleScroll,

        isTouchDevice = uitk.isTouchDevice,
        clickEvent = uitk.clickEvent + '.' + pluginName;

    //set the theme for calendar button to same as calendar.
    theme['calendar-button'] = theme.calendar;

    //function to hide all tooltips
    hideAll = function (currentTooltip) {

        var i,
            $activeTooltip = $('.' + activeTooltipClass);


        for (i = $activeTooltip.length - 1; i >= 0; i = i - 1) {

            var tooltipToRemove = $activeTooltip.eq(i),
                isTypeAhead = (tooltipToRemove.hasClass('theme-typeahead') || tooltipToRemove.hasClass('theme-typeahead-by-category'));

            if (isTypeAhead) {
                continue;
            }

            if (!(currentTooltip && (tooltipToRemove[0] === currentTooltip[0]))) {
                var trigger = tooltipToRemove.data('trigger');
                var plugin = $(trigger).data(pluginName);
                if (plugin) {
                    plugin.hide(true, undefined);
                }
            }
        }
    };

    uitk.subscribe('modal.appended', hideAll);


    /* CONSTRUCTOR */
    function Tooltip(element, jsOptions) {

        var newOptions,
            themeName,
            themeObj;

        this.element = $(element);

        jsOptions = jsOptions || {};
        newOptions = this.element.data() || {};

        if (jsOptions.jsTheme) {
            //a theme in the jsOptions take priority
            themeName = jsOptions.jsTheme;
        } else if (this.element.data('jsTheme')) {
            //if no theme is found in the jsOptions data-js-theme takes priority
            themeName = this.element.data('jsTheme');
        } else {
            //if no the theme is passed then the default is the trigger
            themeName = jsOptions.trigger || newOptions.trigger || defaults.trigger;
            newOptions.jsTheme = themeName;
        }

        themeObj = theme[themeName] || {};
        this.options = $.extend(true, {}, defaults, themeObj, newOptions, jsOptions);

        this.options.vPos = this.options.pos.charAt(0);
        this.options.hPos = this.options.pos.charAt(1);

        if (this.options.delay && typeof this.options.delay === 'number') {
            this.options.delay = {
                show: this.options.delay,
                hide: this.options.delay
            };
        }

        this.init();
    }

    Tooltip.prototype = {

        constructor: Tooltip,

        init: function () {
            var options = this.options,
                posClass = options.posClass;

            this.isShowing = false;

            //store position classes as a string
            this.posClasses = this.getPosClasses(posClass);

            //store content
            this.content = this.getContent();

            //store aria data
            if (options.content) {
                this.ariaData = options.tooltipId || 'tooltip' + new Date().getTime();
            }

            this.manual = options.manual || 'none';
        },

        getPosClasses: function (posClass) {
            var posClasses = '';

            for (var x in posClass) {
                if (posClass.hasOwnProperty(x) && x !== 'arrow') {
                    posClasses = posClasses + posClass[x] + ' ';
                }
            }

            return posClasses;
        },

        getContent: function () {
            var content,
                contentElem,
                href,
                options = this.options;

            if (options.content && typeof options.content === 'string') {
                content = '<p>' + options.content + '</p>';
            } else if (options.content && typeof options.content === 'object') {
                content = options.content;
            } else {
                if (options.contentId) {
                    contentElem = $('#' + options.contentId);
                } else {
                    href = this.element.attr('href');

                    if (href) {
                        href = href.replace(window.location.href.split('#')[0], '');
                    }
                    contentElem = $(href);
                }
                content = contentElem.html();
                contentElem.remove();
            }

            return content;
        },

        makeVisible: function () {
            this.tooltip.css({visibility: 'visible'});
        },

        makeInvisible: function () {
            if (uitk.isTouchDevice) {
                var zoomRatio = document.documentElement.clientWidth / window.innerWidth;
                if (zoomRatio > 1.01) {
                    return;
                }
            }

            if (this.tooltip && this.tooltip.css) {
                this.tooltip.css({visibility: 'hidden'});
            }
        },

        generateTooltip: function () {

            var that = this,
                options = this.options,
                tooltipHtml = $(options.template),
                ariaData = this.ariaData,
                standardThemeAsDefault = options.jsTheme === 'click' || options.jsTheme === 'calendar' || options.jsTheme === 'calendar-button' || options.jsTheme === 'typeahead' || options.jsTheme === 'typeahead-by-category' || options.jsTheme === 'country-code';

            if(options.respondToSmallScreen) {
                tooltipHtml.css('max-width','100%').addClass('full-width-small-screen');
            }

            tooltipHtml.find('.tooltip-inner').prepend(this.content);
            tooltipHtml.find('.tooltip-inner p:last').addClass('last');

            tooltipHtml.addClass(activeTooltipClass).css({
                width: options.width,
                'text-align': options.textAlign,
                visibility: 'hidden'
            }).data('trigger', that.element);

            if (options.jsTheme) {
                tooltipHtml.addClass('theme-' + options.jsTheme);
                if (standardThemeAsDefault) {
                    tooltipHtml.addClass('theme-standard');
                }
            }

            //set class to tooltip inner for different style theme
            if(options.style) {
                if(options.style === 'light') {
                    tooltipHtml.find('.tooltip-inner').addClass('tooltip-style-light');
                    tooltipHtml.find('.tooltip-arrow').addClass('tooltip-style-light');
                } else if(options.style === 'dark') {
                    tooltipHtml.find('.tooltip-inner').addClass('tooltip-style-dark');
                    tooltipHtml.find('.tooltip-arrow').addClass('tooltip-style-dark');
                }
            }

            //add fade class for fade in and out
            if (options.fade && (options.fade === true || options.fade === 'true')) {
                tooltipHtml.addClass(fadeClass);
            }

            if (options.arrow) {
                tooltipHtml.addClass(options.posClass.arrow);
            }

            if (options.tooltipClasses) {
                tooltipHtml.addClass(options.tooltipClasses);
            }
            // Typeahead
            if (ariaData) {
                if (options.jsTheme === 'typeahead' || options.jsTheme === 'typeahead-by-category') {

                    // Accessibility:
                    // Many attributes and roles moved from being set here to being part of the markup.

                    // INPUT
                    //that.element

                    // TOOLTIP
                    //tooltipHtml
                    tooltipHtml.attr('id', ariaData);

                } else {
                    tooltipHtml.attr('id', ariaData).attr('role', 'tooltip');
                }
            } else if (options.tooltipId) {
                tooltipHtml.attr('id', options.tooltipId);
            }

            if (that.options.trigger === 'hover' && !isTouchDevice) {
                tooltipHtml.find('.close').remove();
            }

            return tooltipHtml;
        },

        show: function (checkManual, event) {
            var that = this,
                options = this.options;

            //check data-manual, if need publish tooltip.beforeOpen and stop open
            if ((this.options.manual === 'open' || this.options.manual === 'both') && checkManual) {
                //publish before show
                uitk.publish('tooltip.beforeOpen', that.element, event);

                //return to stop the show
                return;
            }

            this.isShowing = true;

            //clear show timeout
            if (this.hideTimeout) {
                clearTimeout(this.hideTimeout);
            }

            //check to make sure tooltip isn't already created or open
            if (!that.tooltip || that.tooltip.closest('html').length === 0) {

                //remove other tooltips
                hideAll();

                that.tooltip = that.generateTooltip();
                that.tooltipArrow = that.tooltip.find('.tooltip-arrow');

                if (options.jsTheme === 'typeahead' || options.jsTheme === 'typeahead-by-category') {

                    var receivingDomElement = $('#uitk_ta_content'),
                        uitkElementExists = receivingDomElement.length;

                    if (uitkElementExists > 0) {
                        that.tooltip.appendTo(receivingDomElement);
                    } else {
                        that.tooltip.appendTo('body');
                    }

                } else {
                    // This is not a typeahead -- it is some other kind of tooltip,
                    // so append to BODY
                    that.tooltip.appendTo('body');
                }

                this.changePos();

                //set position
                that.setPos();

                //check position
                that.checkPos(false, true);
            } else {
                hideAll(that.tooltip);
            }

            // If a click Tooltip we need to track if it's open or not
            if (options.trigger !== 'hover' && options.jsTheme !== 'hover') {
                this.element.addClass(tooltipOpenClass);
            }

            setTimeout(function () {
                //reveal tooltip
                that.tooltip.addClass('on');

                // add fade class for fade out only
                if (options.fade && options.fade === 'out') {
                    setTimeout(function () {
                        that.tooltip.addClass(fadeClass);
                    }, 10);
                }
                // live announce the content of the tooltip
                if (options.announce) {
                    uitk.utils.liveAnnounce($(that.content), 'polite');
                }

                // publish an event that the tooltip is open
                uitk.publish('tooltip.open', that.element, event);
            }, options.delay.show);
        },

        hide: function (checkManual, event) {
            var that = this,
                tooltip,
                needToRemove = $('input[aria-activedescendant]');

            if (needToRemove.length > 0) {
                needToRemove.removeAttr('aria-activedescendant');
            }

            //check data-manual, if need publish tooltip.beforeOpen and stop open
            if ((this.options.manual === 'close' || this.options.manual === 'both') && checkManual) {
                //publish before hide
                uitk.publish('tooltip.beforeClose', that.element, event);

                //return to stop the hide
                return;
            }

            this.isShowing = false;

            //clear show timeout
            if (this.showTimeout) {
                clearTimeout(this.showTimeout);
            }

            //check to make sure tooltip isn't already created or open
            if (this.tooltip) {

                tooltip = this.tooltip;

                this.hideTimeout = setTimeout(function () {
                    tooltip.removeClass('on');

                    //publish tooltip.hidden so other modules no a tooltip has been hidden
                    uitk.publish('tooltip.hidden', that.element);

                    //give time for fade animation
                    setTimeout(function () {
                        if (!tooltip.hasClass('on') && !that.isShowing) {
                            tooltip.remove();
                        }
                    }, 100);
                }, this.options.delay.hide);
            }

            //remove class toolTipActive when hide the tooltip on clickable tooltip
            if (this.element.hasClass(tooltipOpenClass)) {
                this.element.removeClass(tooltipOpenClass);
            }
        },

        setPos: function (newVPos, newHPos) {
            var options = this.options,
                vPos = newVPos || options.vPos,
                hPos = newHPos || options.hPos,
                pos = this.getPos(vPos, hPos);

            this.tooltip.css({left: pos.left, top: pos.top});
            this.tooltipArrow.css({left: pos.arrowLeft, top: pos.arrowTop});
        },

        getTopPos: function (vPos, $elem) {
            var elemOffset = uitk.getPosition($elem);
            // old code. May need to reinstate if upgrading to JQuery1.9 fixes iPad1 bug (CSE-244)
            //elemOffset = $elem.offset(),
            var elemHeight = $elem.outerHeight();
            var posOffset = this.options.posOffset;
            var tooltip = this.tooltip;
            var tooltipHeight = tooltip.outerHeight();
            var arrowTipHeight = this.options.arrowSize;
            var arrowOffset = this.options.arrowOffset;
            var anchorPos = elemOffset.top + (elemHeight / 2);
            var modalOffset = $('.modal-wrap').scrollTop();
            var topPos,
                arrowTopPos;

            elemOffset.top -= isNaN(modalOffset) ? 0 : modalOffset;

            if (vPos === 't') {
                topPos = elemOffset.top - tooltipHeight - posOffset;
                arrowTopPos = tooltipHeight;
            } else if (vPos === 'm') {
                topPos = anchorPos - (tooltipHeight / 2);
                arrowTopPos = anchorPos - topPos - arrowTipHeight;
            } else if (vPos === 'mTop') {
                topPos =  anchorPos + arrowTipHeight + arrowOffset - tooltipHeight;
                arrowTopPos = anchorPos - topPos - arrowTipHeight;
            } else if (vPos === 'mBottom') {
                topPos = anchorPos - arrowTipHeight - arrowOffset;
                arrowTopPos = anchorPos - topPos - arrowTipHeight;
            } else if (vPos === 'b') {
                topPos = elemOffset.top + elemHeight + posOffset;
                arrowTopPos = tooltipHeight - tooltipHeight - arrowTipHeight;
            }

            return {top: topPos, arrowTop: arrowTopPos};
        },

        getWindowWidth: function () {
            return $window.width();
        },

        getLeftPos: function (hPos, vPos, $elem) {
            var elemOffset = $elem.offset(); //uitk.getPosition($elem),
            var elemWidth = $elem.outerWidth();
            var posOffset = this.options.posOffset;
            var tooltip = this.tooltip;
            var tooltipWidth = tooltip.outerWidth();
            var arrowTipWidth = this.options.arrowSize;
            var arrowOffset = this.options.arrowOffset;
            var anchorPos = elemOffset.left + (elemWidth / 2);
            var leftPos,
                arrowLeftPos,
                hPosPx,
                hPosPxR,
                hPosPxL,
                windowWidth;

            if (hPos === 'c') {
                if(this.options.offsetBefore) {
                    anchorPos = elemOffset.left + 20;
                }

                hPosPxR =  anchorPos - (tooltipWidth / 2);
                hPosPxL = anchorPos + (tooltipWidth / 2);
                windowWidth = this.getWindowWidth();
                if (hPosPxR < 0) {
                    leftPos = 0;
                } else if (hPosPxL > windowWidth) {
                    leftPos = windowWidth - tooltipWidth;
                } else {
                    leftPos = hPosPxR;
                }

                arrowLeftPos = anchorPos - leftPos - arrowTipWidth;

            } else if (hPos === 'r') {
                if (vPos === 'm' || vPos === 'mTop' || vPos === 'mBottom') {
                    leftPos = elemOffset.left + elemWidth + arrowTipWidth + posOffset;
                    arrowLeftPos = 0 - arrowTipWidth;
                } else {

                    if(this.options.offsetBefore) {
                        anchorPos = elemOffset.left + 20; // Icon padding offset
                    }

                    hPosPx = anchorPos - tooltipWidth + arrowOffset + arrowTipWidth;
                    if (hPosPx > 0) {
                        leftPos = hPosPx;
                    } else {
                        leftPos = 0;
                    }

                    arrowLeftPos = anchorPos - leftPos - arrowTipWidth;
                }
            } else if (hPos === 'l') {
                if (vPos === 'm' || vPos === 'mTop' || vPos === 'mBottom') {
                    leftPos = elemOffset.left - tooltipWidth - arrowTipWidth - posOffset;
                    arrowLeftPos = tooltipWidth;
                } else {

                    if(this.options.offsetBefore) {
                        anchorPos = elemOffset.left + 20; // Icon padding offset
                    }

                    hPosPx = anchorPos - arrowOffset - arrowTipWidth;
                    windowWidth = this.getWindowWidth();
                    if (hPosPx + tooltipWidth < windowWidth) {
                        leftPos = hPosPx;
                    } else {
                        leftPos = windowWidth - tooltipWidth;
                    }

                    arrowLeftPos = anchorPos - leftPos - arrowTipWidth;
                }
            }

            return {left: leftPos, arrowLeft: arrowLeftPos};
        },

        getPos: function (newVPos, newHPos) {

            var pos = {},
                options = this.options,
                posClass = options.posClass,
                vPos = newVPos || options.vPos,
                hPos = newHPos || options.hPos,
                $elem = this.element,
                tooltip = this.tooltip,
                getLeftPos,
                getTopPos;

            //remove arrow position classes and add new position class
            tooltip.removeClass(this.posClasses);
            tooltip.addClass(posClass[vPos] + ' ' + posClass[hPos]);

            //set vertical position
            getTopPos = this.getTopPos(vPos, $elem);
            pos.top = getTopPos.top;
            pos.arrowTop = getTopPos.arrowTop;

            //set horizontal position
            getLeftPos = this.getLeftPos(hPos, vPos, $elem);
            pos.left = getLeftPos.left;
            pos.arrowLeft = getLeftPos.arrowLeft;

            return pos;
        },
        //Allow tooltips to have different positions at different breakpoints
        changePos: function () {
            if (this.options.pos.length !== 2) {
                var switchPos = this.options.pos.split(','),
                    newPos = 0,
                    windowWidth = this.getWindowWidth(),
                    ie8 = $('html').hasClass('ie8');

                for (var i = 0; i < switchPos.length; i++) {
                    if (switchPos[i].length > 2 && !ie8) {

                        switchPos[i] = switchPos[i].trim();

                        newPos = parseInt(switchPos[i].substring(3, switchPos[i].length));
                        if (windowWidth <= newPos) {
                            this.options.vPos = switchPos[i].charAt(0);
                            this.options.hPos = switchPos[i].charAt(1);
                        }
                    }
                    else {
                        this.options.vPos = this.options.pos.charAt(0);
                        this.options.hPos = this.options.pos.charAt(1);
                    }
                }

                return;
            }

        },

        //check the position of the tooltip to see if it needs flipping
        testTopPos: function (tooltipTop, paddingTop, scrollTopPos) {
            return tooltipTop + paddingTop > scrollTopPos;
        },

        testBottomPos: function (tooltipBottom, paddingTop, scrollTopPos, windowHeight) {
            return tooltipBottom - paddingTop < scrollTopPos + windowHeight;
        },

        testLeftPos: function (tooltipLeft, paddingSide, scrollLeftPos) {
            return tooltipLeft + paddingSide > scrollLeftPos;
        },

        testRightPos: function (tooltipRight, paddingSide, scrollLeftPos, windowWidth) {
            return tooltipRight - paddingSide < scrollLeftPos + windowWidth;
        },

        checkPos: function (reset, recheck, newVPos, newHPos) {

            //only check the position if tooltip has been created
            if (this.tooltip && this.tooltip instanceof jQuery) {

                var vPos = newVPos || this.options.vPos,
                    hPos = newHPos || this.options.hPos;

                this.makeInvisible();

                //if preventFlip == true then set position to original value and do nothing else
                if (this.options.preventFlip) {
                    this.changePos();
                    this.setPos(vPos, hPos);
                    this.makeVisible();
                    return;
                }

                var origPos = this.getPos(vPos, hPos),
                    tooltip = this.tooltip;

                var paddingSide = parseInt(tooltip.css('padding-left'), 10),
                    paddingTop = parseInt(tooltip.css('padding-top'), 10),
                    tooltipTop = origPos.top,
                    tooltipLeft = origPos.left,
                    tooltipRight = tooltipLeft + tooltip.outerWidth(),
                    tooltipBottom = tooltipTop + tooltip.outerHeight(),

                    scrollTopPos = $window.scrollTop(),
                    scrollLeftPos = $window.scrollLeft(),
                    windowHeight = $window.height(),
                    windowWidth = $window.width(),

                //test the position of the tooltip against the edge of the window
                    testTop = this.testTopPos(tooltipTop, paddingTop, scrollTopPos),
                    testBottom = this.testBottomPos(tooltipBottom, paddingTop, scrollTopPos, windowHeight),
                    testLeft = this.testLeftPos(tooltipLeft, paddingSide, scrollLeftPos),
                    testRight = this.testRightPos(tooltipRight, paddingSide, scrollLeftPos, windowWidth),

                    update = false;

                //if all tests are true then nothing is outside an edge, therefore return and do nothing else
                if (testTop && testBottom && testLeft && testRight) {
                    if (reset) {
                        this.changePos();
                        this.setPos(vPos, hPos);
                    }
                    this.makeVisible();
                    return;
                }

                //horizontal edge detection
                if (vPos === 'm') {
                    if (hPos === 'l' && !testLeft) {
                        hPos = 'r';
                        update = true;
                    } else if (hPos === 'r' && !testRight) {
                        hPos = 'l';
                        update = true;
                    }
                } else {
                    if (hPos === 'l' && !testRight) {
                        hPos = 'l';
                        update = true;
                    } else if (hPos === 'r' && (!testLeft || nonResponsivePage)) {
                        hPos = 'r';
                        update = true;
                    } else if (hPos === 'c' && (!testRight || !testLeft)) {
                        hPos = 'c';
                        update = true;
                    }
                }

                //vertical edge detection
                if (vPos === 't' && !testTop) {
                    vPos = 'b';
                    update = true;
                } else if (vPos === 'b' && !testBottom) {
                    vPos = 't';
                    update = true;
                } else if (vPos === 'm') {
                    if (testTop && !testBottom) {
                        vPos = 'mTop';
                        update = true;
                    } else if (testBottom && !testTop) {
                        vPos = 'mBottom';
                        update = true;
                    }
                }

                //if an update to position is required re-run setPos()
                if (update) {
                    this.changePos();
                    this.setPos(vPos, hPos);

                    if (recheck) {
                        this.checkPos(false, false, vPos, hPos);
                    } else {
                        this.makeVisible();
                    }
                } else if (!this.options.hideOffScreen) {
                    // if the trigger is offscreen then 'update' will be false and therefore tooltip won't be redisplayed
                    // which is what is expected in most cases, however if option.hideOffScreen is set to false we want
                    // to call makeVisible anyway without changing the position
                    this.makeVisible();
                }

            }

        },

        updateContent: function (newContent) {
            if (newContent && typeof newContent === 'string') {
                this.content = '<p class="secondary">' + newContent + '</p>';
            } else if (newContent && typeof newContent === 'object') {
                this.content = newContent;
            }
        }
    };


    /* JQUERY PLUGIN DEFINITION */
    uitk.utils.initPlugin(pluginName, Tooltip);


    /* EVENT LISTENERS (delegated to body) */

    //detect orientation change on the ipad and fire the positioning function again.
    $(window).on('orientationchange', function (event) {
        if (!$(event.target).css('visibility') === 'hidden') {
            $target = $(event.target).closest('[data-control="tooltip"]');
            $target[pluginName]('hide', true, e);
        }
        else {
            var $target = $(event.target).closest('[data-control="tooltip"]');
            $target[pluginName]('checkPos', true, e);
        }
    });

    //create a unique event ID to share between to all events for '[data-control="tooltip"]'
    var tooltipEventId = uitk.createUniqueId();


    $body.on(clickEvent, '[data-control="tooltip"]', {eventId: tooltipEventId}, function (e) {
        var $target = $(e.target).closest('[data-control="tooltip"]'),
            trigger = $target.data('trigger'),
            chosenTheme = theme[$target.data('jsTheme')],
            showTooltip = $target.data('showTooltip'),
            checkToolTip = $document.find('.' + activeTooltipClass).hasClass('theme-click');

        if ((trigger && trigger !== 'hover') || (!trigger && chosenTheme && chosenTheme.trigger !== 'hover') || ($target.attr('href') && $target.attr('href').charAt(0) === '#')) {
            e.preventDefault();
            if (checkToolTip) {
                if ($target.hasClass(tooltipOpenClass)) {
                    $target[pluginName]('hide', true, e);
                } else if ($('[data-control="tooltip"]').hasClass(tooltipOpenClass)) {
                    hideAll();
                    $target[pluginName]('show', true, e);
                }
            } else {
                $target[pluginName]('show', true, e);
            }
        }
    });

    //NON-CLICK TOOLTIPS
    var eventCallback = function (e, triggerType, action) {
        var $target = $(e.target).closest('[data-control="tooltip"]'),
            trigger = $target.data('trigger'),
            chosenTheme = theme[$target.data('jsTheme')];

        if (trigger === triggerType || (!trigger && chosenTheme && chosenTheme.trigger === triggerType)) {
            e.preventDefault();
            $target[pluginName](action);
        }
    };


    //MOUSE ENTER / LEAVE USED FOR HOVER TOOLTIPS
    //Hover tooltips also need focus/blur for users who are tabbing to them
    if (isTouchDevice) {
        $body.on(clickEvent + ' focus.' + pluginName, '[data-control="tooltip"]', {eventId: tooltipEventId}, function (e) {
            eventCallback(e, 'hover', 'show', true, e);
        });
    } else {
        $body.on('uitkMouseenter.' + pluginName + ' focus.' + pluginName, '[data-control="tooltip"]', {eventId: tooltipEventId}, function (e) {
            eventCallback(e, 'hover', 'show', true, e);
        });

        $body.on('uitkMouseleave.' + pluginName + ' blur.' + pluginName, '[data-control="tooltip"]', {eventId: tooltipEventId}, function (e) {
            eventCallback(e, 'hover', 'hide', true, e);
        });
    }

    //trigger focus (used to trigger tooltips on inputs such as calendar)
    $body.on('focus.' + pluginName, '[data-control="tooltip"]', function (e) {
        eventCallback(e, 'focus', 'show', true, e);
    });

    $body.on('blur.' + pluginName, '[data-control="tooltip"]', function (e) {
        eventCallback(e, 'focus', 'hide', true, e);
    });


    //OTHER TOOLTIP INTERACTIONS

    //close button
    $body.on(clickEvent, '.active-tooltip .close', function (e) {
        var $target = $(e.target).closest('.active-tooltip');
        e.preventDefault();
        $target.data('trigger')[pluginName]('hide', true, e);
    });

    //close the tooltip on clicking else where on the page
    $document.on(clickEvent + ' focusin.' + pluginName, function (e) {
        if (e.type === 'focusin' && !uitk.utils.isFocusableElement($(e.target))) {
            return;
        }

        var $target = $(e.target).closest('[data-control="tooltip"]');

        if ($target.length <= 0) {
            $target = $(e.target);
        }

        //if clicked item isn't related to tooltip then close the tooltip
        if ($target.data('control') !== 'tooltip' && $target.data('control') !== 'calendar' && $target.data('control') !== 'calendar-button' && !$target.hasClass(activeTooltipClass) && $target.closest('.' + activeTooltipClass).length === 0) {
            hideAll();
        }
    });

    //close tooltip of Esc is pressed
    $document.on('keydown', function (e) {
        if (e.keyCode === 27) {
            hideAll();
        }
    });

    //SCROLLING / PAGE RESIZE
    handleScroll = function () {
        var i,
            $activeTooltip = $('.' + activeTooltipClass);

        for (i = $activeTooltip.length - 1; i >= 0; i = i - 1) {
            if ($($activeTooltip.eq(i).data('trigger')).css('visibility') === 'hidden') {
                $($activeTooltip.eq(i).data('trigger'))[pluginName]('hide', true, true);
            } else {
                $($activeTooltip.eq(i).data('trigger'))[pluginName]('checkPos', true, true);
            }
        }
    };

    //reposition tooltip on page scroll or resize
    $(window).on('scroll.' + pluginName + ' resize.' + pluginName, function () {
        handleScroll();
    });

    // when a modal is added to the page listen for scroll on modal container.
    uitk.subscribe('modal.appended', function () {
        //reposition tooltip on page scroll or resize
        $('.modal-wrap').on('scroll.' + pluginName, function () {
            handleScroll();
        });
    });

    //expose hideAll so it can be used elsewhere
    uitk.tooltips = {
        hideAll: hideAll
    };

    //expose object so it can be tested more easily
    uitk.modules.Tooltip = Tooltip;
}(jQuery, window));
/*
 *  Project: UI Toolkit Tabs Plugin
 *  Description: jQuery Tab Plugin for use in the Expedia.com UI Toolkit
 *  Author: dstrugnell@expedia.com
 */

/*
 *  OPTIONS (passed via data-* attributes in the html)
 *
 *  @param data-initial-tab (optional) the initial tab that is shown on page load. Default: 0
 *  @param data-hash-suffix (optional) the suffix added to the hash in the url when tab is selected. Default: 'tab'
 *  @param data-history (optional) should hash history be used for browsers that support onHashChange (not IE7). Default: false
 *  @param data-tab-state (optional) should state of tabs be stored for the browser session in browsers that support session storage (not IE7). Default: true
 */

// the semi-colon before function invocation is a safety net against concatenated
// scripts and/or other plugins which may not be closed properly.
;
(function ($, window, undefined) {

    "use strict";

    // Create the defaults once
    var pluginName = 'uitk_tabs',
        $body = $('body'),
        storageKey = window.location.pathname + "_" + pluginName,
        hasSessionStorage = Modernizr.sessionstorage,
        hasHashChange = Modernizr.hashchange,
        currentClass = 'on',
        activeClass = 'active',
        defaults = {
            initialTab: 0,
            hashSuffix: 'tab',
            history: true,
            tabState: true
        };

    /* CONSTRUCTOR */
    function Tabs(element, jsOptions) {
        var newOptions;

        this.element = $(element);
        this.tabs = this.element.find('>.tabs >li'); // this.element.find('.tabs').find('.tab') ????

        jsOptions = jsOptions || {};
        newOptions = this.element.data() || {};

        this.options = $.extend({}, defaults, newOptions, jsOptions);

        this.init();
    }

    Tabs.prototype = {
        init: function () {

            var that = this,
                activeTab,
                i;

            // Add data-control
            this.element.attr('data-control', 'tabs');

            // For each tab find and cache the DOM element containing the tab's content
            this.tabsContent = $();
            for (i = this.tabs.length; i > 0; i = i - 1) {
                var $this = this.tabs.eq(i - 1),
                    contentElem = that.getContentElem($this);

                // Store reference to the tabs content on the tab so it doesn't need to be looked up again
                $this.data('content', contentElem);

                // Add to object containing all content elements
                this.tabsContent = this.tabsContent.add(contentElem);
            }

            if (hasHashChange) {
                $(window).on("hashchange." + pluginName, function () {
                    var nextTab = that.getNextTab();

                    if (nextTab) {
                        that.showTab(nextTab);
                    }
                });
            }

            // Work out which tab should be activated initially and activate it
            activeTab = this.getNextTab(true);
            if (activeTab) {
                this.showTab(activeTab, true);
            }

            // For correcting the sliding tab Indicator on simple theme
            uitk.subscribe('throttled.resize', function() {
                if(that.element.hasClass('simple-theme')){
                    var $tab = that.element.find('li.active');
                    that.getIndicator($tab, {resize:true});
                }
            })
        },

        selectTab: function ($tab) {
            if (!hasHashChange || !this.options.history) {
                this.showTab($tab.closest('li'));
            } else {
                window.location.hash = $tab.attr('href');
            }
        },

        getContentElem: function ($tab) {
            var href = $tab.find('a[href^="#"]').attr('href');

            //return content elem
            return this.element.find(href);
        },

        getNextTab: function (init) {
            var hash = window.location.hash,
                hashTab = this.tabs.find('a[href="' + hash + '"]'),
                sessionObj,
                sessionString,
                sessionTab,
                nextTab,
                i;


            if (init && hasSessionStorage && this.options.tabState) {
                sessionString = sessionStorage.getItem(storageKey);

                if (sessionString) {
                    sessionObj = JSON.parse(sessionString);

                    for (i = sessionObj.length - 1; i >= 0; i = i - 1) {
                        sessionTab = this.tabs.find('a[href="' + sessionObj[i] + '"]');

                        if (sessionTab.length > 0) {
                            return sessionTab.parent();
                        }
                    }
                }
            }

            //use the url hash's corresponding tab
            if (hash && hashTab.length > 0) {
                nextTab = hashTab.parent();
            } else if (init) {
                // use initial tag setting from JSP if set, otherwise try the initialTag option, otherwise set to 0
                var taggedInitialTabs = this.tabs.find('a[data-initial-tab]');
                if (taggedInitialTabs.length > 0) {
                    nextTab = $(taggedInitialTabs[0]).parent();
                } else if (this.options.initialTab + 1 <= this.tabs.length) {
                    nextTab = this.tabs.eq(this.options.initialTab);
                } else {
                    nextTab = this.tabs.eq(0);
                }
            }
            return nextTab;
        },

        showTab: function ($tab, init) {

            this.doShowTab($tab, init);

            //publish tab.selected
            uitk.publish('tab.selected', $tab);
        },

        doShowTab: function ($tab, init) {
            var tabContent = $tab.data('content');

            //hide all content
            this.tabsContent.removeClass(currentClass);

            // Active chosen tab
            this.tabs.removeClass(activeClass);
            $tab.addClass(activeClass);
            // Activate chosen anchor and show content if it exists
            this.tabs.find('a').removeClass(currentClass).attr({"tabindex": "-1", "aria-selected": "false"});
            $tab.find('a').addClass(currentClass).attr({"tabindex": "0", "aria-selected": "true"});

            // Slide the tab indicator to the left for Simple theme
            if ($tab.closest('.inline-tabs').hasClass('simple-theme')) {
                this.getIndicator($tab);
            }

            if (tabContent) {
                tabContent.addClass(currentClass);
            }

            //if not the initial page load, store tab state and set focus()
            if (!init) {
                this.storeState();
                $tab.find('a').focus();
            }
        },

        storeState: function () {
            var currentTabs,
                currentTabsArray,
                i;

            if (hasSessionStorage && this.options.tabState) {

                currentTabsArray = [];

                currentTabs = $('.tabs a.' + currentClass);

                for (i = currentTabs.length - 1; i >= 0; i = i - 1) {
                    currentTabsArray.push(currentTabs.eq(i).attr('href'));
                }

                sessionStorage.setItem(storageKey, JSON.stringify(currentTabsArray));
            }
        },

        getIndicator: function($tab, resize) {
            var width = $tab.width(),
                nextWidth = 0;

            $tab.prevAll().each(function() {
                nextWidth += $(this).width();
            });

            this.slideIndicator($tab, width, nextWidth, resize);
        },

        slideIndicator : function ($tab, width, totalWidth, resize) {
            if(resize && resize.resize) {
                $tab.closest('ul.tabs').find('.tab:first .tab-indicator').attr("style", "left:"+ totalWidth +"px;width:"+ width +"px;transition: all 0s");
            } else {
                $tab.closest('ul.tabs').find('.tab:first .tab-indicator').attr("style", "left:"+ totalWidth +"px;width:"+ width +"px;");
            }

        }
    };

    /* JQUERY PLUGIN DEFINITION */
    $.fn[pluginName] = function () {

        var options, method, arg;

        if (typeof arguments[0] === 'object') {
            options = arguments[0];
            method = arguments[1];
            arg = arguments[2];
        } else {
            options = {};
            method = arguments[0];
            arg = arguments[1];
        }

        return this.each(function () {
            if (!$.data(this, pluginName)) {
                $.data(this, pluginName, new Tabs(this, options));
            }
            if (typeof method === 'string') {
                $.data(this, pluginName)[method](arg);
            }
        });
    };

    // INITIALISE TABS
    // This will take in to account any tab state stored in local storage or hash in the URL
    // for tabs that are present on page load
    function initTabs() {
        $('[data-control=tabs]')[pluginName]();
    }

    initTabs();

    // Expose init for dynamic client-side rendering
    uitk.initTabs = initTabs;

    //EVENT LISTENERS
    //Tabs that haven't been initiated on page load will be initiated on click
    $body.on(uitk.clickEvent + '.' + pluginName, '[data-control=tabs] .tabs a[href^="#"]', function (e) {
        var $target = $(e.target).closest('a');

        e.preventDefault();

        $target.closest('[data-control=tabs]')[pluginName]('selectTab', $target);
    });

    //Left and right arrow for accessibility
    $body.on('keydown.' + pluginName, '[data-control=tabs] .tabs a', function (e) {
        var $target = $(e.target),
            keycode = e.keyCode,
            prev,
            next;

        if (keycode === 37 || keycode === 38) {
            //left or up arrow
            prev = $target.parent().prev();

            if (prev.length > 0) {
                prev.find('>a').focus();
                if (keycode === 38) {
                    e.preventDefault();
                    return false;
                }
            } else if (keycode === 37) {
                $target.closest('.tabs').find("li:last>a").focus();
            }

        } else if (keycode === 39 || keycode === 40) {
            //right or down arrow
            next = $target.parent().next();

            if (next.length > 0) {
                next.find('>a').focus();
                if (keycode === 40) {
                    e.preventDefault();
                    return false;
                }
            } else if (keycode === 39) {
                $target.closest('.tabs').find("li:first>a").focus();
            }
        }
    })

}(jQuery, window));

;(function ($, window, undefined) {
    "use strict";

    /* SETUP */
    var pluginName = 'uitk_toggle',
        $body = $('body'),
        openClass = 'open',
        defaults = {
            transition: 'slide',
            paneHeight: 0
        },
        hasTransitions = Modernizr.csstransitions;

    /* TOGGLE */
    function Toggle(element, jsOptions) {
        uitk.utils.newModule.call(this, element, jsOptions, defaults);
    }

    Toggle.prototype = {

        constructor: Toggle,

        init: function () {
            this.togglePane = this.options.contentId ? $('#' + this.options.contentId) : $(this.element.attr('href'));
            this.togglePane.on(uitk.topics.transitionEnd, $.proxy(this.transitionEnd, this));

            // Set open state
            this.isOpen = (this.element.hasClass(openClass) || this.togglePane.hasClass(openClass)) ? true : false;

            // Set the initial height for partial toggle first
            if(!this.isOpen && this.options.paneHeight > 0) {
                this.togglePane.attr('style', 'height:'+this.options.paneHeight+'px');
            }
        },

        // Transition callback
        transitionEnd: function () {
            this.isOpen ? this.openEnd() : this.closeEnd();
        },

        // Sets the height of the Toggle Pane which aids the transition
        setOpenHeight: function () {
            this.togglePane.attr('style', 'height:'+this.togglePane[0].scrollHeight+'px');
        },

        // Opens the Toggle
        open: function (event) {
            // Publish and stop if manual
            if (this.options.manual === 'open' || this.options.manual === 'both') {
                uitk.publish('toggle.beforeOpen', this.element, event);
                return;
            }

            // Set transition method
            this.togglePane.addClass(this.options.transition);

            // Set open height -> scrollHeight for transition
            this.setOpenHeight();

            this.element.addClass(openClass);
            this.isOpen = true;
            if(this.options.collapseText) {
                this.element.html(this.options.collapseText);
            }

            if(!hasTransitions) {
                this.togglePane.addClass(openClass).removeClass(this.options.transition);
                uitk.publish('toggle.opened', this.element);
            }
        },

        // Post-open work (required because transitions are async)
        openEnd: function () {
            this.togglePane.addClass(openClass).removeClass(this.options.transition);
            uitk.publish('toggle.opened', this.element);
        },

        // Closes the Toggle
        close: function (event) {
            var that = this;

            // Publish and stop if manual
            if (this.options.manual === 'close' || this.options.manual === 'both') {
                uitk.publish('toggle.beforeClose', this.element, event);
                return;
            }

            // Remove open class (remove height:auto css rule)
            this.togglePane.removeClass(openClass);
            // Set open height -> scrollHeight for transition
            this.setOpenHeight();
            // Set transition method
            this.togglePane.addClass(this.options.transition);

            setTimeout(function(){
                that.togglePane.attr('style', 'height:' + that.options.paneHeight + 'px');
            }, 0);

            this.element.removeClass(openClass);
            this.isOpen = false;

            if(!hasTransitions) {
                this.togglePane.removeClass(this.options.transition);

                if(this.options.expandText) {
                    this.element.html(this.options.expandText);
                }

                uitk.publish('toggle.closed', this.element);
            }
        },

        // Post-close work (required because transitions are async)
        closeEnd: function () {
            this.togglePane.removeClass(this.options.transition);

            if(this.options.expandText) {
                this.element.html(this.options.expandText);
            }

            uitk.publish('toggle.closed', this.element);
        },

        // Open or close the Toggle
        toggle: function (event) {
            this.isOpen ? this.close(event) : this.open(event);
        }
    };

    // EVENT LISTENERS
    $body.on('click', '[data-control="toggle"]', function (e) {
        var $target = $(e.target), isFormElem;
        // Validation to form element within data-control='toggle' for toggle prevention.
        isFormElem = $target.is('input, select, textarea, label, [data-control="slider"]') || $target.hasClass('stepper-control') || $target.parent().hasClass('stepper-control');

        if(!isFormElem) {
            e.preventDefault();
            $(this)[pluginName]('toggle', e);
        }
    });

    // JQUERY PLUGIN DEFINITION
    uitk.utils.initPlugin(pluginName, Toggle);

    // Initiate partial toggle
    function initPartialToggle () {
        $('[data-control="toggle"][data-pane-height]')[pluginName]();
    }

    initPartialToggle();

    // Expose init partial toggle for dynamic client-side rendering
    uitk.initPartialToggle = initPartialToggle;

    // Expose object so it can be tested more easily
    uitk.modules.Toggle = Toggle;

}(jQuery, window));
/*
 *  Project: UITK Media Plugin
 *  Author: dstrugnell@expedia.com
 */

/*
 *  OPTIONS (passed via data-* attributes in the html)
 *
 */

// the semi-colon before function invocation is a safety net against concatenated
// scripts and/or other plugins which may not be closed properly.
;
(function ($, window, undefined) {

    'use strict';

    uitk.media = {};

    // Create the defaults once
    var pluginName = 'uitk_media',
        imageDefaults = {
            downgrade: false
        },
        videoDefaults = {
            mediaOptions: {}
        },
        mediaNum = 0,

        hasTransitions = Modernizr.csstransitions,
        lazyLoadMedia,
        doLazyLoadMedia,
        doLoadMedia,
        $window = $(window),


    //variables for ipad fix
        origScrollPosition = $window.scrollTop(),
        scrollTimeout,
        loopCount = 1,
        maxLoops = 10,
        setScrollTimeout,
        stopScrollTest,
        doScrollTest = true;

    /* CONSTRUCTOR FOR IMAGE */
    function MediaImage(element, jsOptions) {

        var that = this,
            newOptions;

        that.element = $(element);

        jsOptions = jsOptions || {};
        newOptions = that.element.data() || {};

        that.options = $.extend(true, {}, imageDefaults, newOptions, jsOptions);
        that.svgFallback = that.element.attr('data-svgFallback');
        that.init();
    }

    MediaImage.prototype = {

        constructor: MediaImage,

        init: function () {

            var that = this,
                options = that.options,
                src = options.src;
            if (options.lazy || options.late) {

                //Fallback for browsers not supporting SVG
                var supportSVG = Modernizr.svg;
                if (!supportSVG && that.svgFallback) {
                    src = that.svgFallback;
                }
                //flag image as not yet loaded
                that.lazyLoaded = false;

                that.initialAspectRatio = options.aspectRatio || '16-9';

                //set the image src and fall back to "" if data-src doesn't exist
                that.imgSrc = src ? that.createFullUrl(src, options.path) : '';

                //variable to hold the current image
                that.currentImg = '';

                //check to see if image is inside a content slider
                that.isContentSlider = that.element.closest('[data-control="content-slider"]').length > 0;

                //check to see if image is inside a media viewer
                that.isMediaViewer = that.element.closest('[data-control="media-viewer"]').length > 0;

                //check to see if the a scrset is passed in and the browser
                if (options.srcset && uitk.isResponsive) {

                    //parse srcset and store returned array
                    that.imgSrcsetArr = that.parseSrcset(options.srcset, Modernizr.highres, options.path);

                    //set to responsive
                    that.responsive = true;

                    //flag for removeSmaller
                    that.largestIsLoaded = false;
                }
            }
        },

        //used to join together the src and the path
        createFullUrl: function (src, path) {
            //used to check the src isn't already a full url
            if (src.indexOf('//') !== -1 || !path || src === 'noimage') {
                return src;
            } else {
                return path + src;
            }
        },

        //parses an image src and returns an object
        parseSrc: function (src, path) {
            var srcSplit = $.trim(src).split(' '),
                srcSplitLength = srcSplit.length,
                srcObj = {retina: false},
                i;

            //the first part of the src is always the url
            srcObj.url = this.createFullUrl(srcSplit[0], path);

            //the other parts could be width or pixel density
            //loop through remaining parts of the string
            for (i = 1; i < srcSplitLength; i = i + 1) {
                var arg = srcSplit[i];

                if (arg[arg.length - 1] === 'w') {
                    srcObj.width = parseInt(arg, 10);
                } else if (arg === '1-1' || arg === '3-2' || arg === '4-3' || arg === '16-9') {
                    srcObj.ratio = arg;
                } else if (arg === '2x') {
                    srcObj.retina = true;
                }
            }

            return srcObj;
        },

        //parses a complete srcset and returns an array
        // breaks it up to separate urls with breakpoints
        parseSrcset: function (srcset, retina, path) {
            var that = this,
                srcsetSplit = srcset.split(','),
                srcsetSplitLength = srcset.split(',').length,
                srcsetArr = [],
                srcsetArrLength,
                i;

            for (i = 0; i < srcsetSplitLength; i = i + 1) {
                var srcObj = that.parseSrc(srcsetSplit[i], path);
                srcsetArr.push(srcObj);
            }

            //sort array base on width, with smallest with first
            //if width is undefined set it to 100000 to make it come last
            srcsetArr.sort(function (a, b) {
                var fallbackWidth = 100000,
                    widthA = a.width || fallbackWidth,
                    widthB = b.width || fallbackWidth;

                return widthA - widthB;
            });

            //remove duplicates so that each width only has one image associated with it
            //which image is based on whether retina images are required.
            //using an inversed for loop so items can be removed without causing issues
            srcsetArrLength = srcsetArr.length;
            for (i = srcsetArrLength - 1; i > 0; i = i - 1) {
                //check if value is the same as previous value
                if (srcsetArr[i].width === srcsetArr[i - 1].width) {
                    //check if retina is the correct value
                    //if its not then remove it
                    if (srcsetArr[i].retina !== retina) {
                        srcsetArr.splice(i, 1);
                    } else {
                        srcsetArr.splice(i - 1, 1);
                    }
                }
            }

            return srcsetArr;
        },

        //chooses the correct image to load our of a srcsetArr, based on the screenWidth that is passed in
        //whether a screen is retina of not is already taken care off by the parseSrcset function
        getImgToLoad: function (srcsetArr, defaultSrc, responsive) {
            var srcsetArrLength,
                i;

            //if there is isn't a srcsetArray or browser isn't responsive then return the default src
            if (!srcsetArr || !responsive) {
                return {url: defaultSrc};
            }

            srcsetArrLength = srcsetArr.length;

            for (i = 0; i < srcsetArrLength; i = i + 1) {
                if (Modernizr.mq('(max-width:' + srcsetArr[i].width / 16 + 'em)')) {
                    return srcsetArr[i];
                }
            }

            return srcsetArr[srcsetArrLength - 1];
        },

        //preload image
        // this is getting called by embedImage at the end of lazyLoad
        // it runs the 'loaded' function if the img src is available
        // and the 'errored' if it's not able to load OR provides FF solution
        preloadImg: function (src, loaded, errored) {

            var that = this,
                image = new Image();

            image.onload = function () {
                loaded();

                //publish when an image is loaded
                uitk.publish('image.loaded', {element: that.element});
            };

            if (errored) {
                image.onerror = function () {
                    errored();

                    //publish when an image is loaded
                    uitk.publish('image.errored', {element: that.element});
                };
            }

            if (!src) {
                // Firefox doesn't support onerror() when the src is empty
                image.onerror();
            } else {
                image.src = src;
            }
        },

        //removes all proceeding values from an array
        // the above line is FALSE. it just replaces the urls in the array with the biggest loaded one.
        removeSmallerImages: function (url) {
            var that = this,
                srcsetArr = that.imgSrcsetArr,
                smallestWidth = Infinity,
                noImgBool = true;

            if (srcsetArr && url) {
                var srcsetArrLength = srcsetArr.length, i;

                for (i = 0; i < srcsetArrLength; i = i + 1) {
                    if (srcsetArr[i].url === url) {
                        smallestWidth = srcsetArr[i].width || smallestWidth;
                        break;
                    }
                }

                that.imgSrcsetArr = $.map(srcsetArr, function (imgObj) {
                    if (imgObj.width !== undefined && imgObj.width < smallestWidth && imgObj.url !== 'noimage') {
                        imgObj.url = url;
                    }

                    noImgBool = noImgBool && (imgObj.url !== 'noimage');

                    return imgObj;
                });

                that.largestIsLoaded = noImgBool;
                return (that.imgSrcsetArr);
            }
        },

        updateImgSrc: function (url) {
            var that = this;

            that.image.src = url;

            //height and width attributes need to be removed in IE
            //as they are added by default when the src is changed
            //this conflicts with the styles in our css which make the images flex
            that.image.removeAttribute('height');
            that.image.removeAttribute('width');
        },

        updateRatio: function ($elem, ratio) {
            var that = this;

            //if not in side media viewer add aspect ratio
            if (!that.isMediaViewer) {
                $elem.removeClass('aspect-ratio1-1 aspect-ratio3-2 aspect-ratio4-3 aspect-ratio5-4 aspect-ratio16-9');
                //if a ratio is specified, reset the figure tag's ratio class
                if (ratio) {
                    $elem.addClass('aspect-ratio' + ratio);
                } else {
                    $elem.addClass('aspect-ratio' + that.initialAspectRatio);
                }
            }
        },

        // this function runs at the end of lazyLoad - this is THE image loader fn
        embedImage: function (imgData, imgAlt, imgClass, $elem) {
            var that = this,
                imgSrc = imgData.url;

            //make sure image isn't already being used
            if (imgSrc && that.currentImg === imgSrc) {
                return;
            }

            that.currentImg = imgSrc;

            //preload image
            that.preloadImg(imgSrc, function () {
                //only do any updating if the preloaded image is the image required
                if (that.currentImg === imgSrc) {

                    //if not already lazyLoaded image tag needs to be created and/or set
                    if (!that.lazyLoaded) {
                        that.lazyLoaded = true;

                        //reset classes
                        $elem.removeClass('no-image');
                        $elem.addClass('loading');

                        //create image and add it to the page
                        that.image = window.document.createElement('img');
                        that.image.alt = imgAlt;
                        that.image.className = imgClass;

                        that.image.onload = function () {
                            setTimeout(function () {
                                $elem.removeClass('loading');
                            }, 10);
                        };

                        that.updateImgSrc(imgSrc);

                        //add image to the page
                        $elem.prepend(that.image);
                    } else {
                        that.updateImgSrc(imgSrc);
                    }

                    if (that.responsive) {
                        if (that.options.downgrade) {
                            that.updateRatio($elem, imgData.ratio);
                        } else {
                            that.removeSmallerImages(imgSrc);
                        }
                    }
                }
            }, function () {
                //add no image class if image hasn't already been loaded
                if (!that.lazyLoaded) {
                    $elem.removeClass('loading');
                    $elem.addClass('no-image');
                    //for none responsive image set image loaded to true to stop any more attempts to load the image
                    if (!that.responsive) {
                        that.lazyLoaded = true;
                    }
                }
            });
        },

        lazyLoad: function (force) {
            var that = this,
                options = that.options,
                isContentSlider = that.isContentSlider,
                element = that.element;
            if (!that.lazyLoaded || that.responsive || options.late) {
                var imgData;

                //check figure isn't hidden visible
                if (element.css('display') === 'none' || element.css('visibility') === 'hidden') {
                    return;
                }

                //if media gallery
                if (that.isMediaViewer && !element.hasClass('current') && !force) {
                    return;
                }

                //handle lazy loading
                if (!isContentSlider || (isContentSlider && element.closest('.current-tile').length > 0)) {

                    // this makes sure we don't go through if it's ok to skip new image loading
                    if (!that.downgrade && that.largestIsLoaded) {
                        return;
                    }

                    imgData = that.getImgToLoad(that.imgSrcsetArr, that.imgSrc, uitk.isResponsive);
                    // If imgData.url is set to 'noimage' then hide the image and exit this method so that we don't try to load an image
                    if (imgData.url === 'noimage') {
                        element.addClass('dont-display');

                        //set the background image to nothing on responsive background images
                        if (element.data('media-type') === 'background') {
                            element.css('background-image', '');
                            that.currentImg = 'noimage';
                        }
                        return;
                    } else {
                        element.removeClass('dont-display');
                    }
                    that.embedImage(imgData, options.alt, options['class'], element);
                }
            }
        },

        lateLoad: function () {
            var that = this,
                lateMedia = that.element,
                delay = uitk.media.delay || 100;

            if (lateMedia.length !== 0) {

                if (!that.options.late) {
                    that.options.late = true;
                }

                setTimeout(function () {
                    that.lazyLoad();
                    uitk.publish('lateLoad.media', that);
                }, delay);

            }

        }
    };


    /* BACKGROUND IMAGE */

    //extends MediaImage
    MediaBgImage.prototype = new MediaImage();
    MediaBgImage.prototype.constructor = MediaBgImage;

    //constructor for mediaBgImage
    function MediaBgImage(element, jsOptions) {
        var that = this,
            newOptions;

        that.element = $(element);

        jsOptions = jsOptions || {};
        newOptions = that.element.data() || {};

        that.options = $.extend(true, {}, imageDefaults, newOptions, jsOptions);
        that.options.lazy = true;

        that.init();
    }

    MediaBgImage.prototype.embedImage = function (imgData, imgAlt, imgClass, $elem) {

        var that = this,
            imgSrc = imgData.url;

        //make sure image isn't already being used
        if (imgSrc && that.currentImg === imgSrc) {
            return;
        }

        that.currentImg = imgSrc;

        //preload image
        that.preloadImg(imgSrc, function () {
            //only do any updating if the preloaded image is the image required
            if (that.currentImg === imgSrc) {

                that.lazyLoaded = true;

                //reset classes
                $elem.removeClass('no-image');


                that.updateImgSrc(imgSrc);
                $elem.removeClass('loading');


                if (that.responsive) {
                    if (that.options.downgrade) {
                        that.updateRatio($elem, imgData.ratio);
                    } else {
                        that.removeSmallerImages(imgSrc);
                    }
                }
            }
        }, function () {
            //add no image class if image hasn't already been loaded
            if (!that.lazyLoaded) {
                $elem.removeClass('loading');
                $elem.addClass('no-image');
                //for none responsive image set image loaded to true to stop any more attempts to load the image
                if (!that.responsive) {
                    that.lazyLoaded = true;
                }
            }
        });


    };

    MediaBgImage.prototype.updateImgSrc = function (url) {
        this.element.css('background-image', 'url(' + url + ')');
    };


    /* CONSTRUCTOR FOR VIDEO */
    function MediaVideo(element, jsOptions) {

        var that = this,
            newOptions;

        that.element = $(element);

        jsOptions = jsOptions || {};
        newOptions = that.element.data() || {};

        that.options = $.extend(true, {}, videoDefaults, newOptions, jsOptions);

        that.init();
    }

    MediaVideo.prototype = {

        constructor: MediaVideo,

        init: function () {
            var that = this;
            if (!that.options.lazy) {
                that.embedVideo();
            } else {
                that.lazyLoaded = false;
                that.isContentSlider = that.element.closest('[data-control="content-slider"]').length > 0;
            }
        },

        embedVideo: function () {

            var that = this,
                options = that.options,
                mediaType = options.mediaType,
                mediaOptions = options.mediaOptions,
                mediaId = options.mediaId,
                elem = that.element,
                videoPlayer,
                videoParameters = !options.videoParameters ? '' : options.videoParameters,
                html;

            //create ID
            that.videoId = 'M' + mediaNum + '_' + mediaType + mediaId;
            var iframeVideoId = that.videoId,
                iFrame = uitk.getCompiledTemplate('uitk-youtube-video');

            if (!window.location.origin) {
                window.location.origin = window.location.protocol + '//' + window.location.hostname + (window.location.port ? ':' + window.location.port : '');
            }

            var origin = '&origin=' + window.location.origin;
            mediaNum++;

            //add video placeholder - allowTransparency is required for IE8 to stop it flashing white.
            html = iFrame({
                id: iframeVideoId,
                mediaId: mediaId,
                videoParameters: '&' + videoParameters + origin
            });
            elem.append(html);

            //embed video
            videoPlayer = uitk.embedVideo(mediaType, mediaId, mediaOptions, that.videoId, function () {
                //attaches an object to the figure that gives a consistent interface to the
                //controls - play, pause and stop
                videoPlayer.done(function (video) {
                    elem.removeClass('loading').data('video', uitk.createVideoObject(mediaType, video));
                });
            });

            that.videoPlayer = videoPlayer;
        },

        lazyLoad: function () {
            var that = this;
            if (!that.lazyLoaded) {

                //check figure isn't hidden visible
                if (that.element.css('display') === 'none' || that.element.css('visibility') === 'hidden') {
                    return;
                }

                if (!that.isContentSlider || (that.isContentSlider && that.element.closest('.current-tile').length > 0)) {
                    that.embedVideo();
                    that.lazyLoaded = true;
                }
            }
        }
    };


    /* JQUERY PLUGIN DEFINITION */
    $.fn[pluginName] = function () {

        var options, method, arg, arg2;

        if (typeof arguments[0] === 'object') {
            options = arguments[0];
            method = arguments[1];
            arg = arguments[2];
            arg2 = arguments[3];
        } else {
            options = {};
            method = arguments[0];
            arg = arguments[1];
            arg2 = arguments[2];
        }

        return this.each(function () {
            var $this = $(this);

            if (!$.data(this, pluginName)) {

                if ($this.data('mediaType') && $this.data('mediaType') === 'youtube') {
                    $.data(this, pluginName, new MediaVideo(this, options));
                } else if ($this.data('mediaType') && $this.data('mediaType') === 'background') {
                    $.data(this, pluginName, new MediaBgImage(this, options));
                } else {
                    $.data(this, pluginName, new MediaImage(this, options));
                }
            }
            if (typeof method === 'string') {
                $.data(this, pluginName)[method](arg, arg2);
            }
        });
    };

    //init responsive sliders on page load
    $('[data-control=media]')[pluginName]();


    //subscribe to content slider page change
    uitk.subscribe('contentSlider.pageChange', function (topic, $contentSlider, currentPage, viewChange) {
        var transitionEnd = uitk.topics.transitionEnd;

        $contentSlider.off(transitionEnd);

        //if transitions are available and not a view change load image at end of slide
        if (hasTransitions && !viewChange) {
            $contentSlider.on(transitionEnd, function () {
                lazyLoadMedia();
                $contentSlider.off(transitionEnd);
            });
        } else {
            //set timeout required to let kindle catch up on orientation change
            setTimeout(function () {
                lazyLoadMedia();
            }, 50);
        }
    });


    //lazy loading on page scroll/resize
    lazyLoadMedia = function () {

        //find lazy media but exclude late loaded background
        var lazyMedia = $('figure[data-lazy="true"], .background[data-media-type="background"]:not([data-late="true"])'),
            windowTop = $window.scrollTop(),
            windowBottom = windowTop + $window.height(),
            lazyBuffer = uitk.media.lazyBuffer || 0;

        lazyMedia.each(function () {
            var $elem = $(this),
                elemOffset = $elem.offset(),
                elemTop = elemOffset.top,
                elemBottom = elemTop + $elem.outerHeight(),
                inRange = ((elemTop - lazyBuffer) < windowBottom) && ((elemBottom + lazyBuffer) > windowTop);

            if (elemTop !== 0 && inRange) {
                $elem[pluginName]('lazyLoad');
            }
        });
    };

    //does the lazy load and stops the scroll test
    doLazyLoadMedia = function () {
        lazyLoadMedia();
        stopScrollTest();
    };

    // this loads both lazy and late loaded images on the page
    // (lazy only if needed - eg. in the range of loading)
    doLoadMedia = function () {
        $('figure[data-late="true"]')[pluginName]('lateLoad');
        lazyLoadMedia();
    };

    //The following fixes and issue on the iPad, where the page position changes after page load but the
    //scroll event isn't fired and image don't get loaded. The following manually checks for a change in
    //scroll position.
    stopScrollTest = function () {
    };

    if (uitk.hasTouch) {

        stopScrollTest = function () {
            clearTimeout(scrollTimeout);
            doScrollTest = false;
        };

        //stop the scroll test if the user touches the page
        $('body').one('touchstart', function () {
            stopScrollTest();
        });

        //function to create the timeout that tests if the scroll position has changed
        setScrollTimeout = function () {
            scrollTimeout = setTimeout(function () {
                if ($window.scrollTop() !== origScrollPosition) {
                    lazyLoadMedia();
                    return;
                }

                //repeat scroll test
                if (loopCount < maxLoops) {
                    loopCount = loopCount + 1;
                    setScrollTimeout();
                }
            }, 500);
        };

        //if scroll test hasn't already been stopped set the timeout
        if (doScrollTest) {
            setScrollTimeout();
        }
    }
    
    // Moved from uitk.js to here because it's the only user and i think it may be able to be removed
    uitk.registerScrollArea = function(selector) {
        var scrollTimeout;
        $(selector).scroll(function() {
            if (scrollTimeout) {
                clearTimeout(scrollTimeout);
            }

            scrollTimeout = setTimeout(function () {
                uitk.publish('debounced.scroll');
            }, 150);
        });
    };

    uitk.registerScrollArea(window);
    uitk.registerScrollArea('[data-scroll-area]');

    //subscribe to topics
    // only attaching lazyLoading for scrolling because of backwards compatibility
    uitk.subscribe('debounced.scroll', doLazyLoadMedia);
    uitk.subscribe('debounced.resize', doLoadMedia);
    uitk.subscribe('menu.opened', doLoadMedia);
    uitk.subscribe('toggle.opened', doLoadMedia);


    //do lazy and late load on page load
    lazyLoadMedia();
    $('figure[data-late="true"]')[pluginName]('lateLoad');

    uitk.utils.loadMedia = doLoadMedia;

    //expose object so it can be tested without DOM
    uitk.modules.MediaImage = MediaImage;
    uitk.modules.MediaBgImage = MediaBgImage;

}(jQuery, window));
/*
 *  Project: UI Image Carousel Plugin
 *  Description: jQuery Image Carousel Plugin for use in the Expedia.com UI Toolkit
 *  Author: dstrugnell@expedia.com
 */

/*
 *  OPTIONS (passed via data-* attributes in the html)
 *
 */

// the semi-colon before function invocation is a safety net against concatenated
// scripts and/or other plugins which may not be closed properly.
;
(function ($, window, undefined) {

    'use strict';

    // Create the defaults once
    var pluginName = 'uitk_mediaViewer',
        $body = $('body'),
        $html = $('html'),
        clickEvent = uitk.clickEvent + '.' + pluginName,
        defaults = {},
        currentClass = 'current',
        mediaCarouselNum = 0,
        loaderDelay = 500,
        controlButtons = '.image-slider-control';


    /* CONSTRUCTOR */
    function MediaViewer(element, jsOptions) {
        uitk.utils.newModule.call(this, element, jsOptions, defaults);
    }

    MediaViewer.prototype = {

        constructor: MediaViewer,

        init: function () {
            var that = this,
                media,
                elemSliderId = that.options.sliderId,
                subscribe;

            // timeout for show media
            that.showMediaTimeout = '';

            // need to create unique id for individual videos as well as if multiple media carousels are on the page
            that.mediaCarouselNum = mediaCarouselNum;
            mediaCarouselNum++;
            that.videoCount = 0;

            // image template
            if (!this.mediaTemplate) {
                MediaViewer.prototype.mediaTemplate = uitk.getCompiledTemplate("figure-tag");
            }

            // if uitk is present subscribe to media-selected topic
            if (uitk) {
                subscribe = function (topic, thumb, sliderId, firstImage) {
                    if (elemSliderId === sliderId) {
                        var mediaType,
                            anchor;

                        that.firstImage = firstImage;

                        anchor = thumb.find("a");
                        mediaType = anchor.data("mediaType") || "image";

                        switch (mediaType) {
                            case "image":
                                var anchorData = anchor.data(),
                                    mediaUrl = anchor.attr("href"),
                                    mediaAlt = thumb.find("img").attr("alt"),
                                    mediaCaption = anchor.data("caption");

                                // for accessibility, the alt output should be empty if the alt and caption text are the same
                                if (mediaAlt === mediaCaption) {
                                    mediaAlt = "";
                                }
                                this.showMedia("image", mediaUrl, mediaAlt, anchorData);
                                break;
                            case "youtube":
                                var videoId = anchor.data("mediaId"),
                                    videoParams = anchor.data("videoParameters"),
                                    videoOptions = anchor.data("mediaOptions") || {};
                                //check to see if & is omitted, if it is, then add it
                                videoParams = !videoParams || videoParams !== "" && videoParams.charAt(0) === "&" ? videoParams : "&" + videoParams;
                                this.showMedia("youtube", videoId, videoOptions, videoParams);
                                break;
                            default:
                            //should never execute as default is image
                        }
                    }
                };

                uitk.subscribe("media.selected", this, subscribe);

                // subscribe to image.loaded and image.errored in order to handle responsive images
                uitk.subscribe("image.loaded", function (topic, data) {
                    // check the image that has just loaded is inside the media viewer
                    if ($.contains(that.element[0], data.element[0])) {
                        // timeout is required to fix fading issue
                        setTimeout(function () {
                            that.handleImageLoad(data.element);
                        }, 0);
                    }
                });

                uitk.subscribe("image.errored", function (topic, data) {
                    // check the image that has just errored is inside the media viewer
                    if ($.contains(that.element[0], data.element[0])) {
                        that.handleImageError(data.element);
                    }
                });
            }

            // set up swipe (hasTouch doesn't include Windows 8 Touch hence the other parameter)
            if (Modernizr.touch || window.navigator.msPointerEnabled) {
                var gestureHandling = new Hammer(that.element[0]);

                gestureHandling.on('swipe', function(e) {
                    var $imageSlider = null,
                        distance = (-1) * e.deltaX,
                        direction = distance < 0 ? 'right' : 'left';

                    if (!$imageSlider) {
                        $imageSlider = $(e.target).closest('[data-control="media-viewer"]');
                    }

                    if (e.type === 'swipe') {
                        $imageSlider[pluginName]('slideEnd', direction, distance);
                    }
                });
            }
        },

        open: function () {
            var $wrapper = this.element.closest('.media-viewer-wrapper'),
                $wrap = this.element.closest('.media-viewer-wrap'),
                height = $wrapper.height(),
                wrap;
            $html.addClass('active-modal'); // to lock scrolling, needs to be abstracted
            $wrapper.addClass('media-fullscreen-active');
            $wrapper.css('height', height);
            $wrap.addClass('media-viewer-fullscreen');
            $wrap.addClass('active');
            $wrap.children('.media-viewer-open').addClass('hidden');
            $wrap.find('.media-viewer-close').removeClass('hidden');
            wrap = $wrap.detach();
            $body.append(wrap);
            uitk.publish('media.open');
        },

        close: function () {
            var $wrap = this.element.closest('.media-viewer-fullscreen.active'),
                wrap;

            $html.removeClass('active-modal'); // to lock scrolling, needs to be abstracted
            $wrap.removeClass('media-viewer-fullscreen');
            $wrap.removeClass('active');
            $wrap.find('.media-viewer-close').addClass('hidden');
            $wrap.children('.media-viewer-open').removeClass('hidden');
            wrap = $wrap.detach();
            $('.media-viewer-wrapper.media-fullscreen-active').append(wrap);
            $('.media-viewer-wrapper.media-fullscreen-active').css('height', 'auto');
            $('.media-viewer-wrapper.media-fullscreen-active').removeClass('media-fullscreen-active');
            uitk.publish('media.close');
        },

        showMedia: function (mediaType) {
            var args = arguments,
                viewer = this.element,
                that = this;

            // if current media is a video stop it
            if (this.current && this.current.data("video")) {
                this.current.data("video").pauseVideo();
            }

            mediaType = mediaType || "image";

            // hide current media
            viewer.find("." + currentClass).removeClass(currentClass).attr("aria-hidden", true);

            // delay the adding of the "loading" class by 500ms to prevent it from showing if the media loads quickly
            clearTimeout(that.showMediaLoaderTimeout);
            that.showMediaLoaderTimeout = setTimeout(function () {
                viewer.addClass("loading");
            }, loaderDelay);


            clearTimeout(that.showMediaTimeout);


            switch (mediaType) {
                case "image":
                    that.showImage(args[1], args[2], args[3]);
                    break;
                case "youtube":
                    that.showVideo(mediaType, args[1], args[2], args[3]);
                    break;
                default:
                // should never execute as default is image
            }
        },

        showImage: function (mediaUrl, mediaAlt, dataAttributes) {
            var that = this,
                viewer = this.element,
                newMedia,
                newMediaImg,
                mediaCaption = dataAttributes ? dataAttributes.caption : undefined,
                srcset = dataAttributes ? dataAttributes.srcset : undefined,
                useSrcset = srcset && uitk.isResponsive,
                largeMedia = viewer.find("[data-src=\"" + mediaUrl + "\"]").eq(0);

            // set top padding to 0
            largeMedia.css({"padding-top": 0});

            // load and display selected media
            if (largeMedia.length === 0) {
                // add a slight delay to adding a new image to stop images loading if you are flicking through the carousel
                this.showMediaTimeout = setTimeout(function () {
                    var ratioClass = "aspect-ratio" + dataAttributes.aspectRatio,
                        imageData = {
                            isImage: true,
                            mediaType: "image",
                            aspectRatio: dataAttributes.aspectRatio,
                            src: mediaUrl,
                            alt: mediaAlt,
                            caption: mediaCaption,
                            captionClass: "media-caption",
                            classes: "media-wrap image",
                            dataAttributes: "data-unique-id=\"" + uitk.createUniqueId() + "\""
                        },
                        path,
                        downgrade;

                    if (dataAttributes) {
                        path = dataAttributes.path;
                        downgrade = dataAttributes.downgrade;
                    }

                    // add responsive data if required
                    if (useSrcset) {
                        imageData.srcSet = srcset;
                        imageData.lazyIsTrue = true;
                        imageData.lazy = true;

                        if (downgrade) {
                            imageData.downgrade = downgrade;
                        }

                        if (path) {
                            imageData.path = path;
                        }
                    }

                    newMedia = $(that.mediaTemplate(imageData));
                    that.current = newMedia;

                    viewer.find('.media-collection').append(newMedia);


                    if (!useSrcset) {
                        newMediaImg = newMedia.find("img");

                        newMediaImg.one("load", function () {
                            // Add class landscape to image when image is in landscape
                            if(newMediaImg.width() >= newMediaImg.height()) {
                                newMediaImg.addClass('landscape');
                            }

                            that.handleImageLoad(newMedia);
                        });

                        // catch when image isn't loaded
                        newMediaImg.one("error", function () {
                            that.handleImageError(newMedia);
                        });

                        // handle if image is already loaded
                        if (newMediaImg[0].complete || newMedia.hasClass("no-image")) {
                            // fixes a fading issue on Firefox
                            newMediaImg.width();

                            // if already loaded manually trigger load
                            newMediaImg.trigger("load");
                        }
                    } else {
                        newMedia.uitk_media("lazyLoad", true);
                    }
                }, 10);

            } else if ((largeMedia.find("img").length > 0 && largeMedia.find("img")[0].complete) || largeMedia.hasClass("no-image")) {
                that.current = largeMedia;

                that.handleImageLoad(largeMedia);

                if (useSrcset) {
                    largeMedia.uitk_media("lazyLoad");
                }
            }

        },

        handleImageLoad: function (newMedia) {
            var that = this;

            if (that.current.data("uniqueId") === newMedia.data("uniqueId")) {
                // remove "loading" class from parent
                clearTimeout(that.showMediaLoaderTimeout);
                that.element.removeClass("loading");
                // show media
                newMedia.addClass(currentClass).attr("aria-hidden", false);
            }
        },

        handleImageError: function (newMedia) {
            var that = this;

            // remove "loading" class from parent
            clearTimeout(that.showMediaLoaderTimeout);
            that.element.removeClass("loading");

            // if responsive image let media.js handle no-image
            if (!newMedia.data("srcset")) {
                // add missing image icon
                newMedia.addClass("no-image");
            }

            if(that.firstImage) {
                newMedia.remove();
                uitk.publish('media.firstImageError');
            } else {
                // show image
                that.handleImageLoad(newMedia);
            }
        },

        getMCVideoId: function (mediaType, videoId) {
            this.videoCount++;
            return "MC" + this.mediaCarouselNum + this.videoCount + "_" + mediaType + videoId;
        },

        getVideoIframe: function (id) {
            return $("#" + id);
        },

        showVideo: function (mediaType, videoId, videoOptions, videoParams) {
            var that = this,
                viewer = that.element,
                id = that.getMCVideoId(mediaType, videoId),
                newMedia,
                newMediaVideo,
                iFrame = that.getVideoIframe(id),
                html,
                videoParameters = !videoParams ? '' : videoParams;

            if (!window.location.origin) {
                window.location.origin = window.location.protocol + "//" + window.location.hostname + (window.location.port ? ':' + window.location.port : '');
            }

            var origin = '&origin=' + window.location.origin,
                videoIFrame = uitk.getCompiledTemplate('uitk-youtube-video');

            if (iFrame.length === 0) {
                //add a slight delay to adding a new video to stop video loading if you are flicking through the carousel
                this.showMediaTimeout = setTimeout(function () {

                    var videoData = {
                        classes: "media-wrap"
                    };

                    newMedia = $(that.mediaTemplate(videoData));

                    html = videoIFrame({
                        id: id,
                        mediaId: videoId,
                        videoParameters: videoParameters + origin
                    });
                    newMedia.prepend(html);
                    viewer.prepend(newMedia);

                    that.current = newMedia;

                    //uitk.createVideoEmbed returns a jquery deferred object
                    newMediaVideo = uitk.embedVideo(mediaType, videoId, videoOptions, id, function () {
                        //attaches an object to the media-wrap that gives a consistent interface to the
                        //controls - play, pause and stop
                        newMediaVideo.done(function (video) {
                            newMedia.data("video", uitk.createVideoObject(mediaType, video));

                            if (that.current === newMedia) {
                                clearTimeout(that.showMediaLoaderTimeout);
                                viewer.removeClass("loading");

                                newMedia.addClass(currentClass).attr("aria-hidden", false);
                            }
                        });
                    });

                    //if less than IE9 add current class straight away so no flash
                    //message can be shown if needed
                    if ($("html").hasClass("lt-ie9")) {
                        newMedia.addClass(currentClass).attr("aria-hidden", false);
                    }
                }, 500);

            } else {

                newMedia = iFrame.closest(".media-wrap");

                this.current = newMedia;

                //rewind
                if (newMedia.data("video") && newMedia.data("video").videoObj.getPlayerState() !== -1) {
                    newMedia.data("video").rewindVideo();
                }

                //remove 'loading' class from .media-viewer
                clearTimeout(that.showMediaLoaderTimeout);
                viewer.removeClass("loading");
                //show media
                newMedia.addClass(currentClass).attr("aria-hidden", false);
            }

        },

        getTopPadding: function (mediaViewerHeight, currentMediaHeight) {
            return Math.floor((mediaViewerHeight - currentMediaHeight) / 2);
        },

        // Touch Sliding
        slideEnd: function(direction, distance){
            var that = this,
                relationalDistance = Math.abs(distance/that.element.width()),
                $imageSlider = $(that.element).siblings('[data-control="image-slider"]');

            if (relationalDistance > 0.08){
                if (direction === 'left') {
                    $imageSlider['uitk_mediaSlider']('next');
                } else {
                    $imageSlider['uitk_mediaSlider']('prev');
                }
            }else{
                that.moveToPage(that.currentPage);
            }
        }
    };


    /* JQUERY PLUGIN DEFINITION */
    uitk.utils.initPlugin(pluginName, MediaViewer);

    // GOING AWAY?
    $body.on(clickEvent, '.media-viewer-open', function (e) {
        var $target = $(e.target),
            $control = $target.closest('.media-viewer-open'),
            $carousel = $control.siblings('[data-control="media-viewer"]');
        e.preventDefault();

        $carousel[pluginName]('open');
    });

    $body.on(clickEvent, '.media-collection img', function (e) {
        var $carousel = $(this).closest('[data-control="media-viewer"]');
        e.preventDefault();
        if (!$carousel.closest('.media-viewer-wrap').hasClass('active')) {
            $carousel[pluginName]('open');
        }
    });

    $body.on(clickEvent, '.media-viewer-close', function (e) {
        var $target = $(e.target),
            $control = $target.closest('.media-viewer-close'),
            $carousel = $control.parent('[data-control="media-viewer"]');
        e.preventDefault();

        $carousel[pluginName]('close');
    });

    $('[data-control=media-viewer]')[pluginName]();

    function initMediaViewer() {
        // init image carousel on page load in order to subscribe to 'media.selected'
        $('[data-control=media-viewer]')[pluginName]();
        $('[data-control=image-slider]')['uitk_mediaSlider']();
    }

    uitk.initMediaViewer = initMediaViewer;

    // expose object so it can be tested without DOM
    uitk.modules.MediaViewer = MediaViewer;

}(jQuery, window));
/*
 *  Project: UI Media Carousel Plugin
 *  Description: jQuery Media Carousel Plugin for use in the Expedia.com UI Toolkit
 *  Author: dstrugnell@expedia.com
 */

/*
 *  OPTIONS (passed via data-* attributes in the html)
 *
 */
// Note: This file has been renamed to media-slide.js from image-slide.js because it
// handles images, video and 360° tours
// the semi-colon before function invocation is a safety net against concatenated
// scripts and/or other plugins which may not be closed properly.
;
(function ($, window, undefined) {

    'use strict';

    /* Create the defaults once */
    var pluginName = 'uitk_mediaSlider',
        $body = $('body'),
    //  defaults = {},
        currentClass = 'current',
        clickEvent = uitk.clickEvent + '.' + pluginName;


    /* CONSTRUCTOR */
    function MediaSlider(element, jsOptions) {
        uitk.utils.newModule.call(this, element, jsOptions);
    }

    MediaSlider.prototype = {

        constructor: MediaSlider,

        init: function () {
            var elem = this.element,
                that = this,
                $thumbs;

            //add data-control
            elem.attr('data-control', 'image-slider');

            //parts of the carousel
            that.sliderId = that.options.sliderId;
            that.thumbs = elem.find('.image-slider-thumbs');
            that.mask = elem.find('.image-slider-mask');
            that.current = that.thumbs.find('.' + currentClass);

            $thumbs = that.thumbs.find('a');
            $thumbs.each(function() {
                var $thumb = $(this),
                    src = $thumb.data('thumbSrc'),
                    alt = $thumb.data('thumbAlt'),
                    image = new Image();

                image.onload = function() {
                    that.handleImageLoad($thumb, image);
                };

                image.onerror = function() {
                    that.handleImageError($thumb, image);
                };

                if(!src) {
                    // Firefox doesn't support onerror() when the src is empty
                    image.onerror();
                } else {
                    image.src = src;
                    image.alt = alt;
                }
            });

            uitk.subscribe('media.firstImageError', function() {
                that.firstImageFailed();
            });

            //selected current thumb on init
            that.selectFirstImage();
        },

        selectFirstImage: function() {
            this.selectThumb(this.thumbs.find('li').first(), true, true);
        },

        firstImageFailed: function() {
            this.thumbs.find('li').first().remove();
            this.selectFirstImage();
        },

        handleImageLoad: function($thumb, image) {
            $thumb.append(image);
        },

        handleImageError: function($thumb, image) {
            $thumb.addClass('no-image');
        },

        testThumbPosition: function (thumb) {

            var that = this,
                lastThumb = that.thumbs.find('li:last'),
                thumbLeftPos =  thumb.offset().left,
                thumbRightPos = thumbLeftPos + thumb.outerWidth(),
                maskLeftPos = that.mask.offset().left,
                maskRightPos = maskLeftPos + that.mask.outerWidth(),
                lastThumbRightPos = lastThumb.offset().left + lastThumb.width();
            return (thumbLeftPos < maskLeftPos || thumbRightPos > maskRightPos || lastThumbRightPos < maskRightPos);
        },

        getMaxSlide: function () {
            var that = this,
                lastThumb = that.thumbs.find('li:last');

            return lastThumb.position().left + lastThumb.outerWidth() - this.element.outerWidth();
        },

        moveThumbs: function (thumb, slide) {
            var that = this,
                slideDistance,
                thumbs = that.thumbs,
                maxSlide = that.getMaxSlide();

            if (slide) {
                thumbs.addClass('slide');
            } else {
                thumbs.removeClass('slide');
            }

            slideDistance = thumb.position().left;
            slideDistance = maxSlide > slideDistance ? slideDistance : maxSlide;
            slideDistance = slideDistance > 0 ? slideDistance : 0;
            //set left
            if(Modernizr.csstransforms) {
                thumbs.css({'transform': 'translateX(' + -slideDistance + 'px)'});
            }
            else{
                thumb.css({left: -slideDistance});
            }
        },


        repositionThumbs: function (thumb, slide) {
            var that = this, thumbsNeedToBeMoved = that.testThumbPosition(thumb);

            if (thumbsNeedToBeMoved) {
                that.moveThumbs(thumb, slide);
            }
        },

        selectThumb: function (thumb, stopReposition, firstThumb) {
            var that = this;
            if (thumb && thumb.length > 0) {
                if (that.current) {
                    that.current.removeClass(currentClass);
                }

                that.current = thumb.addClass(currentClass);

                //check to see if reposition should be stopped (used on page load as thumbnails haven't yet loaded)
                if (!stopReposition) {
                    that.repositionThumbs(thumb, true);
                }

                //if uitk exists than publish that an image has been selected
                if (uitk) {
                    uitk.publish('media.selected', thumb, that.sliderId, firstThumb);
                }
            }
        },

        prev: function () {
            var that = this, thumb = that.current.prev();

            if (thumb.length < 1) {
                thumb = that.thumbs.find('li:last');
            }

            that.selectThumb(thumb);
        },

        next: function () {
            var that = this, thumb = that.current.next();

            if (thumb.length < 1) {
                thumb = that.thumbs.find('li:first');
            }

            that.selectThumb(thumb);
        },

        resize: function () {
            var that = this, currentThumb = that.thumbs.find('.' + currentClass);

            that.repositionThumbs(currentThumb, false);
        }
    };


    /* JQUERY PLUGIN DEFINITION */
    uitk.utils.initPlugin(pluginName, MediaSlider);

    /* EVENT LISTENERS (delegated to body) */
    // if click event doesn't equal click then prevent the click event from firing
    // Note: this file was originally called image-slider, so there are still some reference to the original name 'image-slider'
    $body.on(clickEvent, '.image-slider-control', function (e) {
        var $target = $(e.target),
            $control = $target.closest('.image-slider-control'),
            $carousel = $control.closest('[data-control="media-viewer"]').siblings('[data-control="image-slider"]');

        e.preventDefault();

        if ($control.hasClass('next')) {
            $carousel[pluginName]('next');
        } else if ($control.hasClass('prev')) {
            $carousel[pluginName]('prev');
        }
    });

    /** HIDING the image slider and listeners (EGE-125577 Responsive updates to media gallery)
     $body.on(clickEvent, '[data-control="image-slider"] .image-slider-thumbs a', function (e) {
        var $target = $(e.target),
            $thumb = $target.closest('li'),
            $carousel = $target.closest('[data-control="image-slider"]');

        e.preventDefault();

        if (!$thumb.hasClass('current')) {
            $carousel[pluginName]('selectThumb', $thumb);
        }
    });

    $body.on('focus.' + pluginName, '[data-control="image-slider"] .image-slider-thumbs a', function (e) {
        var $target = $(e.target),
            $thumb = $target.closest('li'),
            $carousel = $target.closest('[data-control="image-slider"]');

        e.preventDefault();

        //slight timeout for IE so that click event has chance to fire before thumbs are moved
        setTimeout(function () {
            $carousel[pluginName]('repositionThumbs', $thumb, true);
        }, 100);
    }); **/

    //init on page load in order to select first image
    $('[data-control=image-slider]')[pluginName]();

    //expose object so it can be tested without DOM
    uitk.modules.MediaSlider = MediaSlider;

}(jQuery, window));
/*JSHint options*/
/*global define */

/*
 *  Project: UITK Content Slider Plugin
 *  Author: dstrugnell@expedia.com
 */

/*
 *  OPTIONS (passed via data-* attributes in the html)
 *
 */

// the semi-colon before function invocation is a safety net against concatenated
// scripts and/or other plugins which may not be closed properly.
;(function ( $, window, undefined ) {

    'use strict';

    // Create the defaults once
    var pluginName = 'uitk_contentSlider',
        $body = $('body'),
        $window = $(window),
        dataController = '[data-control="content-slider"]',
        controlButtons = '.prev, .next',
        defaults = {
            infinite: false,
            scrollTime: '0.5s'
        },
        clickEvent = uitk.clickEvent,
        isTouchDevice = uitk.isTouchDevice,
        hasTransitions = Modernizr.csstransitions,
        hasMediaqueries = Modernizr.mediaqueries;


    /* CONSTRUCTOR */
    function ContentSliderResp( element, jsOptions ) {
        uitk.utils.newModule.call(this, element, jsOptions, defaults);
    }

    ContentSliderResp.prototype = {

        constructor: ContentSliderResp,

        init: function(){

            var that = this,
                $elem = that.element;

            // cancel the init if the element is not visible
            if (!$elem.is(':visible')) return;

            that.contentMask = $elem.find('.content-slider-mask');
            that.tileGrid = $elem.find('.row');
            that.numVisibleTiles = that.getNumVisibleTiles();
            that.uniqueId = that.options.modalId || uitk.createUniqueId();

            $elem.attr('data-unique-id', that.uniqueId);

            // Set current page
            that.moveToPage(1, true);

            // if media queries are supported
            if (hasMediaqueries){

                // listen for window resize
                $window.on('resize.event'+that.uniqueId, function(){
                    that.handleResize();
                });

                $window.on('orientationchange.event'+that.uniqueId, function(){
                    that.handleResize();
                });
            }

            // Treating touch the same way as click
            // set up swipe (hasTouch doesn't include Windows 8 Touch hence the other parameter)
            if (Modernizr.touch || window.navigator.msPointerEnabled) {
                that.swipeCheck = true;

                var gestureHandling = new Hammer(that.contentMask[0]);

                gestureHandling.on('swipe pan', function(e){
                    var $slider = null,
                        distance = (-1) * e.deltaX,
                        direction = distance <  0 ? 'right': 'left',
                        touchType = e.srcEvent.type,
                        move = touchType === 'pointermove' || touchType === 'touchmove';

                    if (!$slider) {
                        $slider = $(e.target).closest('[data-control="content-slider"]');
                    }

                    if (e.type === 'swipe') {
                        that.swipeCheck = false;
                        $slider[pluginName]('slideEnd', direction, distance);
                    }

                    if (e.deltaTime > 150 && e.type === 'pan' && move) {
                        $slider[pluginName]('slideMove', distance);
                        return;
                    }

                    if (e.type === 'pan' && !move) {
                        if(!that.swipeCheck) {
                            that.swipeCheck = true;
                        } else {
                            $slider[pluginName]('slideEnd', direction, distance);
                        }
                    }
                });
            }

            // subscribe to debounced.resize if device is non-touch. This is to take in to account
            // of px being used for the positioning (isTouchDevice includes Windows 8 Touch)
            if(!isTouchDevice) {
                that.deboucedResize = uitk.subscribe('debounced.resize', function(){
                    that.positionPage(that.currentPage);
                });
            }
        },


        //METHODS
        updateControls: function(){
            var that = this,
                numOfPages = that.getNumOfPages(),
                currentPage = that.currentPage;

            if (numOfPages <= 1) {
                that.element.find(controlButtons).remove();
            } else {
                if (currentPage === 1 && !that.options.infinite) {
                    that.element.find('.prev').addClass('hidden');
                    that.element.find('.next').removeClass('hidden');
                } else if (currentPage === numOfPages && !that.options.infinite) {
                    that.element.find('.prev').removeClass('hidden');
                    that.element.find('.next').addClass('hidden');
                } else {
                    that.element.find(controlButtons).removeClass('hidden');
                }
            }
        },

        updateCurrentClasses: function(){
            var that = this,
                currentTileClass = 'current',
                currentPage = that.currentPage,
                numVisibleTiles = that.getNumVisibleTiles(),
                tiles = that.tileGrid.find('.col'),
                activeTiles;

            // remove all currentTile classes and set all tiles to aria-hidden=true
            tiles.removeClass(currentTileClass).attr('aria-hidden','true');
            tiles.find('a').attr('tabindex','-1');

            // get a handle on the new set of current tiles and set the currentTile class and aria-hidden=false
            activeTiles = tiles.slice(numVisibleTiles*(currentPage-1),numVisibleTiles*currentPage);
            activeTiles.addClass(currentTileClass).attr('aria-hidden','false');
            activeTiles.find('a').removeAttr('tabindex');

            //publishes page change
            //uitk.publish('contentSlider.pageChange', that.element, currentPage, viewChange);
        },

        unregister: function(){
            var that = this;

            $(window).off('.event'+that.uniqueId);

            // if debouced.resize has been subscribed to then unsubscribe
            if (that.deboucedResize){
                uitk.unsubscribe('debounced.resize', that.deboucedResize);
            }
        },

        getPagePosition: function(page){
            var pagePosition,
                domTileWidth;

            domTileWidth = this.tileGrid.find('.col').outerWidth();

            pagePosition = ( ((page-1) * this.getNumVisibleTiles()) * -domTileWidth ) + 'px';

            return pagePosition;
        },

        positionPage: function(page, stopAnimation){
            var that = this,
                pagePosition = that.getPagePosition(page),
                scrollTime = stopAnimation ? '0s' : that.options.scrollTime;

            that.tileGrid.css({
                '-webkit-transition-duration':scrollTime,
                'transition-duration':scrollTime
            });

            that.tileGrid.css({left:pagePosition});
        },


        // MOVE TO PAGES
        moveToPage: function(page, stopAnimation){
            var that = this;
            // if page is valid move to page
            if (page > 0 && page <= that.getNumOfPages()) {
                that.positionPage(page, stopAnimation);
                that.setCurrentPage(page);
                that.updateControls();
                that.updateCurrentClasses();
            }
        },

        next: function(){
            var that = this,
                currentPage = that.currentPage,
                nextPage = currentPage + 1;

            if (nextPage > that.getNumOfPages()) {
                if (that.options.infinite === true) {
                    that.moveToPage(1);
                }else{
                    that.moveToPage(currentPage);
                }
            } else {
                that.moveToPage(nextPage);
            }
            that.setPageFocus();
        },

        prev: function(){
            var that = this,
                currentPage = that.currentPage,
                prevPage = currentPage - 1;

            if (prevPage < 1) {
                if (that.options.infinite === true) {
                    that.moveToPage(that.getNumOfPages());
                }else{
                    that.moveToPage(currentPage);
                }
            } else {
                that.moveToPage(prevPage);
            }
            that.setPageFocus();
        },

        // SETTERS
        setPageFocus: function() {
            var that = this,
                firstTile = that.element.find('.current:first');

            if (hasTransitions) {
                that.element.one(uitk.topics.transitionEnd, function(){
                    firstTile.attr('tabindex','-1').focus().css('outline','none');
                });
            } else {
                firstTile.attr('tabindex','-1').focus().css('outline','none');
            }
        },

        setCurrentPage: function(page){
            var that = this;

            that.currentPage = page;

            // adds the page number to the DOM to make it easier to automate testing
            that.element.attr('data-current-page', page);
        },


        // GETTERS
        getNumVisibleTiles: function(){
            var mask = this.contentMask,
                tiles = mask.find('.col'),
                maskWidth = mask.width(),
                tileWidth = tiles.first().outerWidth(),
                numOfVisibleTiles = Math.round(maskWidth/tileWidth);

            return numOfVisibleTiles;
        },

        getNumOfPages: function(){

            var that = this,
                tileGrid = that.tileGrid,
                tiles = tileGrid.find('.col'),
                numOfTiles = tiles.length,

                numOfPages = Math.ceil(numOfTiles/that.numVisibleTiles);

            return numOfPages;
        },

        getNewCurrentPage: function(numVisibleTiles, oldNumVisibleTiles){
            var that = this,
                newCurrentPage,
                currentPage = that.currentPage,
                numOfPages = that.getNumOfPages(),

            // Work out first visible tile
                firstVisibleTile = oldNumVisibleTiles*(currentPage-1)+ 1,
                lastVisibleTile = oldNumVisibleTiles*currentPage;

            // Work out what the new current page should be
            // If old number of tiles < new number of tile use last tile in current page
            // Else if old number of tiles > new number of tiles use first tile in current page
            if (oldNumVisibleTiles < numVisibleTiles){
                newCurrentPage = Math.ceil(lastVisibleTile/numVisibleTiles);
            }else if(oldNumVisibleTiles > numVisibleTiles){
                newCurrentPage = Math.ceil(firstVisibleTile/numVisibleTiles);
            }else{
                newCurrentPage = currentPage;
            }

            // make sure new current page isn't bigger than numOfPages
            newCurrentPage = newCurrentPage > numOfPages ? numOfPages : newCurrentPage;

            return newCurrentPage;
        },


        //HANDLERS
        handleViewChange: function(numVisibleTiles){
            var that = this;
            //check to see if content-slider is still valid / still in the DOM
            if (that.uniqueId !== that.element.attr('data-unique-id') || $('[data-unique-id="'+that.uniqueId+'"]').length === 0){
                that.unregister();
                return;
            }

            var currentPage,
                oldNumVisibleTiles = that.numVisibleTiles,
                newCurrentPage;


            // add class so we know the view is being changed
            that.tileGrid.addClass('view-change');

            that.numVisibleTiles = numVisibleTiles;

            currentPage = that.currentPage;

            newCurrentPage = that.getNewCurrentPage(numVisibleTiles, oldNumVisibleTiles);

            if (currentPage !== newCurrentPage){
                setTimeout(function(){
                    that.moveToPage(newCurrentPage, true);
                },10);
            }

            // remove class once view has changed
            setTimeout(function(){
                that.tileGrid.removeClass('view-change');
            }, 50);
        },

        handleResize: function(){

            var that = this,
                numVisibleTiles = that.getNumVisibleTiles();

            // check for change in number of visible tiles
            if (that.numVisibleTiles !== numVisibleTiles){
                that.handleViewChange(numVisibleTiles);
            }
        },


        // Touch Sliding
        slideMove: function(distance) {
            var that = this,
                pagePos = parseInt(that.getPagePosition(that.currentPage), 10),
                leftPos;

            leftPos = pagePos + (distance * -1);
            that.scrollPages(leftPos);
        },

        slideEnd: function(direction, distance){

            var that = this,
                relationalDistance = Math.abs(distance/that.contentMask.width());

            if (relationalDistance > 0.08){
                if (direction === 'left') {
                    that.next();
                } else {
                    that.prev();
                }
            }else{
                that.moveToPage(that.currentPage);
            }
        },

        scrollPages: function(leftPos) {
            var that = this;

            that.tileGrid.css({
                '-webkit-transition-duration':'0.1s',
                'transition-duration':'0.1s',
                'left': leftPos+'px'
            });
        }
    };

    /* JQUERY PLUGIN DEFINITION */
    uitk.utils.initPlugin(pluginName, ContentSliderResp);

    // Init content sliders on page load
    $('[data-control=content-slider]')[pluginName]();

    /* EVENT LISTENERS (delegated to body) */

    $body.on(clickEvent + '.' + pluginName, dataController + ' ' + controlButtons, function(e){
        var $target = $(e.target),
            $control = $target.closest(controlButtons),
            $slider = $target.closest(dataController);

        e.preventDefault();

        if($control.hasClass('next')){
            $slider[pluginName]('next');
        }else if($control.hasClass('prev')){
            $slider[pluginName]('prev');
        }
    });

    if (isTouchDevice) {
        //prevent click on touch devices
        $body.on('click.'+pluginName, dataController + ' ' + controlButtons, function(e){
            e.preventDefault();
        });
    }

    uitk.modules.ContentSlider = ContentSliderResp;

}(jQuery, window));
var exp = exp || {};
exp.core = exp.core || {};
exp.core.date = exp.core.date || {};

exp.core.date.Calendar = function (_config) {
    var Calendar = {
        config: _config,
        rM: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],
        getDateFormat: function () {
            return this.config.getDateFormat();
        },
        getDateSeparator: function () {
            return this.config.getDateSeparator();
        },
        getStartOfWeek: function () {
            return this.config.getStartOfWeek();
        },
        getDateFromString: function (dateString) {
            var m, d, y, dateParts;
            var format = this.getDateFormat();

            if (!dateString || !dateString.length) return null;
            dateString = dateString.replace(/\s+/g, "");
            if (dateString.match(/[^-|\d|\.|\/]/)) return null;

            dateParts = dateString.split(/-|\.|\//);

            for (var i = 0; i < dateParts.length; i++) {
                dateParts[i] = parseInt(dateParts[i], 10);
            }

            if (!dateParts[1]) return null;

            if (format == "yymmdd" || dateParts[0] > 2000) {
                if (!dateParts[2]) return null;
                m = dateParts[1];
                d = dateParts[2];
                y = dateParts[0];
            }
            else {
                if (format == "mmddyy") {
                    m = dateParts[0];
                    d = dateParts[1];
                }
                // fmt == "ddmmyy"
                else {
                    m = dateParts[1];
                    d = dateParts[0];
                }

                if (dateParts[2]) {
                    y = dateParts[2];
                }
                else {
                    y = this.DefYr(m - 1, d);
                }
            }

            m -= 1;
            if (y.toString().length === 2)y += 2000;
            if (y < 1601 || y > 4500 || m < 0 || m > 11 || d < 1 || d > this.getMonthCount(m, y))return null;
            return new Date(y, m, d);
        },
        getIsoDateTimeString: function (date) {

            // Check date
            if (!(date instanceof Date)) {
                date = new Date(date);
            }

            // IE8 et al
            if (!Date.prototype.toISOString) {
                var result = "";

                function pad(number) {
                    var r = String(number);
                    if (r.length === 1) {
                        r = '0' + r;
                    }
                    return r;
                }

                result = date.getUTCFullYear()
                    + '-' + pad(date.getUTCMonth() + 1)
                    + '-' + pad(date.getUTCDate())
                    + 'T' + pad(date.getUTCHours())
                    + ':' + pad(date.getUTCMinutes())
                    + ':' + pad(date.getUTCSeconds())
                    + '.' + String((date.getUTCMilliseconds() / 1000).toFixed(3)).slice(2, 5)
                    + 'Z';

                return result;
            }
            // ECMAScript 5
            else {
                //return date.toISOString(); // ISOString() function does not factor in the timezone difference.
                var tzoffest = date.getTimezoneOffset() * 60000,
                    localISOTime = (new Date(date - tzoffest)).toISOString();
                return localISOTime;
            }
        },

        getIsoDateString: function (date) {
            if (!date) return null;
            date = this.getIsoDateTimeString(date);
            return date.substr(0, 10);
        },

        toStringFromComp: function (d, m, y) {
            function pad(s) {
                return s < 10 ? '0' + s : s;
            }

            var out = "";
            var ds = this.getDateSeparator();
            var fmt = this.getDateFormat();
            d = pad(d);
            m = pad(m);
            if (fmt == "mmddyy")out = m + ds + d + ds + y;
            else if (fmt == "ddmmyy")out = d + ds + m + ds + y;
            else out = y + ds + m + ds + d;
            return out;
        },
        IsLY: function (y) {
            if (0 == y % 4 && ((y % 100 != 0) || (y % 400 == 0)))
                return true;
            else
                return false;
        },
        DefYr: function (m, d) {
            var dt = new Date();
            var yC = (dt.getYear() < 1000) ? 1900 + dt.getYear() : dt.getYear();
            if (m < dt.getMonth() || (m == dt.getMonth() && d < dt.getDate()))yC++;
            return yC;
        },
        getMonthCount: function (m, y) {
            var c = this.rM[m];
            if ((1 == m) && this.IsLY(y))c++;
            return c;
        }
    };

    return Calendar;
};


exp.core.date.CalendarControl = function () {
    var date = function () {
        var formats = {
            mdy: 'mmddyy',
            dmy: 'ddmmyy',
            ymd: 'yymmdd'
        };
        var m_fmt = formats.mdy;
        var m_sep = '/';
        var m_sow = 0; //Start Of Week
        var m_months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
        var m_singleMonths = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC'];
        var m_dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
        var m_dayAbbrs = ['S', 'M', 'T', 'W', 'T', 'F', 'S'];
        var m_closeText = 'Close';
        var m_locale = '';
        var m_nightText = ['night', 'nights'];

        var setNightTextConfig = function (nightText) {
            m_nightText = nightText;
        };

        var setFormatConfig = function (fmt, sep) {
            m_fmt = fmt;
            m_sep = sep;
        };

        var setUnitConfig = function (sow, months, dayAbbrs, dayNames) {
            m_sow = sow;

            // i18n.js lib expects month array to start like [0, "Jan", "Feb",...], so we do this:
            var tmp_months = months.slice(); // Copy of the passed-in list of months, so the original is not altered by the following if statement
            if (tmp_months[0] === 0) {
                tmp_months.shift();
            }
            m_months = tmp_months;
            m_dayAbbrs = dayAbbrs;

            if (dayNames != undefined) {
                m_dayNames = dayNames;
            }
        };

        var setSingleUnitConfig = function (sow, months, dayAbbrs) {
            m_sow = sow;
            m_singleMonths = months;
            m_dayAbbrs = dayAbbrs;
        };

        var setTextConfig = function (closeText) {
            m_closeText = closeText;
        };

        var setLocaleConfig = function (locale) {
            m_locale = locale;
        };

        return {
            formats: formats,
            setFormatConfig: setFormatConfig,
            setUnitConfig: setUnitConfig,
            setSingleUnitConfig: setSingleUnitConfig,
            setTextConfig: setTextConfig,
            setLocaleConfig: setLocaleConfig,
            setNightTextConfig: setNightTextConfig,
            getDateFormat: function () {
                return m_fmt;
            },
            getDateSeparator: function () {
                return m_sep;
            },
            getStartOfWeek: function () {
                return m_sow;
            },
            getMonths: function () {
                return m_months;
            },
            getDayAbbrs: function () {
                return m_dayAbbrs;
            }
        };
    };

    return {Config: new date('ddmmyy', '.', 2)};
}();

; // Safety net against concatenated scripts
(function ($, window, undefined) {

    "use strict";

    // Create the defaults once
    var pluginName = "uitk_calendar",
        tooltipPlugin = "uitk_tooltip",
        $delegate = $(document),
        defaults = {
            tooltip: true,
            template: "partials/uitk/uitk-calendar-template",
            dayTemplate: "partials/uitk/calendar-day",
            minBookingLength: null
        },
        theme = {},
        dateStyle = "short",
        hasTouch = Modernizr.touch,
        hasWin8Touch = Modernizr.win8touch,
        clickEvent = uitk.clickEvent + "." + pluginName,
        openCalendar,
        todaysDate = new Date(),
        initCalendarInputs,
        backspaceKeyCode = 8;

    todaysDate.setHours(0, 0, 0, 0);

    initCalendarInputs = (function () {
        if (hasTouch || hasWin8Touch) {
            // For touch devices, return a function that sets calendar inputs to read only to
            // prevent the on-screen keyboard from appearing
            // Needs to be run before an input is clicked
            return function () {
                $("[data-control='calendar']").attr("readonly", "readonly");
            };
        } else {
            // For non-touch devices return a blank function
            return function () {
            };
        }
    })();

    //attach initCalendarInput to the uitk object
    uitk.initCalendarInputs = initCalendarInputs;


    /* CONSTRUCTOR */
    function Calendar(element, jsOptions) {
        uitk.utils.newModule.call(this, element, jsOptions, defaults);
    }


    Calendar.prototype = {

        constructor: Calendar,
        monthCache: {},
        calendarObj: false,
        calendarConfig: false,
        daysHeader: false,
        END: "end",
        START: "start",

        init: function () {
            var that = this;

            this.dateError = {};

            // Store calendarObj on the prototype
            if (!this.calendarObj) {
                Calendar.prototype.calendarObj = uitk.calendarObj;
                Calendar.prototype.calendarConfig = uitk.calendarObj.config;
            }

            this.startDay = uitk.calendarObj.getStartOfWeek();

            // Setup calendar template
            if (!this.calTemplate) {
                Calendar.prototype.calTemplate = uitk.getCompiledTemplate(this.options.template);
                Calendar.prototype.dayTemplate = uitk.getCompiledTemplate(this.options.dayTemplate);
            }

            // Render days header
            if (!this.daysHeader) {
                Calendar.prototype.daysHeader = this.getDaysHtml();
            }

            // Set up for date range
            if (this.options.startDate || this.options.endDate) {

                this.dateRange = this.options.dateRange;

                if (this.options.startDate) {
                    this.startDateSelector = this.options.startDate;
                    this.startDateField = this.calendarPair = $(this.startDateSelector);
                } else {
                    this.startDateSelector = "#" + this.element.attr("id");
                    this.startDateField = this.element;
                    this.dateType = this.START;
                }

                if (this.options.endDate) {
                    this.endDateSelector = this.options.endDate;
                    this.endDateField = this.calendarPair = $(this.endDateSelector);
                } else {
                    this.endDateSelector = "#" + this.element.attr("id");
                    this.endDateField = this.element;
                    this.dateType = this.END;
                }

                // Set default stay length
                this.options.defaultBookingLength = this.startDateField.data("default-booking-length");
                this.options.maxBookingLength = this.startDateField.data("max-booking-length");

                if (!this.options.lastValidDate) {
                    this.options.lastValidDate = this.startDateField.data("last-valid-date");
                }

            }
            // Set up for Single date (includes inline Calendar)
            else {
                this.calendarPair = false;
                this.startDateField = this.element;
                this.dateType = this.START;
                this.startDate = this.options.value ? this.calendarObj.getDateFromString(this.options.value) : null;
            }

            // firstValidDate
            if (this.options.firstValidDate) {
                this.options.firstValidDate = this.calendarObj.getDateFromString(this.options.firstValidDate);
            }
            else {
                this.options.firstValidDate = todaysDate;
                if (this.options.annual) {
                    this.options.annualWithNoFirstValidDate = true;
                }
            }

            // lastValidDate
            this.options.lastValidDate = this.calendarObj.getDateFromString(this.options.lastValidDate);

            // If using Tooltip subscribe to Tooltip hidden event
            if (this.options.tooltip) {
                var token;
                token = uitk.subscribe("tooltip.hidden", function (topic, elem) {
                    that.tooltipClosed(elem);
                });
            }

            // Binding clear input user events
            this.element
                .on('keydown', $.proxy(this.keyDown, this))
                .on('keyup', $.proxy(this.keyUp, this));
        },

        getDaysHtml: function (dayNames, startDay) {

            var generatedHtml = "",
                numOfDays,
                day,
                i;

            dayNames = dayNames || this.calendarConfig.getDayAbbrs();
            startDay = startDay || this.startDay;
            numOfDays = dayNames.length;

            for (i = 0; i < numOfDays; i = i + 1) {
                day = i + startDay;

                if (day >= numOfDays) {
                    day = day - numOfDays;
                }
                generatedHtml += "<li>" + dayNames[day] + "</li>";
            }

            return generatedHtml;
        },

        // Gets the year and month for the next month
        getNextMonth: function (month, year) {
            var nextMonthNum,
                nextYear;

            if (month === this.calendarConfig.getMonths().length - 1) { // If month is Dec...
                nextMonthNum = 0; // then next month is Jan, i.e. start months over, ...
                nextYear = year + 1; // and bump the year.
            } else {
                nextMonthNum = month + 1; // Otherwise bump to the next index/month...
                nextYear = year; // and the year stays the same.
            }

            return {month: nextMonthNum, year: nextYear};
        },

        // Gets the year and month for the prev month
        getPrevMonth: function (month, year) {
            var prevMonthNum,
                prevYear;

            if (month === 0) {
                prevMonthNum = this.calendarConfig.getMonths().length - 1;
                prevYear = year - 1;
            } else {
                prevMonthNum = month - 1;
                prevYear = year;
            }

            return {month: prevMonthNum, year: prevYear};
        },


        // Work out blank days at start of month
        getFirstDayOffset: function (firstDay, startDay) {
            var firstDayOffset;

            startDay = startDay || this.startDay;

            firstDayOffset = firstDay - startDay;

            if (firstDayOffset < 0) {
                firstDayOffset = 7 + firstDayOffset;
            }

            return firstDayOffset;
        },


        // Generate month
        getMonthHtml: function (month, year) {
            var i,
                monthNumOfDays,
                firstDay,
                firstDayOffset;
            var cacheKey = month + "-" + year;
            var html = "";

            // If month has already been generated get it form cache
            if (cacheKey in this.monthCache) {
                return this.monthCache[cacheKey];
            }

            // Work out blank days
            firstDay = new Date(year, month, 1).getDay();
            firstDayOffset = this.getFirstDayOffset(firstDay);

            // Generate html
            monthNumOfDays = this.calendarObj.getMonthCount(month, year);
            for (i = 1; i <= monthNumOfDays; i = i + 1) {
                if (i === 1 && firstDayOffset > 0) {
                    html += this.dayTemplate({
                        firstDayOffset: firstDayOffset,
                        day: i,
                        month: month,
                        year: year
                    });
                }
                else {
                    html += this.dayTemplate({
                        day: i,
                        month: month,
                        year: year
                    });
                }
            }

            // Store result in cache
            this.monthCache[cacheKey] = html;

            return html;
        },


        // Generate cal
        getCalHtml: function (month, year) {
            var generatedHtml = "",
                nextMonth,
                nextMonthNum,
                nextYear,
                newYear,
                calData,
                hasPrevButton = false,
                prevClasses = "btn-text btn-med prev icon icon-pageprev",
                lastDate,
                translatedPrevMonth = I18n.t("uitk_calendar_prev_month"),
                translatedNextMonth = I18n.t("uitk_calendar_next_month"),
                options = this.options;


            this.firstMonth = month;
            this.firstYear = year;

            nextMonth = this.getNextMonth(month, year);
            nextMonthNum = nextMonth.month;
            nextYear = nextMonth.year;
            newYear = nextMonthNum === 0 ? "new-year" : "";

            // GENERATE CALENDAR
            calData = {
                prevButton: {},
                nextButton: {},
                calDays: this.daysHeader,
                month1: this.calendarConfig.getMonths()[month],
                year1: year,
                calDates1: this.getMonthHtml(month, year),
                month2: this.calendarConfig.getMonths()[nextMonthNum],
                year2: nextYear,
                calDates2: this.getMonthHtml(nextMonthNum, nextYear),
                annual: options.annual,
                dateRange: this.calendarPair,
                newYear: newYear
            };

            // Add Time Picker
//            if (this.options.timePickerId) {
//                calData.timepicker = true;
//                $.extend(calData, uitk.calendarObj.timepickers[this.options.timePickerId]);
//            }

            generatedHtml = this.calTemplate(calData);

            this.currentCal = $(generatedHtml).data("calendar", this.element);
            this.currentMonth = month;
            this.currentYear = year;

            this.highlight(this.currentCal);

            // Disable past dates:
            // If NOT an Annual cal. Or if it is an Annual cal and a firstValidDate has been given. AND...
            // If the start date has been set or if the date about to be selected is the start date.
            if (!options.annualWithNoFirstValidDate && (!this.startDate || this.dateType === this.START)) {
                this.disableDatesBefore(this.currentCal, options.firstValidDate);
            }
            else if (this.dateType === this.END) {
                this.disableDatesBefore(this.currentCal, this.startDate);

                // -1 means maxBookingLength is turned off
                if (options.maxBookingLength !== -1) {
                    lastDate = new Date(this.startDate.getTime() + (24 * 60 * 60 * 1000 * parseInt(options.maxBookingLength, 10)));
                    this.disableDatesAfter(this.currentCal, lastDate);
                }
            }

            if (options.lastValidDate) {
                this.disableDatesAfter(this.currentCal, options.lastValidDate);
            }

            var todaysDateLink = this.getDateLink(this.currentCal, todaysDate);
            if (todaysDateLink) {
                todaysDateLink.addClass("today");
            }

            return this.currentCal;
        },

        nextYear: function () {
            var nextMonthNum;
            var nextMonth = this.getNextMonth(this.currentMonth, this.currentYear);
            // Forces the current two months to stay within view
            if (nextMonth.month === 0) {
                nextMonthNum = 11;
            }
            else {
                nextMonthNum = nextMonth.month - 1;
            }

            this.calContainer.html(this.getCalHtml(nextMonthNum, this.currentYear + 1).html());
        },

        prevYear: function () {
            var prevMonthNum;
            var prevMonth = this.getPrevMonth(this.currentMonth, this.currentYear);
            // Forces the current two months to stay within view
            if (prevMonth.month === 11) {
                prevMonthNum = 0;
            }
            else {
                prevMonthNum = prevMonth.month + 1;
            }

            this.calContainer.html(this.getCalHtml(prevMonthNum, this.currentYear - 1).html());
        },

        nextMonth: function ($target) {
            var nextMonth;

            if ($target.hasClass("last-month")) {
                this.calContainer.addClass("show-second-month");

                // Allow small screen device to display one additional month.
                if(window && 'matchMedia' in window && window.matchMedia("screen and (min-width: 0px) and (max-width: 540px").matches) {
                    nextMonth = this.getNextMonth(this.currentMonth, this.currentYear);
                    this.calContainer.html(this.getCalHtml(nextMonth.month, nextMonth.year).html());
                }
            } else {
                nextMonth = this.getNextMonth(this.currentMonth, this.currentYear);
                this.calContainer.html(this.getCalHtml(nextMonth.month, nextMonth.year).html());
            }
        },

        prevMonth: function () {
            var prevMonth;
            var calContainer = this.calContainer;

            prevMonth = this.getPrevMonth(this.currentMonth, this.currentYear);
            calContainer.html(this.getCalHtml(prevMonth.month, prevMonth.year).html());

            if(calContainer.hasClass("show-second-month")) {
                calContainer.removeClass("show-second-month");
            }
        },

        getDateFromField: function (field, forceDate) {
            var fieldDate;
            var error = field[pluginName]("getDateError");

            if (error && error.flagged) {
                if (error.replacementDate && (error.highlight || forceDate)) {
                    fieldDate = this.calendarObj.getDateFromString(error.replacementDate);
                } else {
                    fieldDate = false;
                }
            } else {
                fieldDate = this.calendarObj.getDateFromString(field.val());
            }

            return fieldDate;
        },

        getStartDate: function (startDate) {
            startDate = startDate || this.getDateFromField(this.startDateField);
            if (!startDate) {
                this.startDate = null;
                return todaysDate;
            } else {
                this.startDate = startDate;
                return startDate;
            }
        },

        getInitialCal: function () {
            if (this.state !== "open") {
                var that = this,
                    secondMonthElem,
                    currentCal,
                    firstDate = that.options.firstValidDate,
                    firstMonth = firstDate.getMonth(),
                    firstYear = firstDate.getFullYear(),
                    startDate,
                    endDate,
                    inputDate;

                this.state = "open";

                // GET DATES
                // Get date from start date input
                startDate = this.getStartDate();

                // Get end date from end date input (if there is one)
                if (this.endDateField) {
                    endDate = this.getDateFromField(this.endDateField);
                    this.setThisEndDate(startDate, endDate);
                }

                // If start and end dates aren't both in error
                if (this.startDate || this.endDate) {
                    // Store this date
                    if (this.dateType === this.END) {
                        inputDate = this.getDateFromField(this.endDateField, true) || endDate;
                    } else {
                        //inputDate = this.getDateFromField(this.startDateField, true) || startDate;
                        inputDate = startDate;
                    }

                    // WORK OUT WHICH MONTHS TO SHOW
                    // Use last displayed set of dates if set
                    if ((this.lastDisplayedMonth || this.lastDisplayedMonth === 0) && this.lastDisplayedYear) {
                        firstMonth = this.lastDisplayedMonth;
                        firstYear = this.lastDisplayedYear;
                    }

                    // Does the inputted date show up in these months
                    // Only needs testing if error on field hasn't been flagged
                    if (inputDate && (!this.dateError.flagged || (this.dateError.flagged && this.dateError.replacementDate))) {
                        var dateType = this.dateType,
                            inputMonth = inputDate.getMonth(),
                            inputYear = inputDate.getFullYear(),
                            getSecondMonth = this.getNextMonth(firstMonth, firstYear),
                            secondMonth = getSecondMonth.month,
                            secondYear = getSecondMonth.year,
                            inputPrevMonth;

                        //check if date is not in range
                        if (!(inputMonth >= firstMonth && inputYear >= firstYear && inputMonth <= secondMonth && inputYear <= secondYear)) {
                            if (dateType === this.START) {
                                firstMonth = inputMonth;
                                firstYear = inputYear;
                            } else if (dateType === this.END) {
                                inputPrevMonth = this.getPrevMonth(inputMonth, inputYear);
                                firstMonth = inputPrevMonth.month;
                                firstYear = inputPrevMonth.year;
                            }
                        }
                    }
                }

                this.setLastDisplayed({month: firstMonth, year: firstYear});
                this.getCalHtml(firstMonth, firstYear);

                // Set initial Inline Calendar date
                if (this.options.inline && this.options.value) {
                    this.getDateLink(this.currentCal, this.calendarObj.getDateFromString(this.options.value)).addClass("start");
                }

                currentCal = that.currentCal;

                // Add show-second-month class if required
                secondMonthElem = currentCal.find(".cal-section").eq(1);
                if (secondMonthElem.find(".start").length > 0 || (this.dateType === this.END && secondMonthElem.find(".end").length > 0)) {
                    currentCal.addClass("show-second-month");
                }

                return currentCal;
            }
        },

        getDateLink: function (cal, date) {
            return cal.find("a[data-day=" + date.getDate() + "][data-month=" + date.getMonth() + "][data-year=" + date.getFullYear() + "]");
        },

        highlight: function (cal) {
            var start = this.highlightStart(cal),
                end = this.highlightEnd(cal);

            this.highlightRange(cal, start, end);
        },

        highlightStart: function (cal) {
            var startDate = this.getDateFromField(this.startDateField);

            if (startDate) {
                var dateLink = this.getDateLink(cal, startDate);
                return dateLink.addClass("start");
            }
        },

        highlightEnd: function (cal) {
            if (this.endDateField) {
                var endDate = this.getDateFromField(this.endDateField);

                if (endDate) {
                    var dateLink = this.getDateLink(cal, endDate);
                    return dateLink.addClass("end");
                }
            }
        },

        highlightRange: function (cal, start, end) {
            var allDates = cal.find(".cal-dates a"),
                startIndex = allDates.index(start),
                endIndex = allDates.index(end)+1,
                startDate = this.startDate,
                startDateYear,
                endDate = this.endDate,
                endDateYear,
                currentMonth = this.currentMonth,
                currentYear = this.currentYear,
                startPos,
                endPos,
                WITHIN_VIEW = 0,//  x is within the viewable calendar:  |.x.|...|
                BEFORE_VIEW = -1,//  x is before view:  x |...|...|
                AFTER_VIEW = 1;//  x is after view:  |...|...| x

            allDates.removeClass("highlight");

            if (startIndex >= endIndex) {
                allDates.filter(".end").removeClass("end");
            }

            //is the selected START date within view or too far before or after what's visible
            if (start && startIndex > 0) {
                startPos = WITHIN_VIEW;
            } else if (startDate) {

                startDateYear = startDate.getFullYear();
                if ((startDate.getMonth() < currentMonth && startDateYear === currentYear) || startDateYear < currentYear) {
                    startPos = BEFORE_VIEW;
                } else {
                    startPos = AFTER_VIEW;
                }
            } else {
                return;
            }

            // Is the selected END date within view or is it too far before or after what's visible?
            if (end && endIndex >= 0) {
                endPos = WITHIN_VIEW;
            } else if (endDate) {
                endDateYear = endDate.getFullYear();
                if ((endDate.getMonth() < currentMonth && endDateYear === currentYear) || endDateYear < currentYear) {
                    endPos = BEFORE_VIEW;
                } else {
                    endPos = AFTER_VIEW;
                }
            } else {
                return;
            }

            //START and END dates have been selected
            //if the selected range is not visible, don't bother highlighting
            if ((startPos < WITHIN_VIEW && endPos < WITHIN_VIEW) || (startPos > WITHIN_VIEW && endPos > WITHIN_VIEW)) {
                return;
            }

            //ONLY START date is selected
            //start date is before view, so highlight from there up to mouse, otherwise don't bother because you can't select an end date
            if (startPos < WITHIN_VIEW) {
                startIndex = 0;
            }
            else if (startPos > WITHIN_VIEW) {
                return;
            }

            //ONLY END date is selected
            //end date is after view, so highlight from there back to mouse, otherwise don't bother because you can't select a start date
            if (endPos > WITHIN_VIEW) {
                endIndex = allDates.length;
            }
            else if (endPos < WITHIN_VIEW) {
                return;
            }

            //highlight all days within the selected range
            allDates.slice(startIndex, endIndex).addClass("highlight");
        },

        tooltipClosed: function (elem) {
            if (elem[0] === this.element[0]) {
                elem.closest("label").removeClass("focused");
                this.state = "closed";
            }
        },

        //disable
        disableDatesBefore: function (cal, date) {
            var allDates = cal.find(".cal-dates a"),
                dateLink = this.getDateLink(cal, date),
                dateIndex;

            if (dateLink.length > 0) {
                dateIndex = allDates.index(dateLink);

                if (dateIndex > 0) {
                    allDates.slice(0, dateIndex).addClass("disabled");
                    cal.find("button.prev").addClass("first-month");
                    cal.find("button.prev-year").addClass("first-year");
                }
            }
        },

        disableDatesAfter: function (cal, date) {
            var allDates = cal.find(".cal-dates a"),
                allDatesLength = allDates.length,
                dateLink = this.getDateLink(cal, date),
                dateIndex,
                firstDate,
                firstDateYear,
                firstDateMonth,
                dateYear;

            if (dateLink.length > 0) {
                dateIndex = allDates.index(dateLink);

                if (dateIndex + 1 < allDatesLength) {
                    allDates.slice(dateIndex + 1).addClass("disabled");
                    cal.find("button.next").addClass("last-month");
                    cal.find("button.next-year").addClass("last-year");
                }
            } else {
                firstDate = allDates.first();
                firstDateYear = firstDate.data("year");
                firstDateMonth = firstDate.data("month");
                dateYear = date.getFullYear();

                if (firstDateYear > dateYear || ((firstDateMonth > date.getMonth()) && (firstDateYear === dateYear))) {
                    allDates.addClass("disabled");
                    cal.find("button.next").addClass("last-month");
                }
            }
        },

        selectDate: function ($target) {
            var data, isoDateString, displayDate;
            var that = this;
            var selectedDate = new Date($target.data("year"), $target.data("month"), $target.data("day"));

            this.calContainer.find('.selected').removeClass('selected');
            $target.addClass('selected');

            this.setLastDisplayed();
            this.clearDateError();

            // Determine which to update
            if (this.calendarPair) {
                if (this.dateType === this.START) {
                    this.setStartDate(selectedDate);
                }
                else if (this.dateType === this.END) {
                    this.setEndDate(selectedDate);
                }
            } else {
                displayDate = uitk.i18n.date(selectedDate, {style: dateStyle}); //this.calendarObj.toStringFromComp(selectedDate.getDate(), selectedDate.getMonth() + 1, selectedDate.getFullYear());
                isoDateString = this.calendarObj.getIsoDateString(selectedDate);
                this.element.data("isoDate", isoDateString);
                this.element.val(displayDate);

                data = {};
                data.element = this.element;
                data.date = selectedDate;
                data.isoDate = isoDateString;
                uitk.publish("calendar.selectDate", data);
            }

            // Automatically open the end date if this is the first time setting the start date
            if (this.dateRange && this.dateType === this.START && !this.endDate) {
                this.setDefaultEndDate(selectedDate);
                $(this.endDateSelector).focus();
            }
            else {
                $target.closest(".cal").data("calendar")[tooltipPlugin]("hide");
            }

            // Updates placeholder class as polyfill relies on typing
            setTimeout(function () {
                uitk.updatePlaceholderClass(that.startDateField);
                if (that.endDateField) {
                    uitk.updatePlaceholderClass(that.endDateField);
                }
            }, 50);
        },

        setEndDate: function (date, defaultBookingLength) {
            var displayDate, isoDateString, finalDate, startDateIso;
            var data = {};
            var $start = $(this.startDateSelector);
            var $end = $(this.endDateSelector);
            var startDate = this.calendarObj.getDateFromString($start.val());
            var endDate = date || this.calendarObj.getDateFromString($end.val());
            var minOffsetDate = startDate ? new Date(startDate.valueOf() + 1000 * 3600 * 24 * (this.options.minBookingLength)) : date;

            if (endDate >= minOffsetDate) {
                finalDate = endDate;
            }
            else if (endDate < minOffsetDate) {
                finalDate = minOffsetDate;
                data.endDateAutoAdjusted = true;
            }

            displayDate = uitk.i18n.date(finalDate, {style: dateStyle}); //this.calendarObj.toStringFromComp(finalDate.getDate(), finalDate.getMonth() + 1, finalDate.getFullYear());
            isoDateString = this.calendarObj.getIsoDateString(finalDate);
            startDateIso = this.calendarObj.getIsoDateString(startDate);

            $end.data("isoDate", isoDateString);
            $end.val(displayDate);

            data.element = $end;
            data.end = true;
            data.startDate = startDate;
            data.startDateIso = startDateIso;
            data.endDate = finalDate;
            data.endDateIso = isoDateString;
            defaultBookingLength ? data.defaultBookingLengthSelected = true : data.defaultBookingLengthSelected = false;
            uitk.publish("calendar.selectDate", data);
        },

        setStartDate: function (date) {
            var endDisplayDate;
            var $start = $(this.startDateSelector);
            var $end = $(this.endDateSelector);
            var endDate = this.calendarObj.getDateFromString($end.val());
            var displayDate = uitk.i18n.date(date, {style: dateStyle}); //this.calendarObj.toStringFromComp(date.getDate(), date.getMonth() + 1, date.getFullYear());
            var endDateIso = this.calendarObj.getIsoDateString(endDate);
            var isoDateString = this.calendarObj.getIsoDateString(date);
            var minOffsetDate = new Date(date.valueOf() + 1000 * 3600 * 24 * this.options.minBookingLength);
            var data = {};
            var diffDays = endDate ? Math.round(Math.abs((date.getTime() - endDate.getTime()) / (86400000))) : null; // 86400000 is 24 hours
            var endDateIsLessThanMinOffsetDate = endDate && endDate < minOffsetDate ? true : false;
            var diffDaysIsGreaterThanMaxBookingLength = diffDays > this.options.maxBookingLength;

            $start.data("isoDate", isoDateString);
            $start.val(displayDate);

            if (endDateIsLessThanMinOffsetDate || diffDaysIsGreaterThanMaxBookingLength) {
                endDate = minOffsetDate;
                endDisplayDate = uitk.i18n.date(endDate, {style: dateStyle}); //this.calendarObj.toStringFromComp(endDate.getDate(), endDate.getMonth() + 1, endDate.getFullYear());
                endDateIso = this.calendarObj.getIsoDateString(endDate);
                $end.data("isoDate", endDateIso);
                $end.val(endDisplayDate);
                data.endDateAutoAdjusted = true;
            }

            if (diffDaysIsGreaterThanMaxBookingLength) {
                $(this.endDateSelector).focus();
            }

            data.element = $start;
            data.start = true;
            data.startDate = date;
            data.startDateIso = isoDateString;
            data.endDate = endDate;
            data.endDateIso = endDateIso;
            uitk.publish("calendar.selectDate", data);

        },

        mouseenterDate: function ($target) {
            if (this.dateType === this.START) {
                this.calContainer.find("a.start").removeClass("start");
                this.calContainer.find("a.highlight-start").removeClass("highlight-start");
                $target.addClass('highlight-start');
                this.highlightRange(this.calContainer, $target, this.highlightEnd(this.calContainer));
            } else if (this.dateType === this.END) {
                this.calContainer.find("a.end").removeClass("end");
                this.calContainer.find("a.highlight-end").removeClass("highlight-end");
                $target.addClass('highlight-end');
                this.highlightRange(this.calContainer, this.highlightStart(this.calContainer), $target);
            }
        },

        mouseleaveDate: function ($target) {
            $target.removeClass('highlight-start highlight-end');
            // Highlight original date range
            this.highlightRange(this.calContainer, this.highlightStart(this.calContainer), this.highlightEnd(this.calContainer));
        },


        //SETTERS
        setContainer: function ($elem) {
            this.calContainer = $elem;
        },

        // Set the last months that were displayed
        setLastDisplayed: function (options, updatePair) {

            var month = options && (options.month || options.month === 0) ? options.month : this.firstMonth,
                year = options && options.year ? options.year : this.firstYear;

            if (!updatePair && updatePair !== false && this.calendarPair) {
                updatePair = true;
            } else {
                updatePair = false;
            }

            if (updatePair) {
                this.calendarPair[pluginName]("setLastDisplayed", {month: month, year: year}, false);
            }

            this.lastDisplayedMonth = month;
            this.lastDisplayedYear = year;
        },

        setThisEndDate: function (startDate, endDate) {
            if (!endDate || endDate.valueOf() < startDate.valueOf()) {
                this.endDate = null;
            } else {
                this.endDate = endDate;
            }
        },

        setDefaultEndDate: function (date) {
            var defaultOffsetDate = new Date(date.valueOf() + 1000 * 3600 * 24 * this.options.defaultBookingLength);
            this.setEndDate(defaultOffsetDate, true);
        },

        //HELPER FUNCTIONS / DOCUMENTED API

        //function to allow the following options to updated after calendar has loaded
        /*
         - firstValidDate
         - lastValidDate
         - maxBookingLength
         */
        updateOptions: function (newOptions, updatePair) {

            var key,
                pairOptions = {},
                pairNeedsUpdate = false;

            //set update pair to true if undefined
            if (!updatePair && updatePair !== false && this.calendarPair) {
                updatePair = true;
            } else {
                updatePair = false;
            }

            for (key in newOptions) {
                if (newOptions.hasOwnProperty(key)) {
                    switch (key) {
                        case "firstValidDate":
                        case "lastValidDate":
                            this.options[key] = this.calendarObj.getDateFromString(newOptions[key]);
                            break;
                        case "maxBookingLength":
                            this.options[key] = newOptions[key];
                            pairOptions[key] = newOptions[key];
                            break;
                        default:
                            this.options[key] = newOptions[key];
                    }
                }
            }

            if (updatePair === true) {
                for (key in pairOptions) {
                    if (pairOptions.hasOwnProperty(key)) {
                        pairNeedsUpdate = true;
                        break;
                    }
                }

                if (pairNeedsUpdate) {
                    if (this.options.startDate) {
                        this.startDateField[pluginName]("updateOptions", pairOptions, false);
                    } else if (this.options.endDate) {
                        this.endDateField[pluginName]("updateOptions", pairOptions, false);
                    }
                }
            }

        },

        //functions to allow an error to be flagged.
        flagDateError: function (replacementDate, highlight) {
            if (!highlight && highlight !== false) {
                highlight = true;
            } else {
                highlight = false;
            }

            this.dateError = {
                flagged: true,
                replacementDate: replacementDate || false,
                highlight: highlight
            };
        },

        clearDateError: function () {
            this.dateError = {
                flagged: false,
                replacementDate: false,
                highlight: false
            };
        },

        getDateError: function () {
            return this.dateError;
        },

        keyDown: function(e) {
            if (e.keyCode == backspaceKeyCode) {
                if(this.element.val().length == 0) {
                    this.dirty = false;
                } else {
                    this.dirty = true;
                }
            }
        },

        keyUp: function(e) {
            var data = {};

            if (e.keyCode == backspaceKeyCode) {
                if(this.element.val().length == 0 && this.dirty) {
                    data.element = $(this.element);
                    uitk.publish('calendar.cleared', data);
                }
            }
        }

    };


    /* JQUERY PLUGIN DEFINITION */
    $.fn[pluginName] = function () {

        var options, method, arg, arg2, returned;

        if (typeof arguments[0] === "object") {
            options = arguments[0];
            method = arguments[1];
            arg = arguments[2];
            arg2 = arguments[3];
        } else {
            options = {};
            method = arguments[0];
            arg = arguments[1];
            arg2 = arguments[2];
        }

        this.each(function () {
            if (!$.data(this, pluginName)) {
                $.data(this, pluginName, new Calendar(this, options));
            }
            if (typeof method === "string") {
                returned = $.data(this, pluginName)[method](arg, arg2);
            }
        });

        return returned;
    };


    ////////////////////////////////////////////////////////////////////////////////////////////////////


    openCalendar = function ($target) {
        var $cal;

        // Check if the required calendar object has been set up (has all the date settings and stuff)
        try {
            if (!uitk.calendarObj) {
                throw "ERROR: The calendar control needs to be configured, please see the UI Toolkit documentation for more details";
            }
        }
        catch (err) {
            console.log(err);
            return;
        }

        $cal = $target[pluginName]('getInitialCal');

        if ($cal !== undefined && $target.data('inline')) {
            $target.html($cal);
            $target[pluginName]('setContainer', $target.find('.cal'));
        }
        else {
            if ($cal !== undefined) {
                // Init Tooltip
                $target[tooltipPlugin]({
                    jsTheme: $cal.data("jsTheme")
                });
                $target[tooltipPlugin]("updateContent", $cal);
                $target[tooltipPlugin]("show");
                $target[tooltipPlugin]("checkPos", true, true);
                $target[pluginName]("setContainer", $target.data(tooltipPlugin).tooltip.find(".cal"));
                $target.closest("label").addClass("focused");
            }

            // Set showCal to true so calendar can be opened again
            setTimeout(function () {
                $target.data("showCal", true);
            }, 100);
        }
    };

    // Init inline Calendars
    $(document).ready(function () {
        $(".cal-inline [data-control='calendar']").each(function () {
            openCalendar($(this));
        });
    });

    // EVENT LISTENERS
    // Focus
    $delegate.on("focus." + pluginName, "[data-control='calendar']", function (event) {
        var $target = $(event.target).closest("[data-control='calendar']");

        if ($target.data("showCal") !== false) {
            // Prevent open from happening twice (once for click and once for focus)
            $target.data("showCal", false);

            // Open calendar in Tooltip
            openCalendar($target);
        } else {
            $target.data("showCal", true);
        }
    });

    // Next year
    $delegate.on(clickEvent, ".cal .next-year", {stopPropagation: true}, function (e) {
        var $target = $(e.target),
            calendar = $target.closest(".cal").data("calendar");

        e.preventDefault();
        e.stopPropagation();

        calendar[pluginName]("nextYear", $target);
    });

    // Prev year
    $delegate.on(clickEvent, ".cal .prev-year", {stopPropagation: true}, function (e) {
        var $target = $(e.target),
            calendar = $target.closest(".cal").data("calendar");

        e.preventDefault();
        e.stopPropagation();

        calendar[pluginName]("prevYear", $target);
    });

    // Next month
    $delegate.on(clickEvent, ".cal .next", {stopPropagation: true}, function (e) {
        var $target = $(e.target),
            calendar = $target.closest(".cal").data("calendar");

        e.preventDefault();
        e.stopPropagation();

        calendar[pluginName]("nextMonth", $target);
    });

    // Prev month
    $delegate.on(clickEvent, ".cal .prev", {stopPropagation: true}, function (e) {
        var $target = $(e.target);
        var calendar = $target.closest(".cal").data("calendar");

        e.preventDefault();
        e.stopPropagation();

        calendar[pluginName]("prevMonth");
    });

    // Pick a date
    $delegate.on(clickEvent, ".cal-dates a", function (e) {
        e.preventDefault();
        var $target = $(e.target).closest("a");
        var calendar = $target.closest(".cal").data("calendar");

        if (!$target.hasClass("disabled")) {
            calendar[pluginName]("selectDate", $target);
        }
    });

    // Hover over date
    $delegate.on("mouseenter." + pluginName, ".cal-dates a", function (e) {
        handleHover(e, "mouseenterDate");
    });

    // Hover away from date
    $delegate.on("mouseleave." + pluginName, ".cal-dates a", function (e) {
        handleHover(e, "mouseleaveDate");
    });

    function handleHover(e, funcName) {
        e.preventDefault();
        var $target = $(e.target).closest("a");
        var calendar = $target.closest(".cal").data("calendar");

        if (!$target.hasClass("disabled")) {
            calendar[pluginName](funcName, $target);
        }
    }


    // Disable calendar inputs for touch-capable devices to prevent on-screen keyboard
    // Needs to be done before input is clicked
    initCalendarInputs();

    // Expose object so it can be tested without DOM
    uitk.modules.Calendar = Calendar;

    // Configure date settings
    var dateSettings = I18n.translate("date");
    var calConfig = exp.core.date.CalendarControl.Config;
    calConfig.setFormatConfig(dateSettings.format, dateSettings.separator);
    calConfig.setUnitConfig(dateSettings.start_of_week, dateSettings.month_names, dateSettings.abbr_day_names_short);
    uitk.calendarObj = exp.core.date.Calendar(calConfig);

}(jQuery, window));

; // Safety net against concatenated scripts
(function ($, window, undefined) {
    "use strict";
    var pluginName = "uitk_timepicker";
    var $delegate = $(document);
    var defaults = {
        increment: 60,
        firstValidTime: 0, // 00:00
        lastValidTime: 1440 // 24:00
    };

    /* CONSTRUCTOR */
    function TimePicker(element, jsOptions) {
        uitk.utils.newModule.call(this, element, jsOptions, defaults);
    }

    /* PROTOTYPE */
    TimePicker.prototype = {
        constructor: TimePicker,

        selectTime: function($target) {
            var val = $target.val();
            uitk.publish('timepicker.selectTime', {time: val})
        },

        createTimes: function() {
            var hours, minutes, ampm, label;
            for(var i = this.firstValidTime; i <= this.lastValidTime; i += this.increment){
                hours = Math.floor(i / 60);
                minutes = i % 60;
                if (minutes < 10){
                    minutes = '0' + minutes; // adding leading zero
                }
                ampm = hours % 24 < 12 ? 'AM' : 'PM';
                hours = hours % 12;
                if (hours === 0){
                    hours = 12;
                }

                label = hours + ':' + minutes + ' ' + ampm;
                label = uitk.i18n.time();

                times.push({value: i, label: label});
            }
        }
    };

    /* JQUERY PLUGIN DEFINITION */
    uitk.utils.initPlugin(pluginName, TimePicker);

    // User events
    $delegate.on('change', '[data-control="timepicker"]', function (e) {
        var val = $(this).val();
        uitk.publish('timepicker.selectTime', {time: val})
//        var timepicker = $target.closest('.timepicker').data('timepicker');
//        timepicker[pluginName]('selectTime', $(e.target));
    })

})(jQuery, window);
;
(function ($, window, undefined) {
    "use strict";

    var pluginName = 'uitk_modal',
        $body = $('body'),
        $html = $('html'),
        $document = $(document),
        $window = $(window),
        defaults = {
            alert: false,
            title: false,
            titleIcon: '',
            background: true,
            optOut: false,
            ajax: false,
            footer: false,
            confirm: false,
            dismiss: true,
            closeBtn: true,
            panel: false,
            panelSize: 'medium',
            template: 'partials/uitk/modal-template',
            takeover: true,
            interstitial: false,
            state: false,
            container: $body
        },
        activeClass = 'active',
        activePageClass = 'active-modal',
        activePageScrollableClass = 'active-modal-no-bg',
        containerClass = 'modal-wrap',
        innerClass = 'modal-inner',
        backgroundClass = 'modal-background',
        closeClass = 'modal-close',
        modalCache = {data:{}, content:{}},
        clickEvent = uitk.clickEvent + '.' + pluginName,
        takeOverScreenClass = 'modal-takeover';


    /* CONSTRUCTOR */
    function Modal(element, jsOptions) {
        uitk.utils.newModule.call(this, element, jsOptions, defaults);
    }

    Modal.prototype = {

        constructor: Modal,

        init: function () {
            this.id = this.options.modalId;
            this.optOutStorage = this.options.optOut && Modernizr.sessionstorage;
            this.options.takeover = this.options.takeover && uitk.isTouchDevice;
            this.options.removalTime = this.options.takeover ? 750 : 500;
            this.modalTemplate = Handlebars.templates[this.options.template];
            this.modalTitleTemplate = Handlebars.templates["partials/uitk/modal-title"];

            if (this.optOutStorage) {
                this.storageKey = 'modal-opt-out-' + this.id;

                // If user opted out halt the init
                if (sessionStorage.getItem(this.storageKey) === 'true') {
                    return false;
                }
            }

            this.setContent();
            this.setHtml();
        },

        isHtml: function (data) {
            return data.indexOf('>') !== -1;
        },

        //// This doesn't smell good...
        //getContentFromJquery: function ($elem) {
        //    return $('<div></div>').append($elem).html();
        //},

        setContent: function () {
            var content, cachedContent;
            var that = this;

            if (this.options.content) {
                content = this.options.content;
            }
            else {
                content = "modal-content-" + this.options.modalId;
                cachedContent = modalCache.content[this.options.modalId];
            }

            if (this.options.ajax) {
                this.contentRequest = $.get(content, function (data) {
                    that.updateContent(data);
                });
            } else {

                if (cachedContent) {
                    this.content = cachedContent;
                }
                else if ((typeof content === "string" && this.isHtml(content)) || content instanceof jQuery)  {
                        this.content = content;
                        modalCache.content[this.options.modalId] = this.content;
                }
                else if (typeof content === "string") {
                    if(this.options.state) {
                        this.content = $('#' + content).find('.modal-content').detach();
                    } else {
                        this.content = $('#' + content).find('.modal-content').html();
                        $('#' + content).find('.modal-content').html('');
                    }

                    modalCache.content[this.options.modalId] = this.content;
                }
                else {
                    this.content = "";
                }
            }
        },

        getContent: function() {
            return this.content || modalCache.content[this.options.modalId];
        },

        updateTitle: function (title, subtitle) {
            var $headerElem = this.modalWrap.find('.modal-header'),
                $titleElem = this.modalWrap.find('.modal-title'),
                $subtitleElem = this.modalWrap.find('.modal-subtitle');

            if (!title && !subtitle) {
               $headerElem.remove();
                this.options.title = false;
                this.options.subtitle = false;
            } else {
                if ($headerElem.length > 0) {
                    if($titleElem.length > 0 && title) {
                        $titleElem.html(title);
                        this.options.title = title;
                    } else if ($titleElem.length == 0 && title) {
                        this.modalWrap.find('.modal-inner').prepend($(this.modalTitleTemplate({title: title, id: this.options.modalId})));
                        this.options.title = title;
                    } else{
                        $titleElem.remove();
                        this.options.title = false;
                    }

                    if($subtitleElem.length > 0 && subtitle) {
                        $subtitleElem.html(subtitle);
                        this.options.subtitle = subtitle;
                    } else if ($subtitleElem.length == 0 && subtitle){
                        this.modalWrap.find('.modal-inner').prepend($(this.modalTitleTemplate({subtitle: subtitle, id: this.options.modalId})));
                        this.options.subtitle = subtitle;
                    } else {
                        $subtitleElem.remove();
                        this.options.subtitle = false;
                    }
                } else {
                    this.modalWrap.find('.modal-inner').prepend($(this.modalTitleTemplate({title: title, subtitle: subtitle, id: this.options.modalId})));
                    title ? this.options.title = title : this.options.title = false;
                    subtitle ? this.options.subtitle = subtitle : this.options.subtitle = false;
                }
            }

            return this;
        },

        updateContent: function (content, title, subtitle) {
            if ((typeof content === "string" && this.isHtml(content)) || content instanceof jQuery ) {
                this.content = content;
            } else {
                this.content = "";
                this.modalInnerHtml.addClass("loading").attr("aria-busy", "true");
            }

            if (this.modalWrap) {
                this.modalWrap.find('.modal-body').html(this.content);
                //uitk.initCalendarInputs(this.modalWrap); //this is throwing an error when appending a msg

                this.updateTitle(title, subtitle);

                uitk.publish('modal.appended', this);

                if (this.content !== "") {
                    this.modalInnerHtml.removeClass("loading").attr("aria-busy", "false");
                }
            }

            return this;
        },

        getModalData: function () {
            var modalData = {};

            if (modalCache.data[this.options.modalId]) {
                modalData = modalCache.data[this.options.modalId];
            }
            else {
                modalData.alert = this.options.alert;
                modalData.alertTitle = this.options.alertTitle;
                modalData.alertIcon = this.options.alertIcon;
                modalData.title = this.options.title;
                modalData.subtitle = this.options.subtitle;
                modalData.titleIcon = this.options.titleIcon;
                modalData.id = this.options.modalId;
                modalData.optOut = this.optOutStorage;
                modalData.optOutText = this.options.optOutText || false;
                modalData.theme = this.options.jsTheme;
                modalData.dismiss = this.options.dismiss && this.options.background;
                modalData.confirm = this.options.confirm;
                modalData.confirmText = this.options.confirmText || "uitk_confirm";
                modalData.closeBtn = this.options.closeBtn;
                modalData.closeText = this.options.closeText;
                modalData.background = this.options.background;
                modalData.panel = this.options.panel;
                modalData.panelSize = this.options.panelSize;
                // modalData.content = this.content || "";
                modalData.footer = this.options.footer || this.options.optOut || this.options.confirm;

                modalCache.data[this.options.modalId] = modalData;
            }

            return modalData;
        },

        setHtml: function () {
            var modalData = this.getModalData();
            var $renderedTemplate = $(this.modalTemplate(modalData));
            this.modalHtml = $renderedTemplate;
            this.modalHtml.find('.modal-body').html(this.content);
            this.modalWrap = $renderedTemplate.filter('.' + containerClass);
            this.modalBg = $renderedTemplate.filter('.' + backgroundClass);
            this.modalInnerHtml = this.modalWrap.find('.' + innerClass);
        },

        // TODO why is all this necessary?
        setModalFocus: function () {
            var focusable, focusableLast;
            var that = this;
            var currentFocus = -1;

            // Find focusable elements
            focusable = this.modalWrap.find('a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]').filter(':visible:not([tabindex=-1])');
            focusableLast = focusable.length - 1;

            this.modalWrap.focus();

            // Create event listener if more than one focusable element
            if (focusable.length > 1) {
                // Close Modal when Esc is pressed
                $document.on('keydown.focus', function (e) {
                    if (e.keyCode === 9) {
                        e.preventDefault();

                        if (e.shiftKey) {
                            currentFocus = that.setPrevFocus(currentFocus, focusableLast);
                        }
                        else {
                            currentFocus = that.setNextFocus(currentFocus, focusableLast);
                        }
                        focusable.eq(currentFocus).focus();
                    }
                });
            }
        },

        setNextFocus: function (currentFocus, focusableLast) {
            if (currentFocus === focusableLast) {
                return 0;
            } else {
                return currentFocus + 1;
            }
        },

        setPrevFocus: function (currentFocus, focusableLast) {
            if (currentFocus <= 0) {
                return focusableLast;
            } else {
                return currentFocus - 1;
            }
        },

        removeModalFocus: function () {
            var that = this;
            $document.off('keydown.focus');
            // Make sure the lastFocused element is still in the DOM before focusing on it
            if (that.lastFocused && ($body.has(that.lastFocused).length > 0)) {
                that.lastFocused.focus();
            }
        },

        appendHtml: function () {
            var that = this;

            //store reference to modal on modal
            this.modalWrap.data('modal', this);

            // Update content
            this.modalHtml.find('.modal-body').html(this.getContent());
            //add the html to the page
            this.modalHtml.appendTo(that.options.container);

            // Init placeholder due to refreshPlaceholder() does not work
            uitk.initPlaceholders();

            //publish that modal has been appended to the page but only if content is included
            if (this.content && uitk && uitk.publish) {
                uitk.publish('modal.appended', that);
            }

            setTimeout(function () {
                if (that.options.takeover && that.options.background) {
                    $html.addClass(takeOverScreenClass);
                    that.modalBg.addClass(activeClass);
                    setTimeout(function () {
                        $html.addClass(activePageClass);
                        that.modalWrap.addClass(activeClass);

                        // Set focus
                        that.setModalFocus();
                    }, 0);
                }
                else {
                    $html.removeClass(takeOverScreenClass);
                    that.scrollPosition = null;

                    if (that.options.interstitial || !that.options.background) {
                        $html.addClass(activePageScrollableClass);
                    }

                    // Activate modal to display it
                    $html.addClass(activePageClass);

                    // Required to make Firefox animate in
                    setTimeout(function () {
                        that.modalWrap.addClass(activeClass);
                        that.modalBg.addClass(activeClass);
                    }, 0);

                    // Set focus
                    that.setModalFocus();
                }

            }, 0);
        },
        
        open: function (checkManual, event) {
            var that = this;
            var focusables = 'input:not([readonly]), textarea';

            // Calculate the repositioning of the Modal for iPad1 TODO do we bother with this then?
            function setDistanceFromTop() {
                if (!$(document.activeElement).is(focusables)) {
                    // Converting px value into ems. Assumes @baseFontPx is 15
                    var distanceFromTop = (($window.scrollTop()) / 15) + "em";
                    that.modalHtml.css({top: distanceFromTop});
                }
            }

            // If needed publish modal.beforeOpen and prevent open
            if ((this.options.manual === 'open' || this.options.manual === 'both') && checkManual) {
                uitk.publish('modal.beforeOpen', this, event);
                return false;
            }

            // Store last focused page element
            this.lastFocused = this.element;

            if (this.optOutStorage) {
                // Don't show Modal if user has opted out
                if (sessionStorage.getItem(this.storageKey) === 'true') {
                    return false;
                }
            }

            this.appendHtml();

            if (!Modernizr.positionfixed && !this.options.background) {
                setTimeout(function () {
                    // In addition to this, .no-positionfixed class in modal.less gives .modal-wrap position:absolute
                    setDistanceFromTop();

                    // Subscribe to scrolling and reposition the modal if the user scrolls away
                    uitk.subscribe('debounced.scroll', function () {
                        setDistanceFromTop();
                    });

                    // Reposition modal once user has finished interacting with inputs
                    that.modalHtml.on('blur', focusables, function () {

                        // Give blur event time to fire
                        setTimeout(function () {
                            setDistanceFromTop();
                        }, 0);
                    });
                }, 10);
            }

            return this;
        },

        close: function (type, checkManual, event) {
            var optOutCheckbox, optOut, removeAfterAnim, $modalBackground;
            var that = this;
            var finish = false;

            // If no background don't close on background click
            if ((type === 'background' && !this.options.background) || (type === 'background' && !this.options.dismiss) || (type === 'esc' && !this.options.dismiss)) {
                return false;
            }

            // Check data-manual, if need publish modal.beforeClose and stop close
            if ((this.options.manual === 'close' || this.options.manual === 'both') && checkManual) {
                uitk.publish('modal.beforeClose', this, event);
                return false;
            }

            // Focus on last focused element
            this.removeModalFocus();

            if (this.options.background) {
                // Test if background has an opacity before closing so we know whether to expect animation or not
                $modalBackground = $('.' + backgroundClass);
                this.backgroundOpacity = $modalBackground.css('opacity');
            }

            // Remove after animation has finished
            removeAfterAnim = function ($elem) {
                $elem.on(uitk.topics.transitionEnd, function () {

                    $elem.off(uitk.topics.transitionEnd).remove();

                    if (finish && $(".modal-wrap").length === 0) {
                        //remove activePageClass and activePageScrollableClass if no modal exists
                        $html.removeClass(activePageClass + " " + activePageScrollableClass);
                    } else if (finish && $(".modal-background").length > 0) {
                        //remove activePageScrollableClass if a background exists
                        $html.removeClass(activePageScrollableClass);
                    } else {
                        finish = true;
                    }

                    // Handle situations where 'active' background has an opacity of 0 and therefore doesn't animate
                    if (!$elem.hasClass(backgroundClass) && that.options.background) {
                        if (parseFloat(that.backgroundOpacity) === 0) {
                            $modalBackground.trigger('transitionend');
                        }
                    }
                });
            };

            // Add listener for removal
            if (Modernizr.csstransitions) {
                removeAfterAnim(this.modalWrap);

                if (this.options.background) {
                    removeAfterAnim(this.modalBg);
                } else {
                    finish = true;
                }

                // Set timeout in case animations fail
                setTimeout(function () {
                    that.modalWrap.trigger('transitionend');
                    that.modalBg.trigger('transitionend');
                }, this.options.removalTime);
            }

            // Store details around opting out of modal
            if (this.optOutStorage) {
                optOutCheckbox = this.modalWrap.find('input[name=' + this.options.modalId + '-opt-out]');

                if (optOutCheckbox && optOutCheckbox.attr('checked')) {
                    optOut = 'true';
                } else {
                    optOut = 'false';
                }

                sessionStorage.setItem(this.storageKey, optOut);
            }

            // Now close modal
            if (this.options.takeover && this.options.background) {
                this.modalWrap.removeClass(activeClass);

                setTimeout(function () {
                    $html.removeClass(activePageClass);
                    that.modalBg.removeClass(activeClass);
                    if (!that.options.confirm) uitk.publish('modal.close', that);
                }, 250);

                setTimeout(function () {
                    $document.scrollTop(that.scrollPosition);
                }, 350);
            } else {
                this.modalWrap.removeClass(activeClass);
                this.modalBg.removeClass(activeClass);
                if (!this.options.confirm) uitk.publish('modal.close', this);
            }


            if (!Modernizr.csstransitions) {
                this.modalHtml.remove();

                // Make sure another modal isn't present
                if ($(".modal-wrap").length === 0) {
                    //remove activePageClass and activePageScrollableClass if no modal exists
                    $html.removeClass(activePageClass + " " + activePageScrollableClass);
                } else if ($(".modal-background").length > 0) {
                    //remove activePageScrollableClass if a background exists
                    $html.removeClass(activePageScrollableClass);
                }
            }

            if (!Modernizr.positionfixed && !this.options.background) {
                uitk.unsubscribe('debounced.scroll');
            }

            return this;
        },

        confirm: function(e) {
            uitk.publish('modal.confirm', this);
            if (this.options.manual !== 'close') this.close('close-button', true, e);
        }
    };

    /* JQUERY PLUGIN DEFINITION */
    uitk.utils.initPlugin(pluginName, Modal);


    /* EVENT LISTENERS (delegated to body) */
    $body.on(clickEvent, '[data-control="modal"]', function (e) {
        var $target = $(e.target).closest('[data-control="modal"]');
        e.preventDefault();
        $target[pluginName]('open', true, e);
    });

    // Close when wrapper is clicked (an off-Modal click)
    $body.on(clickEvent, '.' + containerClass, function (e) {
        if ($(e.target).hasClass(containerClass)) {
            e.preventDefault();
            closeModal('background', true, e);
        }
    });

    $body.on(clickEvent, '.' + backgroundClass, function (e) {
        e.preventDefault();
        if ($html.hasClass(takeOverScreenClass)) {
            closeModal('background', true, e);
        }
    });

    // Close and publish when Confirm is clicked
    $body.on(clickEvent, '#modal-confirm', function (e) {
        e.preventDefault();
        $('.' + containerClass).data('modal').confirm(e);
    });

    // Close when Cancel button is clicked
    $body.on(clickEvent, '#modal-cancel', function (e) {
        e.preventDefault();
        closeModal('close-button', true, e);
    });

    // Close when Close button is clicked
    $body.on(clickEvent, '.' + closeClass, function (e) {
        e.preventDefault();
        closeModal('close-button', true, e);
    });

    // Close Modal when Esc key is pressed
    $document.on('keydown', function (e) {
        if (e.keyCode === 27) {
            closeModal('esc', true, e);
        }
    });

    $(window).on('orientationchange', function () {
        var focusedElem = document.activeElement,
            $focusedElem = $(focusedElem),
            focusedElemTag = focusedElem.tagName;

        // If focused element is input or a textarea and it is inside the modal, hide the keyboard to correct the Modal on rotation
        if ((focusedElemTag === 'INPUT' || focusedElemTag === 'TEXTAREA') && !focusedElem.hasAttribute('readonly') && $focusedElem.closest('.modal-inner').length > 0) {
            $focusedElem.blur().focus();
        }
    });

    //fixes an issue on the iPad where bluring an input inside a modal breaks the modal
    //https://mingle.karmalab.net/projects/ue_team_initiatives/cards/1658
    $body.on('blur', '.modal-inner input', function (e) {
        if ($(e.target).data('control') !== 'calendar') {
            $body.css("height", "+=10000").css("height", "-=10000");
            setTimeout(function () {
                $body.css("height", "");
            }, 0);
        }
    });

    // Function to close modals
    var closeModal = function (type, checkManual, event) {
        var elem = $('.' + containerClass);

        elem.each(function () {
            $(this).data('modal').close(type, checkManual, event);
        });
    };


    //helper functions available in uitk.modal
    uitk.modal = {
        create: function (options, open) {
            var newModal = new Modal(null, options);

            if (open) {
                newModal.open(true);
            }
            //returns the new Modal's js object
            return newModal;
        },
        close: closeModal
    };

    // Expose object so it can be tested without DOM
    uitk.modules.Modal = Modal;

}(jQuery, window));
/**
 * Project: UITK Dropdown Plugin
 * Author: Avi Eisner, contact cseteam@expedia.com
 * OPTIONS (passed via data-* attributes in the html)
 */

/* jslint plusplus:true */
/* global jQuery */

/**
 * The semi-colon before function invocation is a safety net against concatenated
 * scripts and/or other plugins which may not be closed properly.
 */

;(function ( $, window, uitk, undefined ) {
    'use strict';

    /** Create the defaults */
    var pluginName = 'uitk_dropDown',
        defaults = {
            gutter: 6
        },
        toggleSelector = '[data-control=menu]',
        $window = $(window),
        windowWidth,
        bodyMinWidth = parseFloat($('body').css('min-width')),
        nonResponsivePage = bodyMinWidth > 950 || Modernizr.mediaqueries === 'false' || Modernizr.mediaqueries === false,
        isIe8 = !document.addEventListener,
        ie8ArrowClass = 'ie8-menu-arrow',
        arrowClass = 'menu-arrow',
        openClass = 'open',
        centerClass = 'pin-center',
        isCentered,
        menuWidth,
        triggerWidth,
        shiftC;

    /** CONSTRUCTOR */
    function DropDown( element, jsOptions ) {
        uitk.utils.newModule.call(this, element, jsOptions, defaults);
    }

    DropDown.prototype = {
        constructor: DropDown,

        /** METHODS */
        init: function() {
            /**
             * First, look for a parent selector in the data-target attribute.
             * If this doesn't exist or successfully select a parent, use the actual parent element.
             */
            var that = this,
                target = that.element,
                selector = target.attr('data-target');

            that.$parent = $(selector);
            that.$parent = that.$parent.length ? that.$parent : target.parent();
        },

        open: function() {
            var that = this;

            that.$parent.addClass(openClass);
            that.element.attr('aria-expanded','true');

            /** Needs storing in case user clicks away and we want to access last opened menu. */
            that.storeOpen(that.element);
            uitk.publish('menu.opened', {$menu:that.element});
        },

        close: function() {
            var that = this;

            that.$parent.removeClass(openClass);
            that.element.attr('aria-expanded','false');
            uitk.publish('menu.closed', {$menu:that.element});
        },

        closeAll: function() {
            var $open = !!$(toggleSelector).parent().hasClass(openClass);

            $(toggleSelector).parent().removeClass(openClass);
            $(toggleSelector).attr('aria-expanded','false');

            if ($open) {
                uitk.publish('menu.closed', $('body').data('menuStored'));
            }
        },

        storeOpen: function($elem){
            $('body').data('menuStored', {$menu: $elem});
        },

        getWindowWidth: function(){
            return $window.width();
        },

        centerMenu: function(){
            var that = this,
                $trigger = that.element,
                $menu = $trigger.next('.menu');

            menuWidth = $menu.outerWidth();
            triggerWidth = $trigger.outerWidth();
            shiftC = (triggerWidth - menuWidth) / 2;

//            $menu.css('right', shiftC + 'px');
        },

        setPos: function() {
            /**
             * Using nextAll().first() for $menu instead of next() because
             * some teams do not use the JSP tags, but instead,
             * insert custom markup in between the trigger and
             * the menu. This causes next('menu') to be undefined.
             */
            var that = this,
                trigger = that.element,
                $menu = trigger.nextAll('.menu').first(),
                isNavTab = trigger.hasClass('nav-tab'),
                isPinLeft = trigger.hasClass('pin-left'),
                isBtnGrp = $menu.parent().hasClass('btn-group'),
                isPinRight = trigger.hasClass('pin-right'),
                gutter = that.options.gutter;

            windowWidth = that.getWindowWidth();
            menuWidth = $menu.outerWidth();
            triggerWidth = trigger.outerWidth();
            shiftC = (triggerWidth - menuWidth) / 2;
            isCentered = trigger.hasClass(centerClass);

            /** Init menu position */
//            if (isNavTab || isPinLeft) {
//                $menu.css({'right':'auto', 'left':0});
//            }
//            else if (isBtnGrp || isPinRight) {
//                $menu.css('right', 0);
//            }
//            else if (isCentered) {
//                $menu.css('right', shiftC + 'px');
//            }

            /** Set menu position */
            var menuOffset = $menu.offset(),
                menuOffsetL = menuOffset.left,
                menuOffsetR = windowWidth - (menuOffsetL + menuWidth),
                shiftL = parseInt(menuOffsetL - gutter),
                shiftR = parseInt(menuOffsetR - gutter),
                cssR = parseFloat($menu.css('right')),
                shiftLC = cssR + shiftL,
                shiftRC = cssR - shiftR,
                menuPosL,
                maxShift;

//            if (menuOffsetL < gutter) {
//                if (isCentered) {
//                    $menu.css('right', shiftLC + 'px');
//                }
//                else {
//                    $menu.css('right', shiftL + 'px');
//                }
//
//                /** IE-specific fix when IE outputs 0 instead of auto */
//                if ($menu.css('right') === '0px' && $menu.css('left') === '0px') {
//                    $menu.css('right', 'auto');
//                }
//            }
//            else if (menuOffsetR < gutter) {
//                if (isCentered) {
//                    $menu.css('right', shiftRC + 'px');
//                }
//                else {
//                    $menu.css('left', shiftR + 'px');
//                    menuPosL = $menu.position().left;
//                    maxShift = menuWidth - triggerWidth + menuPosL;
//
//                    if (maxShift <= 0) {
//                        $menu.css({'right':0, 'left':'auto'});
//                    }
//                }
//            }
        },

        /** HANDLERS */
        toggle: function() {
            var that = this,
                isActive,
                autoPos = that.options.autoPos,
                trigger = that.element,
                hasArrow = trigger.hasClass(arrowClass),
                last = trigger.children().last(),
                hasIe8Arrow = last.hasClass(ie8ArrowClass);

            isCentered = trigger.hasClass(centerClass);

            if (trigger.is('.disabled, :disabled')) {
                return;
            }

            isActive = that.$parent.hasClass(openClass);

            that.closeAll();

            if (!isActive) {
                that.$parent.toggleClass(openClass);
                /** Needs storing in case user clicks away and we want to access last opened menu. */
                that.storeOpen(that.element);
                uitk.publish('menu.opened', {$menu:that.element});
                that.element.attr('aria-expanded', 'true');

                if (isIe8 && hasArrow) {
                    /**
                     * Only create the arrow if it does not already exist.
                     * Arrow is added via JS for IE8 only. Modern browsers use :after
                     * IE8 can not rotate a pseudo-element bc IE8
                     **/
                    if (!hasIe8Arrow) {
                        trigger.append('<span class="ie8-menu-arrow"></span>');
                    }
                }

                if (autoPos !== false && !nonResponsivePage) {
                    that.setPos();
                }
                else {
                    /** Center menu if autoPos is false or if nonResponsive page */
                    if (isCentered) {
                        that.centerMenu();
                    }
                }
            }
            return false;
        },

        handleResize: function($target) {
            var that = this,
                i,
                autoPos = $target.data('autoPos');

            windowWidth = that.getWindowWidth();

            /** Sets a minWidth to fix issues in IE */
            if (!bodyMinWidth) {
                bodyMinWidth = 255;
            }

            /** Only sets position is autoPos is set and window is wider than 255 */
            if (autoPos !== false && windowWidth > bodyMinWidth) {
                for (i = 0; i < $target.length; i++) {
                    $target[pluginName]('setPos');
                }
            }
            else {
                return false;
            }
        }
    };

    /** JQUERY PLUGIN DEFINITION */
    uitk.utils.initPlugin(pluginName, DropDown);

    /**
     * Positions open menus on resize.
     * Excludes old browsers and nonresponsive pages.
     */
    $(window).on('resize.' + pluginName, function(){
        var $target = $(toggleSelector + '[aria-expanded="true"]');

        if (!nonResponsivePage && $target.length > 0) {
            DropDown.prototype.handleResize($target);
        }
    });

    $('html')
        .on(uitk.clickEvent + '.dropdown.data-api', {preventDefault:false}, function(e) {
            var $menu = $(e.target).closest('.menu'),
                $toggle = $(e.target).closest(toggleSelector);

            if ($menu && $menu.length > 0 && $menu.hasClass('sticky')) {
                return;
            }

            if ($menu && $menu.length > 0){
                /** Prevents sticky menus from closing when the menu content is clicked. */
                if ($menu.hasClass('sticky')){
                    return;
                }
                else {
                    /** Timeout before closing menu, which compensates for delay on touch devices. */
                    setTimeout(function(){
                        DropDown.prototype.closeAll();
                    }, 500);
                }
            }
            else if ($toggle.length === 0) {
                DropDown.prototype.closeAll();
            }
        });
    $('body')
        .on(uitk.clickEvent + '.dropdown', '.dropdown form', function(e) {e.stopPropagation();})
        .on(uitk.clickEvent + '.dropdown.data-api', toggleSelector, function(e) {
            e.preventDefault();
            var $target = $(e.target).closest(toggleSelector);

            $target[pluginName]('toggle');
        })
        .on(uitk.clickEvent, '.menu .close', function(e) {
            e.preventDefault();
            var $target = $(e.target).closest('.menu').prev(toggleSelector);

            $target[pluginName]('close');
            uitk.utils.focusElement($target);
        });

    /** Expose object so it can be tested without DOM */
    uitk.modules.DropDown = DropDown;

}(jQuery, window, window.uitk ));
// the semi-colon before function invocation is a safety net against concatenated
// scripts and/or other plugins which may not be closed properly.

//TODO sliders with low max values stutter a little because it is based on a step value of 1, and so sliding across
;
(function ($, window, undefined) {

    "use strict";

    // Create the defaults once
    var pluginName = 'uitk_range_slider';


    /*!
     * jQuery UI Slider 1.11.4
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     *
     * http://api.jqueryui.com/slider/
     */


    var slider = $.widget( "ui.slider", $.ui.mouse, {
        version: "1.11.4",
        widgetEventPrefix: "slide",

        options: {
            animate: false,
            distance: 0,
            max: 100,
            min: 0,
            orientation: "horizontal",
            range: "min",
            step: 1,
            value: 0,
            values: null,
            price: false,

            // callbacks
            change: null,
            slide: null,
            start: null,
            stop: null
        },

        // number of pages in a slider
        // (how many times can you page up/down to go through the whole range)
        numPages: 5,

        timeFormat: "YYYY-MM-DDTHH:mm:ss.000",

        _create: function() {
            this._keySliding = false;
            this._mouseSliding = false;
            this._animateOff = true;
            this._handleIndex = null;
            this._detectOrientation();
            this._mouseInit();
            this._calculateNewMax();

            this.element
                .addClass( "ui-slider" +
                    " ui-slider-" + this.orientation +
                    " ui-widget" +
                    " ui-widget-content" +
                    " ui-corner-all");

            this._refresh();
            this._setOption( "disabled", this.options.disabled );

            this._animateOff = false;
        },

        _refresh: function() {
            this._createRange();
            this._createHandles();
            this._setupEvents();
            this._refreshValue();
        },

        _createHandles: function() {
            var i, handleCount,
                that = this,
                options = this.options,
                existingHandles = this.element.find( ".ui-slider-handle" ).addClass( "ui-state-default ui-corner-all" ),
                handle = "<span class='ui-slider-handle ui-state-default ui-corner-all' tabindex='0'></span>", //<span class='slider-value-label secondary'></span>
                handles = [];

            handleCount = ( options.values && options.values.length ) || 1;

            if (existingHandles.length > handleCount) {
                existingHandles.slice(handleCount).remove();
                existingHandles = existingHandles.slice(0, handleCount);
            }

            for (i = existingHandles.length; i < handleCount; i++) {
                handles.push( handle );
            }

            this.handles = existingHandles.add( $( handles.join( "" ) ).appendTo( this.element ) );

            this.handle = this.handles.eq(0);

            this.handles.each(function(handle) {
                var val, newVal;

                if (options.range === true) {
                    val = options.values[handle];
                }
                else {
                    val = options.value;
                }

                newVal = that._transformDisplayValue(val);

                if (options.plus && val >= that._valueMax()) {
                    if (val > that._valueMax()) {
                        newVal = uitk.i18n.currency(that._valueMax(), {round: true, code: options.currency}); // If we've exceeded the max, show max+
                    }
                    newVal += "+";
                }

                //$(this).find('.slider-value-label').text(newVal);
                if(handle == 0) {
                    that.element.append("<span class='slider-value-label-start secondary'>"+ newVal +"</span>");
                } else if (handle == 1) {
                    that.element.append("<span class='slider-value-label-end secondary'>"+ newVal +"</span>");
                }

                $( this ).data( "ui-slider-handle-index", handle );
            });
        },

        _createRange: function() {
            var options = this.options,
                classes = "";

            if ( options.range ) {
                if ( options.range === true ) {
                    if ( !options.values ) {
                        options.values = [ this._valueMin(), this._valueMax() ];
                    } else if ( options.values.length && options.values.length !== 2 ) {
                        options.values = [ options.values[0], options.values[0] ];
                    } else if ( $.isArray( options.values ) ) {
                        options.values = options.values.slice(0);
                    }
                }

                if ( !this.range || !this.range.length ) {
                    this.range = $( "<div></div>" )
                        .appendTo( this.element );

                    classes = "ui-slider-range" +
                        // note: this isn't the most fittingly semantic framework class for this element,
                        // but worked best visually with a variety of themes
                        " ui-widget-header ui-corner-all";
                } else {
                    this.range.removeClass( "ui-slider-range-min ui-slider-range-max" )
                        // Handle range switching from true to min/max
                        .css({
                            "left": "",
                            "bottom": ""
                        });
                }

                this.range.addClass( classes +
                    ( ( options.range === "min" || options.range === "max" ) ? " ui-slider-range-" + options.range : "" ) );
            } else {
                if ( this.range ) {
                    this.range.remove();
                }
                this.range = null;
            }
        },

        _setupEvents: function() {
            this._off( this.handles );
            this._on( this.handles, this._handleEvents );
            this._hoverable( this.handles );
            this._focusable( this.handles );
        },

        _destroy: function() {
            this.handles.remove();
            if ( this.range ) {
                this.range.remove();
            }

            this.element
                .removeClass( "ui-slider" +
                    " ui-slider-horizontal" +
                    " ui-slider-vertical" +
                    " ui-widget" +
                    " ui-widget-content" +
                    " ui-corner-all" );

            this._mouseDestroy();
        },

        _mouseCapture: function( event ) {
            var position, normValue, distance, closestHandle, index, allowed, offset, mouseOverHandle, valueLabel,
                that = this,
                o = this.options;

            // check if the mouse click event is value-label
            valueLabel = $(event.target).hasClass('slider-value-label-start') || $(event.target).hasClass('slider-value-label-end');

            if ( o.disabled || valueLabel) {
                return false;
            }

            this.elementSize = {
                width: this.element.outerWidth(),
                height: this.element.outerHeight()
            };
            this.elementOffset = this.element.offset();

            position = { x: event.pageX, y: event.pageY };
            normValue = this._normValueFromMouse( position );
            distance = this._valueMax() - this._valueMin() + 1;
            this.handles.each(function( i ) {
                var thisDistance = Math.abs( normValue - that.values(i) );
                if (( distance > thisDistance ) ||
                    ( distance === thisDistance &&
                        (i === that._lastChangedValue || that.values(i) === o.min ))) {
                    distance = thisDistance;
                    closestHandle = $( this );
                    index = i;
                }
            });

            allowed = this._start( event, index );
            if ( allowed === false ) {
                return false;
            }
            this._mouseSliding = true;

            this._handleIndex = index;

            closestHandle
                .addClass( "ui-state-active" )
                .focus();

            // Add active state to value label
            if(index == 0) {
                closestHandle.siblings(".slider-value-label-start").addClass("slider-value-label-active");
            } else if(index == 1) {
                closestHandle.siblings(".slider-value-label-end").addClass("slider-value-label-active");
            }


            offset = closestHandle.offset();
            mouseOverHandle = !$( event.target ).parents().addBack().is( ".ui-slider-handle" );
            this._clickOffset = mouseOverHandle ? { left: 0, top: 0 } : {
                left: event.pageX - offset.left - ( closestHandle.width() / 2 ),
                top: event.pageY - offset.top -
                    ( closestHandle.height() / 2 ) -
                    ( parseInt( closestHandle.css("borderTopWidth"), 10 ) || 0 ) -
                    ( parseInt( closestHandle.css("borderBottomWidth"), 10 ) || 0) +
                    ( parseInt( closestHandle.css("marginTop"), 10 ) || 0)
            };

            if ( !this.handles.hasClass( "ui-state-hover" ) ) {
                this._slide( event, index, normValue );
            }
            this._animateOff = true;
            return true;
        },

        _mouseStart: function() {
            return true;
        },

        _mouseDrag: function( event ) {
            var position = { x: event.pageX, y: event.pageY },
                normValue = this._normValueFromMouse( position );

            this._slide( event, this._handleIndex, normValue );

            return false;
        },

        _mouseStop: function( event ) {
            this.handles.removeClass( "ui-state-active" );

            // Remove active state to value label
            this.handles.siblings(".slider-value-label-start").removeClass("slider-value-label-active");
            this.handles.siblings(".slider-value-label-end").removeClass("slider-value-label-active");

            this._mouseSliding = false;

            this._stop( event, this._handleIndex );
            this._change( event, this._handleIndex );

            this._handleIndex = null;
            this._clickOffset = null;
            this._animateOff = false;

            return false;
        },

        _detectOrientation: function() {
            this.orientation = ( this.options.orientation === "vertical" ) ? "vertical" : "horizontal";
        },

        _normValueFromMouse: function( position ) {
            var pixelTotal,
                pixelMouse,
                percentMouse,
                valueTotal,
                valueMouse;

            if ( this.orientation === "horizontal" ) {
                pixelTotal = this.elementSize.width;
                pixelMouse = position.x - this.elementOffset.left - ( this._clickOffset ? this._clickOffset.left : 0 );
            } else {
                pixelTotal = this.elementSize.height;
                pixelMouse = position.y - this.elementOffset.top - ( this._clickOffset ? this._clickOffset.top : 0 );
            }

            percentMouse = ( pixelMouse / pixelTotal );
            if ( percentMouse > 1 ) {
                percentMouse = 1;
            }
            if ( percentMouse < 0 ) {
                percentMouse = 0;
            }
            if ( this.orientation === "vertical" ) {
                percentMouse = 1 - percentMouse;
            }

            valueTotal = this._valueMax() - this._valueMin();
            valueMouse = this._valueMin() + percentMouse * valueTotal;

            return this._trimAlignValue( valueMouse );
        },

        _start: function( event, index ) {
            var uiHash = {
                handle: this.handles[index],
                value: this.value(),
                min: this._valueMin(),
                max: this._valueMax()

            };
            if ( this.options.values && this.options.values.length ) {
                uiHash.value = this.values( index );
                uiHash.values = this.values();
            }
            return this._trigger( "start", event, uiHash );
        },

        _slide: function(event, index, newVal ) {
            var otherVal,
                newValues,
                allowed,
                displayVal;

            if (this.options.values && this.options.values.length) {
                otherVal = this.values( index ? 0 : 1 );

                if ((this.options.values.length === 2 && this.options.range === true) &&
                    (( index === 0 && newVal > otherVal) || ( index === 1 && newVal < otherVal ))) {
                    newVal = otherVal;
                }

                if ( newVal !== this.values( index ) ) {
                    newValues = this.values();
                    newValues[ index ] = newVal;

                    displayVal = this._transformDisplayValue(newVal);

                    if (this.options.plus && newVal === this._valueMax()) {
                        displayVal += "+";
                    }

                    //$(this.handles[index]).find('.slider-value-label').text(displayVal);
                    if (index == 0) {
                        this.element.find('.slider-value-label-start').html(displayVal);
                    } else if (index == 1) {
                        this.element.find('.slider-value-label-end').html(displayVal);
                    }

                    // A slide can be canceled by returning false from the slide callback
                    allowed = this._trigger( "slide", event, {
                        handle: this.handles[ index ],
                        value: newVal,
                        values: newValues,
                        min: this._valueMin(),
                        max: this._valueMax()
                    } );
                    otherVal = this.values( index ? 0 : 1 );
                    if ( allowed !== false ) {
                        this.values( index, newVal );
                    }
                }
            } else {
                if ( newVal !== this.value() ) {

                    displayVal = this._transformDisplayValue(newVal);

                    if (this.options.plus && newVal === this._valueMax()) {
                        displayVal += "+";
                    }

                    //$(this.handles[index]).find('.slider-value-label').text(displayVal);
                    if (index == 0) {
                        this.element.find('.slider-value-label-start').text(displayVal);
                    } else if (index == 1) {
                        this.element.find('.slider-value-label-end').text(displayVal);
                    }

                    // A slide can be canceled by returning false from the slide callback
                    allowed = this._trigger( "slide", event, {
                        handle: this.handles[ index ],
                        value: newVal,
                        min: this._valueMin(),
                        max: this._valueMax()
                    } );
                    if ( allowed !== false ) {
                        this.value( newVal );
                    }
                }
            }
        },

        _stop: function( event, index ) {
            var uiHash = {
                handle: this.handles[ index ],
                value: this.value(),
                min: this._valueMin(),
                max: this._valueMax()
            };
            if ( this.options.values && this.options.values.length ) {
                uiHash.value = this.values( index );
                uiHash.values = this.values();
            }

            this._trigger( "stop", event, uiHash );
        },

        _change: function( event, index ) {
            if ( !this._keySliding && !this._mouseSliding ) {
                var uiHash = {
                    handle: this.handles[ index ],
                    value: this.value(),
                    min: this._valueMin(),
                    max: this._valueMax()
                };
                if ( this.options.values && this.options.values.length ) {
                    uiHash.value = this.values( index );
                    uiHash.values = this.values();
                }

                //store the last changed value index for reference when handles overlap
                this._lastChangedValue = index;

                this._trigger( "change", event, uiHash );
            }
        },

        value: function( newValue ) {
            if ( arguments.length ) {
                this.options.value = this._trimAlignValue( newValue );
                this._refreshValue();
                this._change( null, 0 );
                return;
            }

            return this._value();
        },

        values: function( index, newValue ) {
            var vals,
                newValues,
                i;

            if ( arguments.length > 1 ) {
                this.options.values[ index ] = this._trimAlignValue( newValue );
                this._refreshValue();
                this._change( null, index );
                return;
            }

            if ( arguments.length ) {
                if ( $.isArray( arguments[ 0 ] ) ) {
                    vals = this.options.values;
                    newValues = arguments[ 0 ];
                    for ( i = 0; i < vals.length; i += 1 ) {
                        vals[ i ] = this._trimAlignValue( newValues[ i ] );
                        this._change( null, i );
                    }
                    this._refreshValue();
                } else {
                    if ( this.options.values && this.options.values.length ) {
                        return this._values( index );
                    } else {
                        return this.value();
                    }
                }
            } else {
                return this._values();
            }
        },

        _setOption: function( key, value ) {
            var i,
                valsLength = 0;

            if ( key === "range" && this.options.range === true ) {
                if ( value === "min" ) {
                    this.options.value = this._values( 0 );
                    this.options.values = null;
                } else if ( value === "max" ) {
                    this.options.value = this._values( this.options.values.length - 1 );
                    this.options.values = null;
                }
            }

            if ( $.isArray( this.options.values ) ) {
                valsLength = this.options.values.length;
            }

            if ( key === "disabled" ) {
                this.element.toggleClass( "ui-state-disabled", !!value );
            }

            this._super( key, value );

            switch ( key ) {
                case "orientation":
                    this._detectOrientation();
                    this.element
                        .removeClass( "ui-slider-horizontal ui-slider-vertical" )
                        .addClass( "ui-slider-" + this.orientation );
                    this._refreshValue();

                    // Reset positioning from previous orientation
                    this.handles.css( value === "horizontal" ? "bottom" : "left", "" );
                    break;
                case "value":
                    this._animateOff = true;
                    this._refreshValue();
                    this._change( null, 0 );
                    this._animateOff = false;
                    break;
                case "values":
                    this._animateOff = true;
                    this._refreshValue();
                    for ( i = 0; i < valsLength; i += 1 ) {
                        this._change( null, i );
                    }
                    this._animateOff = false;
                    break;
                case "step":
                case "min":
                case "max":
                    this._animateOff = true;
                    this._calculateNewMax();
                    this._refreshValue();
                    this._animateOff = false;
                    break;
                case "range":
                    this._animateOff = true;
                    this._refresh();
                    this._animateOff = false;
                    break;
            }
        },

        //internal value getter
        // _value() returns value trimmed by min and max, aligned by step
        _value: function() {
            var val = this.options.value;
            val = this._trimAlignValue( val );

            return val;
        },

        //internal values getter
        // _values() returns array of values trimmed by min and max, aligned by step
        // _values( index ) returns single value trimmed by min and max, aligned by step
        _values: function( index ) {
            var val,
                vals,
                i;

            if ( arguments.length ) {
                val = this.options.values[ index ];
                val = this._trimAlignValue( val );

                return val;
            } else if ( this.options.values && this.options.values.length ) {
                // .slice() creates a copy of the array
                // this copy gets trimmed by min and max and then returned
                vals = this.options.values.slice();
                for ( i = 0; i < vals.length; i += 1) {
                    vals[ i ] = this._trimAlignValue( vals[ i ] );
                }

                return vals;
            } else {
                return [];
            }
        },

        // returns the step-aligned value that val is closest to, between (inclusive) min and max
        _trimAlignValue: function( val ) {
            if ( val <= this._valueMin() ) {
                return this._valueMin();
            }
            if ( val >= this._valueMax() ) {
                return this._valueMax();
            }
            var step = ( this.options.step > 0 ) ? this.options.step : 1,
                valModStep = (val - this._valueMin()) % step,
                alignValue = val - valModStep;

            if ( Math.abs(valModStep) * 2 >= step ) {
                alignValue += ( valModStep > 0 ) ? step : ( -step );
            }

            // Since JavaScript has problems with large floats, round
            // the final value to 5 digits after the decimal point (see #4124)
            return parseFloat( alignValue.toFixed(5) );
        },

        _calculateNewMax: function() {
            var min = this.options.min || 0,
                max = this.options.max || 100,
                step = this.options.step || 1;

            if (this.options.time) {
                max = this._toUnixTimeStamp(max);
                min = this._toUnixTimeStamp(min);

                if (step === 1) {
                    step = 60;
                }

                this.options.value = this._toUnixTimeStamp(this.options.value);
            }

            var aboveMin = Math.floor((+(max - min).toFixed(this._precision())) / step) * step;
            max = aboveMin + min;

            this.min = min;
            this.max = parseFloat( max.toFixed( this._precision() ) );
        },

        _precision: function() {
            var precision = this._precisionOf( this.options.step );
            if ( this.options.min !== null ) {
                precision = Math.max( precision, this._precisionOf( this.options.min ) );
            }
            return precision;
        },

        _precisionOf: function( num ) {
            var str = num.toString(),
                decimal = str.indexOf( "." );
            return decimal === -1 ? 0 : str.length - decimal - 1;
        },

        _valueMin: function() {
            return this.min;
        },

        _valueMax: function() {
            return this.max;
        },

        _refreshValue: function() {
            var lastValPercent, valPercent, value, valueMin, valueMax,
                oRange = this.options.range,
                o = this.options,
                that = this,
                animate = ( !this._animateOff ) ? o.animate : false,
                _set = {};

            if ( this.options.values && this.options.values.length ) {
                this.handles.each(function( i ) {
                    valPercent = ( that.values(i) - that._valueMin() ) / ( that._valueMax() - that._valueMin() ) * 100;
                    _set[ that.orientation === "horizontal" ? "left" : "bottom" ] = valPercent + "%";
                    $( this ).stop( 1, 1 )[ animate ? "animate" : "css" ]( _set, o.animate );
                    if ( that.options.range === true ) {
                        if ( that.orientation === "horizontal" ) {
                            if ( i === 0 ) {
                                that.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { left: valPercent + "%" }, o.animate );
                            }
                            if ( i === 1 ) {
                                that.range[ animate ? "animate" : "css" ]( { width: ( valPercent - lastValPercent ) + "%" }, { queue: false, duration: o.animate } );
                            }
                        } else {
                            if ( i === 0 ) {
                                that.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { bottom: ( valPercent ) + "%" }, o.animate );
                            }
                            if ( i === 1 ) {
                                that.range[ animate ? "animate" : "css" ]( { height: ( valPercent - lastValPercent ) + "%" }, { queue: false, duration: o.animate } );
                            }
                        }
                    }
                    lastValPercent = valPercent;
                });
            } else {
                value = this.value();
                valueMin = this._valueMin();
                valueMax = this._valueMax();
                valPercent = ( valueMax !== valueMin ) ? ( value - valueMin ) / ( valueMax - valueMin ) * 100 : 0;

                _set[ this.orientation === "horizontal" ? "left" : "bottom" ] = valPercent + "%";
                this.handle.stop( 1, 1 )[ animate ? "animate" : "css" ]( _set, o.animate );

                if ( oRange === "min" && this.orientation === "horizontal" ) {
                    this.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { width: valPercent + "%" }, o.animate );
                }
                if ( oRange === "max" && this.orientation === "horizontal" ) {
                    this.range[ animate ? "animate" : "css" ]( { width: ( 100 - valPercent ) + "%" }, { queue: false, duration: o.animate } );
                }
                if ( oRange === "min" && this.orientation === "vertical" ) {
                    this.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { height: valPercent + "%" }, o.animate );
                }
                if ( oRange === "max" && this.orientation === "vertical" ) {
                    this.range[ animate ? "animate" : "css" ]( { height: ( 100 - valPercent ) + "%" }, { queue: false, duration: o.animate } );
                }
            }
        },

        _handleEvents: {
            keydown: function( event ) {
                var allowed, curVal, newVal, step,
                    index = $( event.target ).data( "ui-slider-handle-index" );

                switch ( event.keyCode ) {
                    case $.ui.keyCode.HOME:
                    case $.ui.keyCode.END:
                    case $.ui.keyCode.PAGE_UP:
                    case $.ui.keyCode.PAGE_DOWN:
                    case $.ui.keyCode.UP:
                    case $.ui.keyCode.RIGHT:
                    case $.ui.keyCode.DOWN:
                    case $.ui.keyCode.LEFT:
                        event.preventDefault();
                        if ( !this._keySliding ) {
                            this._keySliding = true;
                            $( event.target ).addClass( "ui-state-active" );

                            // Add active state to value label
                            if(index == 0) {
                                $(event.target).siblings(".slider-value-label-start").addClass("slider-value-label-active");
                            } else if(index == 1) {
                                $(event.target).siblings(".slider-value-label-end").addClass("slider-value-label-active");
                            }

                            allowed = this._start( event, index );
                            if ( allowed === false ) {
                                return;
                            }
                        }
                        break;
                }

                step = this.options.step;

                if (this.options.time) {
                    if (step === 1) {
                        step = 60;
                    }
                }

                if ( this.options.values && this.options.values.length ) {
                    curVal = newVal = this.values( index );
                } else {
                    curVal = newVal = this.value();
                }

                switch ( event.keyCode ) {
                    case $.ui.keyCode.HOME:
                        newVal = this._valueMin();
                        break;
                    case $.ui.keyCode.END:
                        newVal = this._valueMax();
                        break;
                    case $.ui.keyCode.PAGE_UP:
                        newVal = this._trimAlignValue(
                                curVal + ( ( this._valueMax() - this._valueMin() ) / this.numPages )
                        );
                        break;
                    case $.ui.keyCode.PAGE_DOWN:
                        newVal = this._trimAlignValue(
                                curVal - ( (this._valueMax() - this._valueMin()) / this.numPages ) );
                        break;
                    case $.ui.keyCode.UP:
                    case $.ui.keyCode.RIGHT:
                        if ( curVal === this._valueMax() ) {
                            return;
                        }
                        newVal = this._trimAlignValue( curVal + step );
                        break;
                    case $.ui.keyCode.DOWN:
                    case $.ui.keyCode.LEFT:
                        if ( curVal === this._valueMin() ) {
                            return;
                        }
                        newVal = this._trimAlignValue( curVal - step );
                        break;
                }

                this._slide( event, index, newVal );
            },
            keyup: function( event ) {
                var index = $( event.target ).data( "ui-slider-handle-index" );

                if ( this._keySliding ) {
                    this._keySliding = false;
                    this._stop( event, index );
                    this._change( event, index );
                    $( event.target ).removeClass( "ui-state-active" );

                    // Remove active state to value-label
                    if(index == 0) {
                        $(event.target).siblings(".slider-value-label-start").removeClass("slider-value-label-active");
                    } else if(index == 1) {
                        $(event.target).siblings(".slider-value-label-end").removeClass("slider-value-label-active");
                    }
                }
            }
        },

        _transformDisplayValue: function(value) {
            if (this.options) {
                var transformedDisplayValue;

                if (this.options.price) {
                    transformedDisplayValue = uitk.i18n.currency(value, {round: true, code: this.options.currency});
                } else if (this.options.duration) {
                    transformedDisplayValue = uitk.i18n.duration(value);
                } else if (this.options.time) {
                    transformedDisplayValue = this.transformTime(value);
                } else {
                    transformedDisplayValue = value;
                }

                return transformedDisplayValue;
            }
            return value;
        },

        transformTime: function(value) {
            var date = this._toDateString(value),
                transformedTime = uitk.i18n.time(date);

            if (this.options.weekday !== undefined) {
                if (this.options.weekday === "dynamic") {
                    if (this.IsNotSameDay()) {
                        transformedTime = this.getTimeWithDayOfWeek(date);
                    }
                } else {
                    transformedTime = this.getTimeWithDayOfWeek(date)
                }
            }
            return transformedTime;
        },

        IsNotSameDay: function() {
            return !this.IsSameDay();
        },

        IsSameDay: function() {
            return moment(this._toDateString(this.min)).isSame(this._toDateString(this.max), 'day');
        },

        getTimeWithDayOfWeek: function(date) {
            return uitk.i18n.date(date,{pattern:'ddd'}) + ' ' + uitk.i18n.time(date);
        },

        _toDateString: function(unixTimeStamp) {
            if (unixTimeStamp) {
                return moment.unix(unixTimeStamp).format(this.timeFormat);
            }
        },

        _toUnixTimeStamp: function(time) {
            return moment(time).unix();
        }
    });

    function initRangeSliders() {
        $('[data-control=slider]').each(function() {
            var options = $(this).data();

            if (options.values && options.values.length > 1) {
                options.values = options.values.split(",");
            }

            // Triggered after the user slides a handle, if the value has changed; or if the value is changed programmatically via the value method.
            // There is no value in this, it is the same as "stop"
//            options.change = function(e, ui) {
//                uitk.publish('slider.change', {value: ui.value, values: ui.values, min: ui.min, max: ui.max,  handle: ui.handle});
//            };

            // Triggered on every mouse move during slide. The value provided in the event as ui.value represents the value that the handle will have as a result of the current movement.
            options.slide = function(e, ui) {
                uitk.publish('slider.slide', {value: ui.value, values: ui.values, min: ui.min, max: ui.max, handle: ui.handle});
            };

            // Triggered when the user starts sliding.
            options.start = function(e, ui) {
                uitk.publish('slider.start', {value: ui.value, values: ui.values,  min: ui.min, max: ui.max, handle: ui.handle});
            };

            // Triggered after the user slides a handle.
            options.stop = function(e, ui) {
                uitk.publish('slider.stop', {value: ui.value, values: ui.values,  min: ui.min, max: ui.max, handle: ui.handle});
            };

            //options = $.extend({}, defaults, options);

            $(this).slider(options);
        });
    }

    initRangeSliders();
    uitk.initRangeSliders = initRangeSliders;

}(jQuery, window));

/*
 *  Project: UI Toolkit Stepper Plugin
 *  Description: jQuery Stepper Plugin for use in the Egencia.com UI Toolkit
 *  Author: jobrennan@egencia.com
 */

// the semi-colon before function invocation is a safety net against concatenated
// scripts and/or other plugins which may not be closed properly.
;(function ($, window, undefined) {

    'use strict';

    // Create the defaults once
    var pluginName = 'uitk_stepper',
        disabledClass = 'disabled',
        limitClass = 'limit',
        $body = $('body'),
        defaults = {
            step: 1
        };

    /* CONSTRUCTOR */
    function Stepper(element, jsOptions) {
        uitk.utils.newModule.call(this, element, jsOptions, defaults);
    }

    Stepper.prototype = {

        constructor: Stepper,

        init: function() {
            this.value = this.currentValue();
            this.stepperUp = this.element.siblings('.stepper-up');
            this.stepperDown = this.element.siblings('.stepper-down');
            this.isDisabled = this.element.prop(disabledClass);

            if(!this.isDisabled) {
                this.toggleDisabled();
            }
        },

        stepUp: function (e) {
            if(!this.isDisabled) {
                var newVal = this.currentValue() + this.options.step;
                this.setValue(newVal);
            }
        },

        stepDown: function (e) {
            if(!this.isDisabled) {
                var newVal = this.currentValue() - this.options.step;
                this.setValue(newVal);
            }
        },

        setValue: function (val) {
            var result = this.validate(val);

            if (result !== false) {
                this.value = result;
                this.element.val(this.value);
                this.element.trigger('change'); // Spoof the native event because we don't want to prevent devs from binding to it
                this.toggleDisabled();
            }
        },

        validate: function(newValue) {
            var min = this.options.min;
            var max = this.options.max;

            // setValue() is public, so newValue could be garbage
            try {
                newValue = parseInt(newValue, 10);
            } catch (e) {
                return false
            }

            // Negative value is not allowed
            if (newValue < 0) {
                return false;
            }
            // Prevent values below min
            else if (min && newValue < min) {
                return min;
            }
            // Prevent values above max
            else if (max && newValue > max) {
                return max;
            }
            // Not negative and there's no min/max limits
            else {
                return newValue;
            }
        },

        currentValue: function () {
            return parseInt(this.element.val(), 10);
        },

        toggleDisabled: function() {
            var val = this.value;
            // Has reached min/max limits
            if (this.options.min || this.options.max) {
                if (val == this.options.min) {
                    this.stepperDown.addClass(limitClass);
                }
                else {
                    this.stepperDown.removeClass(limitClass);
                }

                if (val == this.options.max) {
                    this.stepperUp.addClass(limitClass);
                }
                else {
                    this.stepperUp.removeClass(limitClass);
                }
            }

            // Has reached zero and no min
            if (val <= 0 && !this.options.min) {
                this.stepperDown.addClass(limitClass);
            }
            else if (!this.options.min) {
                this.stepperDown.removeClass(limitClass);
            }
        },

        enable: function() {
            this.isDisabled = false;
            this.element.prop(disabledClass, this.isDisabled);
            this.toggleDisabled();
        },

        disable: function() {
            this.isDisabled = true;
            this.element.prop(disabledClass, this.isDisabled);
            this.stepperUp.addClass(disabledClass);
            this.stepperDown.addClass(disabledClass);
        }
    };

    /* JQUERY PLUGIN DEFINITION */
    uitk.utils.initPlugin(pluginName, Stepper);

    /* UI EVENTS */
    // Click up button
    $body.on('click', '.stepper-up', function (e) {
        e.preventDefault();
        var $target = $(this).prev('[data-control=stepper]');

        $target[pluginName]('stepUp', e);
    });

    // Click down button
    $body.on('click', '.stepper-down', function (e) {
        e.preventDefault();
        var $target = $(this).next('[data-control=stepper]');

        $target[pluginName]('stepDown', e);
    });

    // Permit certain keys to change the value
    $body.on('keyup', '[data-control=stepper]', function (e) {
        e.preventDefault();

        switch (e.keyCode) {
            // NOTE: Don't do left/right arrows because the user expects to move their cursor
            case 38: // Up
                $(e.target)[pluginName]('stepUp', e);
                break;
            case 40: // Down
                $(e.target)[pluginName]('stepDown', e);
                break;
            case 8: // Backspace
            case 46: // Delete
                break;
            case 48: // Numbers 0-9
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 96: // Numpad 0-9
            case 97:
            case 98:
            case 99:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
                $(e.target)[pluginName]('setValue', this.value);
                break;
            default:
                break;
        }
    });

    // White-list certain keys
    $body.on('keydown', '[data-control=stepper]', function (e) {
        switch (e.keyCode) {
            case 37: // Left
            case 39: // Right
            case 8: // Backspace
            case 46: // Delete
            case 48: // Numbers 0-9
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 96: // Numpad 0-9
            case 97:
            case 98:
            case 99:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
                break;
            default:
                e.preventDefault();
                break;
        }
    });

    // Allow user delete and type in number and check for valid input when blur
    $body.on('blur', '[data-control=stepper]', function (e) {
        if (this.value == "") this.value = 0;
        $(e.target)[pluginName]('setValue', this.value);
    });

    // Expose initAlert function for dynamic client-side rendering and stepper functions.
     function initStepper () {
        $('[data-control="stepper"]')[pluginName]('init');
     }

    initStepper();

    uitk.initStepper = initStepper;

    //uitk.stepper = {
    //    enable: function(id) {
    //        $('#' + id)[pluginName]('enable');
    //    },
    //
    //    disable: function(id) {
    //        $('#' + id)[pluginName]('disable');
    //    }
    //};

    // Expose object so it can be tested
    uitk.modules.Stepper = Stepper;
}(jQuery, window));
!(function ($) {
    "use strict";

    var $body = $('body'),
        $document = $(document),
        tooltipPlugin = 'uitk_tooltip';

    // Constructor
    var Typeahead = function (input, template, options) {
        var that = this;
        this.$element = $(input);
        this.$autocomplete = this.$element.closest('.autocomplete');
        this.template = Handlebars.templates[template]; // Template comes from the Autocomplete's data-template attribute
        this.opts = $.extend(true, {}, Typeahead.defaultOptions, options);
        this.cache = {};
        this.selected = {};
        this.ignoreNext = false; // prevents keyup?
        this.preventSelect = false;
        this.isClickOn = false;
        this.bodyClick = false;
        this.dirty = true;
        this.lastValidValue = null;

        // A hack because in Handlebars you can't use an undefined param (undefined since highlightFirst is not required) to implicitly mean 'true'
        if (this.opts.highlightFirst !== false) {
            this.opts.highlightFirst = true;
        }

        // Set up the input and listeners
        this.$element.autocomplete = 'off';

        // For gecko-based browsers, we turn autocomplete off on the <form>, not the <input>
        this.$element.closest('form').attr('autocomplete', 'off');

        // Bind user events
        this.$element
            .on('autocomplete.cleared', $.proxy(this.showDefaultResults, this))
            .on('focus', $.proxy(this.focus, this))
            .on('keydown', $.proxy(this.keyDown, this))
            .on('keyup', $.proxy(this.keyUp, this))
            .on('keypress', $.proxy(this.keyPress, this))
            .on('blur', $.proxy(this.blur, this));

        // Typeahead dialog and its listeners:
        this.$ta = $('<div class="typeahead">');

        if (this.opts.tooltip) {
            this.$element[tooltipPlugin]({
                content: this.$ta,
                template: '<div class="uitk-tooltip"><div class="tooltip-inner"></div><span class="tooltip-arrow-border"></span><span class="tooltip-arrow"></span></div>'
            });
        } else {
            this.$ta.appendTo(document.body);

            if (!uitk.isTouchDevice) {
                this.$ta
                    .on('mousedown', $.proxy(this.clickOn, this))
                    .on('mouseup', $.proxy(this.clickOff, this))
                    .on('click', $.proxy(this.click, this))
                    .on('mouseenter', 'a', $.proxy(this.mouseEnter, this));
            } else {
                this.$ta.on('click', function (e) {
                    e.preventDefault()
                });
            }
        }

        // Init the CDDs
        if (this.opts.cdd) {
            this.cdds = new EG.Models.CddCollection(); // (null, {lob: this.opts.lob}); TODO once ELS supports more than just hotel lob
            this.cdds.fetch({
				data: {
					line_of_business: this.cdds.lob,
					company_id: this.opts.companyId
				},
                processData: true
            });
        }

        // For tags input and placeholder
        if (this.opts.tags) {
            this.$tagsFakeInput = this.$autocomplete.find('.input.autocomplete-tags');
            this.$tagsGroup = this.$tagsFakeInput.find('.tag-group');
            this.tagInputPlaceholder = this.$element.attr('placeholder');

            $.each(this.$tagsGroup.find('.tag'), function(idx, tag) {
                var $tag = $(tag);

                $tag.on('click', '.autocomplete-tag-remove', $.proxy(that.removeTag, that));
                // Make sure that pre pop tags are selected
                that.selected[$tag.data('value')] = $tag.attr('id');
            });

            this.checkTagLimit();
        }

        // Attach a reference to this instance to the input
        this.$element.data('typeahead', this);

        // Sometimes the first request is too slow, so we ping the service ahead of time to help speed it up
        this.request('zzzzzz', true);
    };

    // Prototype
    Typeahead.prototype = {
        constructor: Typeahead,
        shouldBeOpen: false,

        // TODO lots of work to do around sources...
        sources: {
            flights: function(query, callback, options) {
                Typeahead.prototype.essSourcesCallback(query, callback, options);
            },
            hotels: function(query, callback, options) {
                Typeahead.prototype.essSourcesCallback(query, callback, options);
            },
            cars: function(query, callback, options) {
                Typeahead.prototype.essSourcesCallback(query, callback, options);
            },
            postalCode: function(query, callback, options) {
                // Overwriting the default options
                options.lob = Typeahead.CATEGORIES.HOTEL;
                options.features = Typeahead.FEATURES.POSTAL_CODE;
                Typeahead.prototype.essSourcesCallback(query, callback, options);
            },
            users: function(query, callback, options) {
                Typeahead.prototype.userElasticSearchCallback(query, callback, options);
            }
        },
        updateAutocompleteWithResult: function(autocompleteId, result) {
            var $this = $('#'+autocompleteId);
            if($this.length > 0) {
                if (!$this.data('typeahead')) {
                    new Typeahead($this, $this.data('template'), $this.data());
                }

                $this.data('typeahead').updateTextField(result);
            }
        },
        essSourcesCallback: function (query, callback, options) {
            var that = this;
            var ess = Typeahead.expediaSuggest(query, options);

            $.getJSON(ess.url, ess.data, function (results) {
                callback(that.remapEssResults(results));
            });
        },
        userElasticSearchCallback: function (query, callback, options) {
            // user service elastic search
            var uses = Typeahead.userServiceElasticSearch(query, options);

            if (uses) {
                $.getJSON(uses.url, uses.data, function (response) {
                    callback(response);
                });
            }
        },

        // Helps testing to expose this logic
        remapEssResults: function(results) {
            var parsedResults = [];

            if(results.sr) {
                $.each(results.sr, function (index, item) {
                    var obj = {};
                    obj.id = item.gaiaId;
                    obj.display_value = item.regionNames.displayName;
                    obj.child = item.hierarchyInfo.isChild;
                    obj.category = item.type;
                    obj.value = item.regionNames.lastSearchName;
                    obj.result = JSON.stringify(item);
                    parsedResults.push(obj);
                });
            }

            return {query: results.q, search_results: parsedResults};
        },

        dataSources: function (source, query, successCallback) {
            return this.sources[source](query, successCallback, this.opts);
        },

        startSearch: function () {
            var query = this.$element.val();

            if (this.opts.useDefaultResults && !query) {
                this.showDefaultResults();
            }
            else if (this.opts.useDefaultResults || query.length >= this.opts.minchar) {
                // Send search request
                if (!this.cache[query]) {
                    this.request(query);
                    if (this.opts.cdd) {
                        this.cdds.results = this.cdds.getAutocompleteResults(query, { max: this.opts.cdd ? parseInt(this.opts.cdd) || 3 : 3 }); // max has to be populated with an number or we won't get any cdds (the default is 3)
                    }
                }
                // Use cache
                else {
                    this.render(query, this.cache[query]);
                }
            }
            else {
                this.close();
            }
        },

        // ignoreResults is used to ping the Typeahead service on init. Apparently this makes things faster...
        request: function (text, ignoreResults) {
            var url,
                successCallback,
                data = {},
                query = encodeURIComponent(text);

            if (ignoreResults) {
                successCallback = $.noop;
            } else {
                successCallback = $.proxy(this.callback, this);
            }

            // They explicitly set the Autocomplete service url (the preferred easy way)
            if (this.opts.url) {
                url = this.opts.url.replace("{q}", query); // e.g. http://egencia.com/my-service/autocomplete/{q} or like ?query={q}
                $.getJSON(url, data, successCallback);
            }
            // They set a source, i.e. uses built-in sources or custom source
            else {
                this.dataSources(this.opts.source, query, successCallback);
            }
        },

        // Removes selected items from results to prevent selecting the same result more than once
        removeSelectedItemsFromResults: function (results) {
			var copy = results.slice();
            if (Object.keys(this.selected).length > 0) {
                // Reverse loop since we're potentially removing elements from the array, which changes indexes and causes a miss on the next iteration
                for (var i = copy.length - 1; i >= 0; i--) {
                    if (this.selected.hasOwnProperty(copy[i].value)) {
                        copy.splice(i, 1);
                    }
                }
            }

            return copy;
        },

        // Takes the JSON returned from the Autocomplete source and gets it ready to be rendered
        callback: function (data) {
            var results = data.search_results ? data.search_results : data.results; // The array with matching results
            var q = data.query; // query is what the user had typed at the time of this search

            // Add CDDs to top of list for Hotel, bottom for all others
            if (this.opts.cdd && this.cdds.results.length > 0) {
                if (this.opts.source === 'hotels' || this.opts.source === 'postalCode') {
                    Array.prototype.unshift.apply(results, this.cdds.results); // Prepends
                }
                else {
                    Array.prototype.push.apply(results, this.cdds.results); // Appends
                }
            }

            if (results && this.shouldBeOpen) {
                // Cache results for this search
                this.cache[q] = results;

                // Render
                this.render(q, results);
            }
            else {
                this.cache[q] = [];
                this.close();
            }
        },

        // Displays the results
        render: function (text, results) {
            var model;
            var resultsByCategory = {};

            // Remove results that have already been selected (only applies to Tags option)
            // Doing it here is better because it works w/ any source (e.g. cached results, new results, default results, etc.) and it will filter w/o messing with the source of the data
            if (this.opts.tags) {
                results = this.removeSelectedItemsFromResults(results);
            }

            if (this.shouldRender(text)) {
                // If there are results, prepare and render them. Otherwise show "no results" if set.
                if (results.length > 0) {

                    // Slice results if greater than max
                    if (results.length > this.opts.maxitems) {
                        results = results.slice(0, this.opts.maxitems);
                    }

                    // Loop over the results and do stuff for icons and categories
                    $.each(results, function (i, result) {
                        var category = Typeahead.CATEGORIES[result.category];
                        var categoryName = category ? category.name : 'Other'; // TODO : does this case exist? can we move the string to config?

                        if (typeof resultsByCategory[categoryName] === 'undefined') {
                            resultsByCategory[categoryName] = [];
                        }

                        if(!result.result) {
                            result.result = JSON.stringify(result);
                        }

                        resultsByCategory[categoryName].push(result);

                        if (result.child) {
                            result.icon = 'angled-arrow-right';
                        }
                        else if (category) {
                            result.icon = category.icon;
                        }

                        if (typeof result.value != "undefined") {
                            result.value = result.value.replace(/'/g, "&#39;"); // Replace apostrophes with the HTML char... why?
                        }
                    });

                    model = {
                        autocompleteId: this.opts.autocompleteId,
                        highlightFirst: this.opts.highlightFirst,
                        results: results,
                        resultsByCategory: resultsByCategory
                    };

                    this.$ta.html(this.template(model));
                    this._showTA();

                } 
                else if (this.opts.noResultsTitle || this.opts.noResultsBody) {
                    model = {
                        title: this.opts.noResultsTitle,
                        body: this.opts.noResultsBody
                    };

                    this.$ta.html(Handlebars.templates['partials/uitk/autocomplete-no-results'](model));
                    this._showTA();

                }

            }
        },
        
        _showTA: function() {
            if (this.$ta.is(':hidden')) {
                this.$ta.show().on(uitk.clickEvent, $.proxy(this.click, this));
            }

            if (this.opts.tooltip) {
                this.$element[tooltipPlugin]('show');
                this.$element[tooltipPlugin]('checkPos', true, true);
                this.$ta
                    .on('mousedown', $.proxy(this.clickOn, this))
                    .on('mouseup', $.proxy(this.clickOff, this))
                    .on('mouseenter', 'a', $.proxy(this.mouseEnter, this));
            }
            else {
                var height = parseInt(this.$element.css('height'), 10);
                var offset = this.$element.offset();
                this.$ta.css({
                    top: offset.top + height + 'px',
                    left: offset.left + 'px'
                });
                this.$ta.show();
            }
        },

        shouldRender: function (query) {
            var val = this.$element.val();
            // we may get query in encoded form so we are decoding it before comparing with value.
            if (query) {
                try {
                    query = decodeURIComponent(query);
                } catch (e) {
                    // decodeURIComponent() may throw URIError, try unescape() first,
                    // before giving up completely
                    try {
                        query = unescape(query);
                    } catch (e) {
                        // fall back to using the unprocessed query if nothing works
                        query = query;
                    }
                }
            }
            // Using defaults AND nothing has been typed yet (or they backspaced all the way) OR the input still matches the query (i.e. these results are for the current input) then ok to render
            if (this.opts.useDefaultResults && (query === "" || query === val)) {
                return true;
            }
            // Input still matches the query (i.e. these results are for the current input), ok to render
            else if (query === val) {
                return true;
            }
            else {
                return false;
            }
        },

        close: function () {
            this.removeHighlights();

            if (this.opts.tooltip) {
                this.$element[tooltipPlugin]('hide');
            } else {
                this.$ta.hide();
                this.$ta.html('');
            }

            this.shouldBeOpen = false;

            // If empty or whitespaces only, remove whitespaces and hide clear button
            if (this.$element.val().trim() === "") {
                this.$element.val("");
            }

            if (this.bodyClick) {
                this.$ta.unbind('mousedown', $.proxy(this.cancelEvent, this));
                $(document.body).unbind('mousedown', $.proxy(this.close, this));
                this.bodyClick = false;
            }
        },

        prev: function () {
            var links = this.$ta.find('a'),
                current = this.$ta.find('.highlight').removeClass('highlight'),
                i = links.index(current),
                prev = links[i - 1];

            if (prev) {
                $(prev).addClass('highlight');
            }
        },

        next: function () {
            var links = this.$ta.find('a'),
                current = this.$ta.find('.highlight').removeClass('highlight'),
                i = links.index(current),
                next = links[i + 1];

            if (next) {
                $(next).addClass('highlight');
            }
        },

        removeHighlights: function () {
            this.$ta.find('.highlight').removeClass('highlight');
        },

        findHighlightedItem: function (e) {
            var $item = this.$ta.find('.highlight');

            // Used for touch devices as they don't have hover and therefore don't highlight
            if (e && $item.length === 0) {
                $item = $(e.target).closest('.results-item').find('a');
            }
            return $item;
        },

        // Choose the currently selected item:
        selectHighlighted: function (e) {
            var $item = this.findHighlightedItem(e);

            // Clicking the Tooltip padded area can lead to an undefined $item so we check length. TODO could be dealt with earlier...
            if ($item.length) {
                if (this.opts.tags) {
                    this.addTag($item);
                }
                else {
                    this.updateTextField({
                        id: $item.data('id'),
                        value: $item.data('value')
                    });
                }

                this.close();
                this.$element.focus();
                uitk.publish('autocomplete.selected', { selectedId: $item.data('id'), result: $item.data('result'), $item: $item, $autocomplete: this.$element}); //TODO Should this go in updateTextField()? Should the event be tied to successfully updating the input?
                $item.removeClass('highlight');
                this.dirty = false;
            } else {
                this.dirty = true;
            }
        },

        updateTextField: function (result) {
            result = result || {};
            var value = result.value ? result.value.toString().replace(/&#39;/g, "'") : "";
            this.$element.val(value);
            this.$element.data('prev-selected-item-id', this.$element.data('selected-item-id'));
            this.$element.data('selected-item-id', result.id);
            this.dirty = false;
            // this.$element.data('result', result); the result should be unmapped (raw) search result here, but it is not available
        },

        // Adds a Tag to the Autocomplete's Tag Group
        addTag: function ($item) {
            var id = $item.data('id');
            var type = $item.data('type');
            var value = $item.data('value');
            var tag = Handlebars.templates['partials/uitk/tag']({id: id, type: type, value: value, label: value, autocomplete: true}); //TODO how to get a type and label?
            var $tag = $(tag);
            $tag.on('click', '.autocomplete-tag-remove', $.proxy(this.removeTag, this));

            // Add Tag and reset input
            this.selected[value] = id; // Using value as the key because the same real location can have multiple ids (they come from different categories) TODO does value need to be escaped? key names can be elaborate strings, but what are the limits if any?
            this.$tagsGroup.append($tag);
            this.$element.val("").attr('placeholder', "").select();

            // Determine if Tag limit has been reached and prevent future searching
            this.checkTagLimit();
        },

        // Removes a Tag from the Autocomplete's Tag Group and selected hash
        removeTag: function (event) {
            var $tag = event && event.target ? $(event.target).closest('.tag') : this.$tagsGroup.find('.tag').last();

            // Remove from selected hash
            this.selected[$tag.data('value')] = null;
            delete this.selected[$tag.data('value')];

            // Remove the Tag
            $tag['uitk_tag']('remove', true);

            uitk.publish('autocomplete.tag.remove', {
                tagId: $tag.attr('id'),
                tagGroupId: this.$tagsGroup.data('groupId'),
                tagType: $tag.data('type'),
                tagValue: $tag.data('value'),
                $autocomplete: this.$element
            });

            // Allow searching in case the limit was previously reached
            this.checkTagLimit();

            // Put back placeholder when tag group is empty
            // including pre-populate tags
            if(!$.trim(this.$tagsGroup.html())) {
                this.$element.attr('placeholder', this.tagInputPlaceholder);
            }

            // Keep focus on input
            this.$element[0].focus();
        },

        focus: function () {
            if(this.opts.tags && !this.$tagsFakeInput.hasClass('focus')) {
                this.$tagsFakeInput.addClass('focus');
            }
            if (this.opts.validate) {
                this.lastValidValue = this.$element.val();
            }
            this.showDefaultResults();
        },

        showDefaultResults: function () {
            if (this.opts.useDefaultResults && !this.preventSelect && this.$element.val() === "") {
                this.opts.shouldBeOpen = true;
                // There is no query, so just show the defaults (Note the empty string passed as the query arg)
                this.dataSources(this.opts.source, "", $.proxy(this.defaultResultsCallback, this));
            }
        },

        // Clears the input and publishes a cleared event
        clearInput: function () {
            var $el = this.$element;
            var val = $el.val();
            var lastId = $el.data('selected-item-id');

            $el.val("").data('selected-item-id', "").data('result', "");
            uitk.publish('autocomplete.cleared', {lastVal: val, lastId: lastId, $autocomplete: $el});
        },

        defaultResultsCallback: function (data) {
            this.render(data.query, data.search_results, "");
        },

        keyDown: function (e) {
            var keyCode;

            if (!e) e = window.event;

            keyCode = e.keyCode;

            switch (keyCode) {
                case 27: // Escape
                    this.close();
                    e.stopPropagation();
                    break;

                case 13: // Enter
                    if (this.$ta.find('.highlight').length) {
                        e.stopPropagation();
                        if (keyCode === 13) {
                            e.preventDefault();
                        }
                        this.selectHighlighted();
                    }
                    break;

                case 8: // Backspace
                    if(this.$element.val().length === 1) {
                        this.close();
                    }

                    if(this.opts.tags && this.$element.val() === "") {
                        this.removeTag();
                    }
                    break;

                case 9: // Tab
                case 39: // Right
                    if (this.$ta.find('.highlight').length) {
                        this.ignoreNext = true;
                        e.preventDefault(); // Prevents tabbing to the next input, we want the Autocomplete to stay focused after selection
                        e.stopPropagation();
                        this.selectHighlighted();
                    }
                    break;
                default:
                    // Prevent typing (e.g. max Tags have already been selected)
                    if (this.preventSelect) {
                        e.preventDefault();
                        e.stopPropagation();
                    } else {
                        this.dirty = true;
                    }
                    break;
            }
        },

        keyPress: function (e) {
            if (!e) {
                e = window.event;
            }
            if (e.keyCode == 13 /* Enter/Return */) {
                this.close();
            }
        },

        keyUp: function (e) {
            // Prevents a key up event after an item has been selected by the key board
            if (this.ignoreNext) {
                this.ignoreNext = false;
                return;
            }
            if (!e) e = window.event;
            switch (e.keyCode) {
                case 27: // Escape
                    break;

                case 37: // Left
                    this.removeHighlights();
                    break;

                case 38: // Up
                    this.prev();
                    break;

                case 40: // Down
                    this.next();
                    break;

                case 16: // Shift
                case 17: // Ctrl
                case 18: // Alt
                    break;
                case 13: // Enter/Return
                    this.shouldBeOpen = false;
                    break;

                default:
                    this.shouldBeOpen = true;
                    this.startSearch(); // Why wait for keyUp? Starting on keyDown could shave some milliseconds off the perceived speed...
                    this.dirty = true;
                    break;
            }
        },

        validateInput: function (e) {
            var theInputIsValid = true;
            if (!this.opts.tags && this.opts.validate && this.dirty) {
                theInputIsValid = false;
                var inputValue = this.$element.val();
                var inputValueLowerCase = inputValue ? inputValue.toLowerCase() : "";
                var lastValidValueLowerCase = this.lastValidValue ? this.lastValidValue.toLowerCase() : "";
                if (inputValueLowerCase !== lastValidValueLowerCase) {
                    // if value has changed, there should have been queries issued
                    var currentValidResult;
                    if (inputValue) {

                        if (this.cache[inputValue]
                            && this.cache[inputValue].length > 0) {
                            var inputValueLowerCase = inputValue.toLowerCase();
                            currentValidResult =_.find(this.cache[inputValue], function(cacheValue) {
                                return inputValueLowerCase === cacheValue.value.toString().toLowerCase();
                            })
                        }

                        if (currentValidResult) {
                            theInputIsValid = true;
                            this.updateTextField(currentValidResult);
                            var $item = this.findHighlightedItem(e);
                            uitk.publish('autocomplete.selected', {
                                selectedId: currentValidResult.id,
                                result: currentValidResult,
                                $item: $item.length ? $item : null,
                                $autocomplete: this.$element
                            });
                        }
                    }
                } else {
                    // value has not changed, still vaild
                    theInputIsValid = true;
                }
            }
            return theInputIsValid;
        },

        blur: function (e) {
            // Need a delay so we can cancel if the Autocomplete is being clicked on
            if (!this.isClickOn) {
                if(!this.validateInput(e)) {
                    this.clearInput();
                }
                this.close();
            } else {
                this.$ta.bind('mousedown', $.proxy(this.cancelEvent, this));
                $(document.body).bind('mousedown', $.proxy(this.close, this));
                this.bodyClick = true;
            }

            // For autocomplete with tags
            if(this.opts.tags) {
                this.$tagsFakeInput.removeClass('focus');
            }
        },

        clickOn: function () {
            this.isClickOn = true;
        },

        clickOff: function () {
            this.isClickOn = false;
        },

        click: function (e) {
            //this is dumb and assumes A LOT
            e.stopPropagation();
            e.preventDefault();
            this.removeHighlights();
            $(e.target).closest('a').addClass('highlight');
            this.selectHighlighted(e);
        },

        mouseEnter: function (e) {
            this.removeHighlights();
            $(e.currentTarget).addClass('highlight');
        },

        cancelEvent: function (e) {
            e.cancelBubble = true;
            if (e.stopPropagation) e.stopPropagation();
            if (e.preventDefault) e.preventDefault();
            e.cancel = true;
            e.returnValue = false;
        },

        remove: function () {
            this.$element.autocomplete = 'on';
            this.$element.closest('form').attr('autocomplete', 'on');

            this.$element
                .off('focus', $.proxy(this.showDefaultResults, this))
                .off('keydown', $.proxy(this.keyDown, this))
                .off('keyup', $.proxy(this.keyUp, this))
                .off('keypress', $.proxy(this.keyPress, this))
                .off('blur', $.proxy(this.blur, this));
            this.$ta
                .off('mousedown', $.proxy(this.mouseDown, this))
                .off('mouseup', $.proxy(this.mouseUp, this))
                .off('click', $.proxy(this.click, this))
                .off('mouseenter', 'a', $.proxy(this.mouseEnter, this))
                .remove();
        },

        checkTagLimit: function() {
            if(this.opts.taglimit) {
                if (this.$tagsGroup.find('.tag').length >= this.opts.taglimit) {
                    uitk.publish('autocomplete.taglimit', {$autocomplete: this.$element});
                    this.preventSelect = true;
                } else {
                    this.preventSelect = false;
                }
            }
        }

    };

    Typeahead.expediaSuggest = function (query, options) {
        var params = {};
        params.url = 'https://suggest.expedia.com/api/v4/typeahead/' + query + '?callback=?';
        params.data = {
            client: options.clientId,
            lob: Typeahead.LOB[options.source.toUpperCase()] || options.lob, // source is also used to specify lob
            regiontype: options.regiontype,
            locale: options.locale.replace("-", "_"),
            format: 'jsonp',
            ab: options.abtest,
            destination: options.dest,
            maxresults: options.maxitems,
            features: Typeahead.FEATURES[options.features.toUpperCase().replace("-", "_")] || Typeahead.FEATURES.TA_HIERARCHY,
            sortcriteria: Typeahead.SORTCRITERIA[options.sortcriteria.toUpperCase()] || Typeahead.SORTCRITERIA.REGIONTYPE
        };

        $.extend(params.data, options.essQueryParams);
        return params;
    };

    Typeahead.userServiceElasticSearch = function (query, options) {
        var params = {};
        // user service requirements:
        //  query length > 2
        //  the user id is defined
        if (query && query.length > 2 && options.userId) {
            params.url = options.userId ? '/user-service/v2/users/' + options.userId + '/search' : '';
            params.data = {
                query: decodeURIComponent(query),
                context: 'user-arrangees',
                company_id: options.companyId,
                include: "SELF",
                count: options.maxitems,
                return_guest_account_id: true
            };
            _.each(_.keys(params.data), function (key) {
                if (typeof params.data[key] === "undefined") {
                    delete params.data[key]; // we don't want to send ...&param=&... in the params
                }
            });
        } else {
            return null;
        }

        return params;
    };

    // Constants:
    Typeahead.REGIONTYPE = {
        AIRPORT: 'AIRPORT', //1
        CITY: 'CITY', //2
        MULTICITY: 'MULTICITY', //4
        NEIGHBORHOOD: 'NEIGHBORHOOD', //8
        POI: 'POI', //16
        ADDRESS: 'ADDRESS', //32
        METROCODE: 'METROCODE', //64
        HOTEL: 'HOTEL' //128
    };

    Typeahead.LOB = {
        'HOTELS': 'HOTELS',
        'PACKAGES': 'PACKAGES',
        'FLIGHTS': 'FLIGHTS',
        'CARS': 'CARS'
    };

    Typeahead.CATEGORIES = {
        //If you are changing name or icon for CITY make the same change to MULTICITY and NEIGHBORHOOD
        'CITY': {
            'id': 0,
            name: 'Region/City', //uitk.i18n.msg('uitk_autocomplete_region'),
            icon: 'locationalt'
        },
        //If you are changing name or icon for ATTRACTION make the same change to POI
        'ATTRACTION': {
            'id': 1,
            name: 'Attractions', //uitk.i18n.msg('uitk_autocomplete_attractions'),
            icon: 'locationalt'
        },
        'AIRPORT': {
            'id': 2,
            name: 'Airports', //uitk.i18n.msg('uitk_autocomplete_airports'),
            icon: 'flightsalt'
        },
        'HOTEL': {
            'id': 3,
            name: 'Hotels', //uitk.i18n.msg('uitk_autocomplete_hotels'),
            icon: 'hotelsalt'
        },
        'ADDRESS': {
            'id': 4,
            name: 'Address', //uitk.i18n.msg('uitk_autocomplete_address'),
            icon: 'locationalt'
        },
        'ARRANGEE_LIST': {
            'id': 5,
            name: 'Arrangee list', //uitk.i18n.msg('uitk_autocomplete_arrangee_list'),
            icon: 'traveleralt'
        },
        'OTHER_TRAVELER': {
            'id': 6,
            name: 'Other travelers', //uitk.i18n.msg('uitk_autocomplete_other_travelers'),
            icon: 'traveler'
        },
        'CUSTOM_DEST': {
            'id': 8,
            name: 'Company location', //uitk.i18n.msg('uitk_autocomplete_custom_destination'),
            icon: 'destinationalt'
        },
        'TRAINSTATION': {
            'id': 9,
            name: 'Train station', //uitk.i18n.msg('uitk_autocomplete_train_station'),
            icon: 'trainalt'
        },
        'METROSTATION': {
            'id': 10,
            name: 'Metro station', //uitk.i18n.msg('uitk_autocomplete_metro_station'),
            icon: 'trainalt'
        },
        //The icon and name should be in sync with 'Attraction'. ESS V4 returns attractions as POI
        'POI': {
            'id': 11,
            name: 'Attractions', //uitk.i18n.msg('uitk_autocomplete_attractions'),
            icon: 'locationalt'
        },
        //The icon and name should be in sync with 'City'. ESS V4 returns some cities as multicity
        'MULTICITY': {
            'id': 12,
            name: 'Region/City', //uitk.i18n.msg('uitk_autocomplete_region'),
            icon: 'locationalt'
        },
        //The icon and name should be in sync with 'City'. ESS V4 returns some cities as neighborhood
        'NEIGHBORHOOD': {
            'id': 13,
            name: 'Region/City', //uitk.i18n.msg('uitk_autocomplete_region'),
            icon: 'locationalt'
        }
    };

    Typeahead.FEATURES = {
        'TA_HIERARCHY': 'ta_hierarchy', // Default
        'NEARBY_AIRPORT': 'nearby_airport',
        'CARS_RENTAL':'cars_rental',
        'POSTAL_CODE': 'postal_code',
        'CONTEXTUAL_TA': 'contextual_ta',
        'SILVER': 'silver'
    };

    Typeahead.SORTCRITERIA = {
        'REGIONTYPE':'regiontype', // Default
        'CATEGORY':'category',
        'POPULARITY':'popularity'
    };

    // This should probably be called 'ESSOptions'
    Typeahead.defaultOptions = {
        // "Options" - to be moved into this.opts, which is a merge from Typeahead.default
        // The options are overwritten with HTML data attributes and need to be all lower case
        clientId: 'Egencia.Uitk.Autocomplete',
        minchar: 3,
        maxitems: 5,
        locale: 'en_US', // ESS requires the non-standard Java-style format DO NOT CHANGE
        abtest: '',
        mask: Typeahead.REGIONTYPE.AIRPORT + '|' + Typeahead.REGIONTYPE.CITY + '|' + Typeahead.REGIONTYPE.MULTICITY + '|' + Typeahead.REGIONTYPE.NEIGHBORHOOD + '|' + Typeahead.REGIONTYPE.POI,
        regiontype: '',
        lob: Typeahead.LOB.FLIGHTS,
        cdd: false,
        dest: false,
        tooltip: true,
        forceicon: false,
        validate: false,
        features: '',
        sortcriteria: '',
        essQueryParams: {}
    };

    // Expose Autocomplete to uitk, used for testing and exposing sources
    uitk.modules.Autocomplete = Typeahead;
    uitk.autocomplete = {
        sources: Typeahead.prototype.sources,
        callback: Typeahead.prototype.callback,
        updateAutocompleteWithResult: Typeahead.prototype.updateAutocompleteWithResult
    };

    // Listen for focuses on typeahead elements
    $body.on('focus.typeahead', '[data-control="typeahead"]', function (e) {
        e.preventDefault();
        var $this = $(this);
        if ($this.data('typeahead')) {
            return; // Has already been instantiated, so just reuse
        }
        else {
            new Typeahead($this, $this.data('template'), $this.data());
        }
    });

    // Auto-select text for easy delete
    $body.on('click', '[data-control="typeahead"]', function (e) {
        $(this).select();
    });

    // TODO abstract this into its own method
    // For autocomplete-tags to mimic input click
    $body.on('click', '.input.autocomplete-tags', function(e) {
        var $this = $(this),
            $autocompleteInput = $this.find('.autocomplete-input');

        $autocompleteInput.select();
    });

    // Stop propagation on icon click for autocomplete-tags
    $body.on('click','.autocomplete-tags-wrap .icon' , function(e) {
        e.stopPropagation();
    });

    // For autofocus feature and pre-populate tag placeholder
    $document.ready(function() {
        var $autofocus = $('[data-control="typeahead"][data-autofocus]');
        var $autoCompleteTagGroup = $('.autocomplete-tags .tag-group');

        // For removing placeholder and pre-populated tags.
        if($autoCompleteTagGroup.length > 0) {
            $.each($autoCompleteTagGroup, function(index, tagGroup) {
                var $tagGroup = $(tagGroup);

                if($.trim($tagGroup.html())) {
                    var $autoCompleteTagInput = $tagGroup.siblings('.autocomplete-tags-wrap').children('[data-control="typeahead"][data-tags]');

                    // Init first if it needs to pre-populate the tag
                    if ($autoCompleteTagInput.data('typeahead')) {
                        return; // Has already been instantiated, so just reuse
                    }
                    else {
                        new Typeahead($autoCompleteTagInput, $autoCompleteTagInput.data('template'), $autoCompleteTagInput.data());
                    }

                    // Clear the placeholder
                    $autoCompleteTagInput.attr('placeholder', "");
                }
            });
        }

        if($autofocus.length > 0) {
            $autofocus[0].focus();
        }
    });

}(window.jQuery));

/*
 *  Project: UI Toolkit Map Plugin
 *  Description: jQuery Google Map Plugin for use in the Expedia.com UI Toolkit
 *  Author: cbates@expedia.com
 */

// the semi-colon before function invocation is a safety net against concatenated
// scripts and/or other plugins which may not be closed properly.
;
(function ($, window, undefined) {
    "use strict";

    uitk.map = {};

    uitk.map.events = {
        mapAppended:         "map.appended",
        mapLoaded:           "map.loaded",
        mapClosed:           "map.closed",
        mapInteractionStart: "map.interaction.start",
        mapInteractionEnd:   "map.interaction.end",
        mapMarkersLoaded:    "map.markersLoaded",
        markerClick:         "map.marker.click",
        markerMouseOver:     "map.marker.mouseover",
        markerMouseOut:      "map.marker.mouseout",
        infowindowClosed:    "map.infowindow.closed",
        infowindowOpened:    "map.infowindow.opened"
    };

    uitk.map.templates = {
        fullscreen: Handlebars.templates["partials/uitk/uitk-map-template"],
        infowindow: Handlebars.templates["partials/uitk/map-infowindow"],
        tooltip:    Handlebars.templates["partials/uitk/map-marker-tooltip"],
        dot:        Handlebars.templates["partials/uitk/map-marker-dot"],
        cdd: 		Handlebars.templates["partials/uitk/map-marker-cdd"],
        pin:        Handlebars.templates["partials/uitk/map-marker-pin"]
    };

    uitk.map.styles = {
        egencia: [{"featureType":"road.highway","elementType":"geometry.fill","stylers":[
            {"color":"#ffffff"}
        ]},{"featureType":"road.highway","elementType":"geometry.fill","stylers":[
            {"color":"#ffffff"}
        ]},{"featureType":"road.highway","elementType":"geometry.stroke","stylers":[
            {"color":"#dde3e6"}
        ]},{"featureType":"landscape.man_made","elementType":"geometry.fill","stylers":[
            {"color":"#edecea"}
        ]},{"featureType":"landscape.natural","elementType":"geometry","stylers":[
            {"color":"#d7e0d3"}
        ]},{"featureType":"administrative.locality","elementType":"labels.text.fill","stylers":[
            {"color":"#3d3d3d"}
        ]},{"featureType":"administrative.locality","elementType":"labels.text.stroke","stylers":[
            {"color":"#ffffff"}
            ,
            {"weight":4.35}
        ]},{"featureType":"poi.government","elementType":"geometry.fill","stylers":[
            {"color":"#e0dedc"}
        ]},{"featureType":"poi.business","elementType":"geometry.fill","stylers":[
            {"color":"#e0dedc"}
        ]},{"featureType":"poi.place_of_worship","elementType":"geometry.fill","stylers":[
            {"color":"#e0dedc"}
        ]},{"featureType":"poi.park","elementType":"geometry.fill","stylers":[
            {"color":"#d7e0d3"}
        ]},{"featureType":"poi.school","elementType":"all","stylers":[
            {"visibility":"off"}
        ]},{"featureType":"poi.school","elementType":"geometry.fill","stylers":[
            {"color":"#e0dedc"}
        ]},{"featureType":"poi.medical","elementType":"geometry.fill","stylers":[
            {"color":"#e0dedc"}
        ]},{"featureType":"poi.sports_complex","elementType":"geometry.fill","stylers":[
            {"color":"#e0dedc"}
        ]},{"featureType":"road.local","elementType":"geometry.stroke","stylers":[
            {"color":"#edebe8"}
        ]},{"featureType":"road.arterial","elementType":"geometry.stroke","stylers":[
            {"color":"#dde3e6"}
        ]},{"featureType":"road.local","elementType":"geometry.fill","stylers":[
            {"color":"#ffffff"}
        ]},{"featureType":"water","elementType":"geometry.fill","stylers":[
            {"color":"#afc9d1"}
        ]},{"featureType":"administrative.neighborhood","elementType":"labels.text.fill","stylers":[
            {"color":"#363636"}
        ]},{"featureType":"administrative.neighborhood","elementType":"labels.text.stroke","stylers":[
            {"color":"#ffffff"}
            ,
            {"weight":4.3}
        ]},{"featureType":"transit.station","elementType":"geometry.fill","stylers":[
            {"color":"#e0d1af"}
        ]},{"featureType":"transit.line","elementType":"geometry","stylers":[
            {"color":"#b8b8b8"}
        ]},{"featureType":"road.highway","elementType":"labels.text.fill","stylers":[
            {"color":"#949799"}
        ]},{"featureType":"transit.station.rail","elementType":"labels.icon","stylers":[
            {"saturation":-20}
        ]},{"featureType":"poi","elementType":"labels.text.fill","stylers":[
            {"lightness":30}
        ]},{"featureType":"poi","elementType":"labels.icon","stylers":[
            {"lightness":20}
        ]},{"featureType":"poi.park","elementType":"labels","stylers":[
            {"saturation":-50}
        ]},{"featureType":"road","elementType":"labels.icon","stylers":[
            {"saturation":-36}
            ,
            {"lightness":40}
        ]},{"featureType":"road.arterial","elementType":"labels.text.fill","stylers":[
            {"color":"#757575"}
        ]},{"featureType":"transit.station.rail","elementType":"labels.text.fill","stylers":[
            {"color":"#423d42"}
        ]}]
    };

    // Downloads the Google Maps API, this has to be ready before anything will work
    uitk.map.loadApi = function (options) {
        var apiUrl,
            libs,
            config,
            callback = "uitk.map._loadDependencies";

        config = $.extend(true, uitk.map.config || {}, options || {});

        // Set users maps api
        config.mapApiUrl = config.mapApiUrl || "//maps.googleapis.com/maps/api/js?v=3&callback="+callback;
        apiUrl = config.mapApiUrl;

        // set client param.  Default to "gme-expedia"
        config.client = config.client || "gme-expedia";
        apiUrl = apiUrl + "&client=" + config.client;

        // set language param if defined
        if (config.language) {
            apiUrl = apiUrl + "&language=" + config.language;
        }

        // set up sensor param
        config.sensor = config.sensor || false;
        apiUrl = apiUrl + "&sensor=" + config.sensor;

        // add libraries if defined
        if (config.libs && config.libs.length > 0) {
            apiUrl = apiUrl + "&libraries=" + config.libs.join();
        }

        // add channel param if defined
        if (config.channel) {
            apiUrl = apiUrl + "&channel=" + config.channel;
        }

        //load api
        var script = document.createElement("script");
        script.type = "text/javascript";
        script.src = apiUrl;
        document.body.appendChild(script);
    };

    // Callback given to Google Maps and will get called automatically
    uitk.map._loadDependencies = function () {
        uitk.map.initHtmlMarker();
        initPlugin();
    };

    function initPlugin() {
        // Create the defaults once
        var pluginName = 'uitk_map',
            $body = $('body'),
            $document = $(document),
            defaults = {
                title: false,
                subtitle: false,
                center: '0,0',
                zoom: 15,
                zoomToFit: true,
                eventDebounceTime: 500,
                template: uitk.map.templates.fullscreen,
                infowindowTemplate: uitk.map.templates.infowindow,
                legend: false,
                legendContent: '',
                mapType: 'ROADMAP',
                styles: uitk.map.styles.egencia,
                maxZIndex: 5000, //if marker without type will have zIndex set at max..
                fullscreen: false
            },
            wrapperClass = 'map-overlay',
            activeClass = 'active',
            activeBodyClass = 'map-active',
            closeClass = 'map-close',
            hasTouch = Modernizr.touch,
            clickEvent = uitk.clickEvent + '.' + pluginName,
            launchHref='',
            shiftDown = false,
            infomarkerTemplate,
            focus = uitk.createFocus(),
            
            // close the map (only for fullscreen maps?)
            closeMap = function() {
                var elem = $('.' + wrapperClass + '.' + activeClass);

                elem.each(function(){
                    $(this).data('map').close();
                });
            },

            blurMap = function(){
                if ( !!launchHref ){
                    focus.blur(launchHref);
                    focus.disable();
                    uitk.unsubscribe(focus.focusEvent(),onFocusCapture);
                }
            },

            onMapAppended = function(){
                if ( !!launchHref ){
                    uitk.subscribe(focus.focusEvent(),onFocusCapture);
                    focus.setFocusContextSelector('.' + wrapperClass + '.' + activeClass);
                    focus.enable();
                    focus.firstFocus();
                }
            },

            onFocusCapture = function(topic,params){
                if ($($body).hasClass(activeBodyClass)){
                    if (!params.isContainedInContext){
                        focus.focus();
                    }
                }
            };

        /* CONSTRUCTOR */
        function Map(element, jsOptions) {
            var newOptions;
            this.element = $(element);
            //this.markers = [];
            this.gmap = null;
            jsOptions = jsOptions || {};
            newOptions = this.element.data() || {};
            this.options = $.extend(true, {}, defaults, newOptions, jsOptions);
            this.configId = this.options.configId;
            this.mapData = uitk.map.data[this.options.configId];
            this.setCustomParams();
            this.init();
        }

        Map.prototype = {
        		
            constructor: Map,

            init: function () {
                // Add data-control attr, Isn't this already there?
                this.element.attr('data-control', 'map');

                // Set up a unique ID for each map canvas
                this.canvasId = uitk.createUniqueId() + '-canvas';

                this.setWrappingElement();

                // Opens map right away if not a fullscreen map
                if (!this.options.fullscreen) {
                    this.open();
                }
            },

            appendHtml: function () {
                var that = this;

                //store reference to map on mapHtml
                this.mapHtml.data('map', this);

                //add the html to the body
                if (this.options.fullscreen) {
                    this.mapHtml.appendTo($body);
                } else {
                    this.element.prepend(this.mapHtml);
                }

                // check if the browser is in a state that is ready to load the map
                setTimeout(function () {
                    //activate map to display it
                    that.mapHtml.addClass(activeClass);
                    if (that.options.fullscreen) {
                        $body.addClass(activeBodyClass);
                    }
                    that.loadMap();
                }, 100);
            },

            setCustomParams: function () {
                if (uitk.map.data[this.configId].customParams) {
                    this.options = $.extend(true, this.options, uitk.map.data[this.configId].customParams);
                }
            },

            setWrappingElement: function () {
                var mapData = this.getMapData();

                if (this.options.fullscreen) {
                    // Add the close button data, why not in the template?
                    mapData.closeButton = {
                        type: "button",
                        classes: "btn-sub-action btn-med map-close",
                        content: I18n.t("uitk_map_close")
                    };

                    this.mapHtml = $(uitk.map.templates.fullscreen(mapData));
                } else {
                    this.mapHtml = $('<div id="' + this.canvasId + '" class="map-canvas"></div>');
                }
            },

            getMapData: function () {
                var mapData = {},
                    options = this.options;

                mapData.title = options.title;
                mapData.subtitle = options.subtitle;
                mapData.id = options.configId;
                mapData.legend = options.legend;
                mapData.legendcontent = options.legendContent;
                mapData.canvasid = this.canvasId;

                return mapData;
            },

            getData: function (property) {
                var mapConfig = uitk.map.data,
                    currentMapConfig,
                    data = {};

                if (this.options.configId) {
                    if (mapConfig) {
                        currentMapConfig = mapConfig[this.options.configId];
                        if (currentMapConfig) {
                            data = currentMapConfig[property];
                        }
                    }
                }
                else if (this.options.coordinates) {
                    data.markers = [{ coordinates: this.options.coordinates }];
                }
                return data;
            },


            loadToggleGroups: function () {
                var that = this,
                    toggleGroupDatas = that.getData('toggleGroups'),
                    toggleGroupControlFieldset = $('<fieldset class="toggleGroups"></fieldset>');
                if (toggleGroupDatas && toggleGroupDatas.length) {
                    for (var i = 0; i < toggleGroupDatas.length; i++) {
                        var toggleGroupData = toggleGroupDatas[i];
                        toggleGroupData.toggled = toggleGroupData.defaultToggled;

                        if (!that.toggleGroups) {
                            that.toggleGroups = {};
                        }
                        toggleGroupData.toggles = [];
                        that.toggleGroups[toggleGroupData.key] = toggleGroupData;

                        var checked = !!toggleGroupData.defaultToggled,
                            span = $('<span class="inline-label"></span>').text(toggleGroupData.localizedName),
                            input = $('<input type="checkbox" name="toggleGroup" />').attr('id', toggleGroupData.key).attr('value', toggleGroupData.key).prop('checked', checked),
                            label = $('<label class="check toggleGroup"></label>').attr('for', toggleGroupData.key).append(input).append(span);

                        toggleGroupControlFieldset.append(label);
                    }
                    that.gmap.controls[google.maps.ControlPosition.RIGHT_TOP].push(toggleGroupControlFieldset[0]);

                    $('#' + that.canvasId).on('change', '.toggleGroup input', function () {
                        var $this = $(this),
                            checked = $this.is(':checked'),
                            toggleKey = $this.val();
                        that.updateToggleItems(toggleKey, checked);
                    });
                }
            },

            queueToggle: function (toggleKey, item) {
                var that = this;
                if (toggleKey && that.toggleGroups[toggleKey] && item && item.setMap) {
                    that.toggleGroups[toggleKey].toggles.push(item);
                }
            },

            setInitialToggleStates: function () {
                var that = this;
                for (var toggleKey in that.toggleGroups) {
                    var toggleGroup = that.toggleGroups[toggleKey];
                    that.updateToggleItems(toggleKey, toggleGroup.toggled);
                }
            },

            updateToggleItems: function (toggleKey, toggled) {
                var that = this,
                    toggleGroup = that.toggleGroups[toggleKey],
                    toggleItems = toggleGroup.toggles,
                    mapObj = (toggled) ? that.gmap : null;
                toggleGroup.toggled = toggled;
                for (var i = 0; i < toggleItems.length; i++) {
                    if(toggleItems[i].isHtmlMarker) {
                        toggleItems[i].toggle(toggled);
                    } else {
                        toggleItems[i].setMap(mapObj);
                    }
                }
            },

            setCenter: function (coordinates) {
                this.options.center = coordinates;
                this.gmap.setCenter(this.getLatLong(this.options.center));
            },

            removeMarkers: function (markersId) {
                var count;

                if (markersId) {
                    count = this.markers[markersId].length;
                    for (var i = 0; i < count; i++) {
                        //google.maps.event.clearInstanceListeners(this.markers[markersId][i]); // deleting the array below removes all references, listener will get garbage collected
                        this.markers[markersId][i].remove();
                    }
                    uitk.map.data[this.configId].markerData[markersId].length = 0;
                    this.markers[markersId].length = 0;
                    if(this.mapOverlay) {
                    	this.mapOverlay.removeMarkers(markersId);
                    }                   
                } else {
                    if (uitk.map.data[this.configId].markerData.constructor === Array) {
                        count = this.markers.length;
                        for (var i = 0; i < count; i++) {
                            //google.maps.event.clearInstanceListeners(this.markers[i]);
                            this.markers[i].remove();
                        }
                        uitk.map.data[this.configId].markerData.length = 0;
                        this.markers.length = 0;
                    } else {
                        $.each(this.markers, function (key, markers) {
                            for (var i = 0; i < markers.length; i++) {
                                markers[i].remove();
                            }
                            markers.length = 0;
                        });
                        // TODO Delete each markerSet too or leave empty markerSets?
                    }
                    if(this.mapOverlay) {
                    	this.mapOverlay.removeMarkers();
                    }
                }
            },

            /**
             * Update markerData and load markers onto the Map
             *
             * @param markers - new markers
             * @param markersId - the markerData to add new markers to (if targeting a specific markerData obj)
             * @param options
             */
            updateMarkers: function (markers, options) {
                var options = options || {};
                options.markers = markers;

                if (options.markersId) {
                    if (options.remove) {
                        this.removeMarkers(options.markersId);
                        uitk.map.data[this.configId].markerData[options.markersId] = markers;
                    } else {
                        Array.prototype.push.apply(uitk.map.data[this.configId].markerData[options.markersId], markers);
                    }
                }
                else {
                    if (options.remove) {
                        this.removeMarkers();
                        uitk.map.data[this.configId].markerData = markers;
                    } else {
                        Array.prototype.push.apply(uitk.map.data[this.configId].markerData, markers);
                    }
                }

                this.loadMarkers(options);
            },

            updateMarker: function(marker, options) {
                var options = options || {};
                marker.bounce(options.bounce);
            },

            // Loops through markerData and creates the Markers
            loadMarkers: function (options) {
                var that = this,
                    markerObj,
                    options = options || {},
                    zoomToFit,
                    LatLngList = [],
                    htmlMarkers = [];

                // New markers to add
                if (options.markers) {
                    markerObj = options.markers;
                }
                // Initial markers
                else {
                    markerObj = uitk.map.data[this.configId].markerData;
                }
                
                this.currMarkerData = null;

                if (markerObj.constructor === Array) {
                    that.markers = that.markers || [];
                    $.each(markerObj, function (i, markerData) {
                    	var marker = that.addMarker(markerData);
                    	if (options.markersId) {
                            that.markers[options.markersId].push(marker);
                        }
                        else {
                            that.markers.push(marker);
                        }
                    	if(marker.isHtmlMarker) {
                    		htmlMarkers.push(marker); // if marker could not be be added to a map
                    	}
                        var coordinates = that.getLatLong(markerData.coordinates);
                        if (coordinates) LatLngList.push(coordinates);
                    });
                }
                else {
                    that.markers = {};
                    $.each(markerObj, function (key, markers) {
                        that.markers[key] = that.markers[key] || [];
                        $.each(markers, function (i, markerData) {
                        	var marker = that.addMarker(markerData);
                        	that.markers[key].push(marker);
                        	if(marker.isHtmlMarker) {
                        		htmlMarkers.push(marker); // if marker could not be be added to a map
                        	}
                            var coordinates = that.getLatLong(markerData.coordinates);
                            //TODO this puts ALL markers in and causes trouble when we want only one collection to have zoomToFit
                            if (coordinates) LatLngList.push(coordinates);
                        });
                        
                    });
                }
                
            	if(!that.mapOverlay) {
            		that.mapOverlay = new uitk.map.MapOverlay({map: this.gmap, markersId: options.markersId, markers: htmlMarkers});
            	}  else {
            		that.mapOverlay.updateMarkers(({markersId: options.markersId, markers: htmlMarkers}));
            	}
                
                // Zoom to fit all markers if the option has been set and when doing the inital load
                // NOTE: when updating markers zoomToFit would only apply for the new markers being added
                if (options.zoomToFit != null) {
                    zoomToFit = options.zoomToFit;
                }
                else {
                    zoomToFit = this.options.zoomToFit;
                }

                if (zoomToFit) {
                    //  Create a new viewpoint bound
                    this.bounds = new google.maps.LatLngBounds();
                    //  Go through each...
                    for (var i = 0, LtLgLen = LatLngList.length; i < LtLgLen; i++) {
                        //  And increase the bounds to take this point
                        this.bounds.extend(LatLngList[i]);
                    }
                    //  Fit these bounds to the map
                    this.gmap.fitBounds(this.bounds);
                }

            },

            /**
             * Adds a single marker to the map, binds some Marker events,
             * and depending on marker implementation may add it to the map
             * @param markerData
             * @returns {*}
             */
            addMarker: function (markerData) {
                var that = this,
                    marker,
                    coordinates = that.getLatLong(markerData.coordinates),
                    type = markerData.type,
                    template = uitk.map.templates[type] || uitk.map.templates.tooltip,
                    strippedTitle;

                if(typeof coordinates !== 'undefined') {
                    // Pick the kind of marker this one should be, defaults to Google's red pin
                    switch (type) {
                        case 'tooltip':
                        case 'dot':
                        case 'cdd':
                        case 'pin':
                            marker = new uitk.map.HtmlMarker({
                                id: markerData.id,
                                content: markerData.content,
                                position: coordinates,
                                zIndex: markerData.zIndex,
                                hover: true,
                                labelContent: template(markerData)
                            });                         
                            marker.hover = true; // why here and not above?
                            break;
                        case 'custom':
                            marker = that._customMarker();
                            break;
                        default:
                            if (typeof markerData.name != 'undefined') {
                                // strip html and line breaks for hover tooltip
                                strippedTitle = markerData.name.replace(/(<([^>]+)>)/ig, "").replace(/(\r\n|\n|\r)/gm, "");
                            }
                            marker = new uitk.map.DefaultMarker({
                                map: this.gmap,
                                title: strippedTitle,
                                content: markerData.content,
                                position: coordinates,
                                hover: true,
                                zIndex: (markerData.zIndex) ? markerData.zIndex : that.options.maxZIndex
                            });
                    }
                    
                    /* Will automatically open infowindow (this is buggy)
                    if (markerData.showContent) {
                        that.showMarkerInfo(marker, markerData);
                    }*/

                    // Event listener when marker is clicked
                    
                    marker.addListener('click', function () {
                        uitk.publish(uitk.map.events.markerClick, {map: that, marker: markerData});
                        that.showMarkerInfo(marker, markerData);
                    });

                    // Event listeners for changing icons
                    if (marker.hover) {
                        marker.addListener('mouseover', function () {
                            uitk.publish(uitk.map.events.markerMouseOver, {map: that, marker: markerData});
                        });

                        marker.addListener( 'mouseout', function () {
                            uitk.publish(uitk.map.events.markerMouseOut,  {map: that, marker: markerData});
                        });
                    }

                    // Toggle group?
                    var toggleKey = markerData.toggleGroup;
                    if (toggleKey) {
                        that.queueToggle(toggleKey, marker);
                    }

                    // The z-index for each marker in the list will move down by one (doesn't Google do this?)
                    that.options.maxZIndex--;
                }

                return marker;
            },

            _customMarker: function (markerType, letter) {
                var marker = {},
                    corePath = uitk.corePath();
                marker.icon = {};
                marker.shadow = {};
                marker.letter = letter;
                switch (markerType) {
                    case 'blue-pin':
                        marker.icon.url = corePath + 'images/blu-marker.png';
                        break;
                    case 'red-dot':
                        marker.icon.url = corePath + 'images/reddot.png';
                        marker.icon.size = new google.maps.Size(10, 10);
                        marker.icon.anchor = new google.maps.Point(5, 5);
                        break;
                    case 'red-pin':
                        marker.icon.url = corePath + 'images/red-marker.png';
                        if (typeof marker.letter === 'string' && marker.letter.length) {
                            marker.icon.url = 'http://mt.google.com/vt/icon?psize=16&font=fonts/Roboto-Regular.ttf&color=ff330000&name=icons/spotlight/spotlight-waypoint-b.png&ax=44&ay=48&scale=1&text=' + marker.letter;
                        }
                        break;
                    case 'grey-pin':
                        marker.icon.url = corePath + 'images/grey-marker.png';
                        break;
                    case '':
                    case undefined:
                        marker.icon.url = corePath + 'images/red-marker.png';
                        break;
                    default:
                        var size = markerType.size,
                            anchor = markerType.anchor,
                            url = markerType.url;
                        if (url) {
                            if (size) {
                                marker.icon.size = new google.maps.Size(size.x, size.y);
                            }

                            if (anchor) {
                                marker.icon.anchor = new google.maps.Point(anchor.x, anchor.y);
                            }
                            marker.icon.url = url;
                        } else {
                            marker.icon.url = corePath + 'images/red-marker.png';
                        }
                }
                return marker;
            },

            showMarkerInfo: function (marker, markerData) {

                var that = this,
                    html = '',
                    title,
                    content,
                    context,
                    width;

                // check if marker was found
                if (marker && markerData) {

                    title = markerData.name;
                    content = markerData.content;
                    width = markerData.width;

                    // only open if the markerData has content
                    if (typeof content != 'undefined') {

                        if (!infomarkerTemplate) {
                            infomarkerTemplate = this.options.infowindowTemplate;
                        }
                        try{
                            context = {
                                title:title,
                                secondaryContent:content
                            };
                            if (!!width ){
                                context.markerWidth = width;
                            }
                            html = infomarkerTemplate(context);
                        }catch(e){
                            html="";
                        }

                        that.infowindow.setContent(html);
                        that.infowindow.open(that.gmap, marker);

                        uitk.publish(uitk.map.events.infowindowOpened, {marker: markerData});

                        // set the currMarkerData value so that it can be returned when the infoWindow is closed
                        that.currMarkerData = markerData;

                        // publish map.marker.opened topic
                        this.currMarkerData = markerData;
                    }
                }
            },

            closeMarkerInfo: function () {

                this.infowindow.close();
                // publish if currMarkerData is not null
                if (uitk && uitk.publish && (this.currMarkerData != null)) {
                    uitk.publish(uitk.map.events.infowindowClosed, this.currMarkerData);
                }
                // then set the currMarkerData value to null
                this.currMarkerData = null;
            },

            loadPolygons: function () {
                var that = this,
                    polygonData = that.getData('polygonData'),
                    polygonList = [];

                if (polygonData) {
                    var polygons = polygonData.polygons;

                    if (polygons && $.isArray(polygons)) {
                        for (var i = 0; i < polygons.length; i++) {
                            var polygon = polygons[i],
                                googlePolygon = that.loadPolygon(polygon);
                            polygonList.push(googlePolygon);
                        }
                    }
                }
                that.polygonList = polygonList;
            },

            loadPolygon: function (strPolygon) {
                var that = this,
                    strLatLngs = strPolygon.latLongs,
                    googleLatLngs = that.convertPolygonLatLngsToGoogle(strLatLngs),
                    googlePolygon = that.buildGooglePolygon(strPolygon, googleLatLngs);

                var toggleKey = strPolygon.toggleGroup;
                if (toggleKey) {
                    that.queueToggle(toggleKey, googlePolygon);
                }

                google.maps.event.addListener(googlePolygon, "mouseover", function(){
                    if(!this.active) {
                        this.setOptions(this.hoverStyle);
                    }
                });

                google.maps.event.addListener(googlePolygon, "mouseout", function(){
                    if(!this.active) {
                        this.setOptions(this.defaultStyle);
                    }
                });

                google.maps.event.addListener(googlePolygon, "click", function(){
                    var active = !this.active;
                    that.clearPolygonActiveState();
                    this.active = active;
                    that.togglePolygonActiveState(this);
                    that.openPolygonInfo(this);
                });

                return googlePolygon;
            },

            convertPolygonLatLngsToGoogle: function (strLatLngs) {
                var that = this,
                    googleLatLngs;
                if (strLatLngs && $.isArray(strLatLngs)) {
                    googleLatLngs = [];
                    for (var i = 0; i < strLatLngs.length; i++) {
                        var strLatLng = strLatLngs[i],
                            googleLatLng = that.getLatLong(strLatLng);
                        if (googleLatLng) {
                            googleLatLngs.push(googleLatLng);
                        }
                    }
                }
                return googleLatLngs;
            },

            buildGooglePolygon: function (strPolygon, googleLatLngs) {
                var that = this,
                    defaultStyle,
                    hoverStyle,
                    activeStyle,
                    googlePolygonParams,
                    googlePolygon;
                if (strPolygon && googleLatLngs && $.isArray(googleLatLngs) && googleLatLngs.length > 0) {
                    defaultStyle = that.buildPolygonStyleObj(strPolygon);
                    hoverStyle = that.buildPolygonStyleObj(strPolygon.hoverStyle, defaultStyle);
                    activeStyle = that.buildPolygonStyleObj(strPolygon.activeStyle, defaultStyle);
                    googlePolygonParams = $.extend({map: that.gmap, paths: googleLatLngs}, defaultStyle);
                    googlePolygon = new google.maps.Polygon(googlePolygonParams);
                    googlePolygon.defaultStyle = defaultStyle;
                    googlePolygon.hoverStyle = hoverStyle;
                    googlePolygon.activeStyle = activeStyle;
                    googlePolygon.content = strPolygon.content;
                }
                return googlePolygon;
            },

            buildPolygonStyleObj: function (overrides, defaults) {
                var s = {
                        strokeColor: '#FFF',
                        strokeOpacity: 1,
                        strokeWeight: 1,
                        fillColor: '#FFF',
                        fillOpacity: 0.5
                    },
                    d = (defaults) ? {
                        strokeColor: defaults.strokeColor,
                        strokeOpacity: defaults.strokeOpacity,
                        strokeWeight: defaults.strokeWeight,
                        fillColor: defaults.fillColor,
                        fillOpacity: defaults.fillOpacity
                    } : {},
                    o = (overrides) ? {
                        strokeColor: overrides.strokeColor,
                        strokeOpacity: overrides.strokeOpacity,
                        strokeWeight: overrides.strokeWeight,
                        fillColor: overrides.fillColor,
                        fillOpacity: overrides.fillOpacity
                    } : {},
                    output = $.extend(s, d, o);
                return output;
            },

            openPolygonInfo: function(polygon) {
                var method = 'removeClass',
                    html;
                if(polygon.content) {
                    if (polygon.active) {
                        html = polygon.content;
                        method = 'addClass';
                    }
                    $('#polygonLegend').html(html);
                    $('.map-overlay')[method]('polygon-legend');
                    google.maps.event.trigger(this.gmap, 'resize');
                }
            },

            togglePolygonActiveState: function(polygon) {
                var that = this,
                    styles = (polygon.active) ?  polygon.activeStyle : polygon.hoverStyle;
                polygon.setOptions(styles);
            },

            clearPolygonActiveState: function() {
                var that = this;
                if(that.polygonList) {
                    for(var i=0; i<that.polygonList.length; i++) {
                        var polygon = that.polygonList[i];
                        polygon.active = false;
                        polygon.setOptions(polygon.defaultStyle);
                    }
                }
            },

            loadMap: function () {

                var that = this,
                    latlong = this.getLatLong(this.options.center),
                    options = this.options,
                    mapOptions,
                    mapData,
                    mapChangeEndCallback;

                var mapChangeEnd = function (options) {
                    that.mapInteractionCallback(uitk.map.events.mapInteractionEnd, options);
                    // Re-bind event listener for zoom start
                    //google.maps.event.addListenerOnce(that.gmap, 'zoom_changed', that.mapInteractionCallback(uitk.map.events.mapInteractionStart));
                };

                if (options.eventDebounceTime && options.eventDebounceTime > 0) {
                    mapChangeEndCallback = _.debounce(mapChangeEnd, options.eventDebounceTime);
                }
                else {
                    mapChangeEndCallback = mapChangeEnd;
                }

                mapOptions = {
                    center: latlong,
                    zoom: options.zoom,
                    mapTypeId: google.maps.MapTypeId[options.mapType],
                    styles: options.styles,
                    // Google Map UI defaults
                    disableDefaultUI: true,
                    zoomControl: true,
                    zoomControlOptions: {
                        style: google.maps.ZoomControlStyle.SMALL,
                        position: google.maps.ControlPosition.LEFT_BOTTOM
                    }
                };

                // disable zoom/pan options for map when on touch device and zoomed in
                if (uitk.isTouchDevice && options.fullscreen) {
                    var zoomRatio = document.documentElement.clientWidth / window.innerWidth;
                    if (zoomRatio > 1.01) {
                        mapOptions.draggable = false;
                        mapOptions.scrollwheel = false;
                    }
                }

                // extend mapOptions if any have been added to the map config data
                if (options.configId) {
                    mapData = uitk.map.data[options.configId];
                    if (mapData && typeof mapData.mapOptions === 'function') {
                        $.extend(mapOptions, mapData.mapOptions());
                    }
                }

                this.gmap = new google.maps.Map(document.getElementById(this.canvasId), mapOptions);
                // push Map object to data to expose google map and markers
                uitk.map.data[options.configId].module = this;
                this.infowindow = new google.maps.InfoWindow({maxWidth: options.infoWindowMaxWidth || 400});
                this.loadToggleGroups();
                this.loadMarkers();
                this.loadPolygons();
                this.setInitialToggleStates();
                uitk.mapObj = this.gmap;

                //publish that map has been appended to the page (and loaded)
                uitk.publish(uitk.map.events.mapAppended, this);

                // keep the map centered when the window is resized
                // Use debounce for performance rather than the native browser resize
                uitk.subscribe('debounced.resize', function () {
                    var latlong;
                    if (options.zoomToFit) {
                        that.gmap.fitBounds(that.bounds);
                    } else {
                        latlong = that.getLatLong(that.options.center);
                        that.gmap.setCenter(latlong);
                    }
                });

                // Event listener when infowindow is closed
                google.maps.event.addListener(this.infowindow, 'closeclick', function () {
                    that.closeMarkerInfo();
                });

                // Add event listener to close infowindow when map is clicked
                google.maps.event.addListener(this.gmap, 'click', function () {
                    that.closeMarkerInfo();
                });

                // Add event listeners for pan/zoom

                // Google's fitBounds() causes a zoom_changed event to fire that we don't want to listen to
                // so we listen once the first time, ignore it, and re-bind to listen to all future zoom_changed events.
                if (this.options.zoomToFit) {
                    google.maps.event.addListenerOnce(this.gmap, 'zoom_changed', function () {
                        // Google fires this after zoomToFit and we want to ignore it
                        // Re-bind for all future zoom events
                        google.maps.event.addListenerOnce(that.gmap, 'zoom_changed', function () {
                            that.mapInteractionCallback(uitk.map.events.mapInteractionStart, {eventname: "zoom_changed"}); // This gets us the first zoom start, no other zoom starts are accessible
                        });
                        google.maps.event.addListener(that.gmap, 'zoom_changed', function () {
                            mapChangeEndCallback({eventname: "zoom_changed"});
                        });
                    });
                }
                else {
                    google.maps.event.addListenerOnce(this.gmap, 'zoom_changed', function () {
                        that.mapInteractionCallback(uitk.map.events.mapInteractionStart, {eventname: "zoom_changed"});
                    });
                    google.maps.event.addListener(this.gmap, 'zoom_changed', function () {
                        mapChangeEndCallback({eventname: "zoom_changed"});
                    });
                }

                google.maps.event.addListener(this.gmap, 'dragstart', function () {
                    that.mapInteractionCallback(uitk.map.events.mapInteractionStart, {eventname: "dragstart"});
                });

                google.maps.event.addListener(this.gmap, 'dragend', function () {
                    mapChangeEndCallback({eventname: "dragend"});
                });
            },

//            mapChangeEnd: function () {
//                this.mapInteractionCallback(uitk.map.events.mapInteractionEnd);
//
//                // Re-bind event listener for interaction start
//                google.maps.event.addListenerOnce(this.gmap, 'zoom_changed', this.mapInteractionCallback(uitk.map.events.mapInteractionStart));
//                google.maps.event.addListenerOnce(this.gmap, 'dragstart', this.mapInteractionCallback(uitk.map.events.mapInteractionStart));
//            },

            mapInteractionCallback: function (uitkEvent, options) {
                var bounds = this.gmap.getBounds();
                var neBounds = [bounds.getNorthEast().lat(), bounds.getNorthEast().lng()];
                var swBounds = [bounds.getSouthWest().lat(), bounds.getSouthWest().lng()];
                var center = [bounds.getCenter().lat(), bounds.getCenter().lng()];
                var zoom = this.gmap.getZoom();
                var googleEventName = options.eventname || "";

                uitk.publish(uitkEvent, {neBounds: neBounds, swBounds: swBounds, center: center, zoom: zoom, googleEventName: googleEventName});
            },

            open: function (focusOnClose) {
                var that = this;
                if ( !!focusOnClose ){
                    launchHref = (focusOnClose instanceof jQuery) ? focusOnClose : $(focusOnClose);
                }

                if (uitk.isTouchDevice) {
                    that.scrollPosition = $document.scrollTop();
                }

                that.appendHtml();
            },

            // close the map
            close: function () {
                var that = this,
                    scrollPosition = this.scrollPosition || 0;

                //publish map.close and include this map object so it can be referenced from the subscriber.
                if (uitk && uitk.publish) {
                    uitk.publish('map.close', that);
                }

                //reset scrollposition if it is a fullscreen map
                if (that.options.fullscreen) {
                    $body.removeClass(activeBodyClass);
                    if (uitk.isTouchDevice) {
                        $document.scrollTop(this.scrollPosition);
                    }
                }

                //close map
                this.mapHtml.removeClass(activeClass);

                //remove map from dom
                setTimeout(function () {
                    that.mapHtml.remove();
                    uitk.mapObj = null;
                    delete uitk.mapObj;
                    blurMap();
                }, 600);
            },

            getLatLong: function (obj) {
                var latLng, latitude, longitude, splitChar = ',';

                // String
                if (typeof obj === 'string' && obj.indexOf(splitChar) > 0) {
                    var latlongArray = obj.split(splitChar);
                        latitude = parseFloat(latlongArray[0]);
                    longitude = parseFloat(latlongArray[1]);
                }
                // Array
                else if (Object.prototype.toString.call(obj) === '[object Array]' && obj.length === 2) {
                    latitude = parseFloat(obj[0]);
                    longitude = parseFloat(obj[1]);
                }

                if (typeof latitude === 'number' && !isNaN(latitude) && typeof longitude === 'number' && !isNaN(longitude)) {
                    latLng = new google.maps.LatLng(latitude, longitude);
                }

                return latLng;
            }
        };


        /* JQUERY PLUGIN DEFINITION */
        $.fn[pluginName] = function () {

            var options, method, arg;

            if (typeof arguments[0] === 'object') {
                options = arguments[0];
                method = arguments[1];
                arg = arguments[2];
            } else {
                options = {};
                method = arguments[0];
                arg = arguments[1];
            }

            return this.each(function () {
                if (!$.data(this, pluginName)) {
                    $.data(this, pluginName, new Map(this, options));
                }
                if (typeof method === 'string') {
                    $.data(this, pluginName)[method](arg);
                }
            });
        };

        //init country code select on page load
        $('[data-control="map"]')[pluginName]();

        /* EVENT LISTENERS (delegated to body) */
        // register an event handler on the overlay map link
        $body.on(clickEvent, '[data-control="map"][data-fullscreen="true"]', function (e) {
            var $target = launchHref = $(e.target).closest('[data-control="map"]');
            e.preventDefault();
            $target[pluginName]('open');
        });

        //close map when close button is clicked
        $body.on(clickEvent, '.' + closeClass, function (e) {
            e.preventDefault();
            closeMap();
        });

        //close map when Esc is pressed
        $document.on('keydown', function (e) {
            if (e.keyCode === 27) {
                closeMap();
            }
        });

        //helper functions available in uitk.map
        uitk.map.create = function (options,focusOnClose) {
            var newMap = new Map(null, options);

            newMap.open(focusOnClose);

            //returns the new map's js object
            return newMap;
        };

        uitk.subscribe(uitk.map.events.mapAppended, onMapAppended);
        uitk.map.close = closeMap;

        // publish a topic when initPlugin() completes
        if (uitk && uitk.publish) {
            uitk.publish(uitk.map.events.mapLoaded);
        }

        //expose object so it can be tested without DOM
        uitk.modules.Map = Map;

    } // end initPlugin()

}(jQuery, window));
;
uitk.map.initHtmlMarker = function() {
    /**
     * Wrapper for a default Google Marker object with some convenience methods used by uitk.map plugin
     */
    uitk.map.DefaultMarker = function () {
        google.maps.Marker.apply(this, arguments);
    };

    uitk.map.DefaultMarker.prototype = new google.maps.Marker();

    /**
     * Removes marker from the map
     * @public
     */
    uitk.map.DefaultMarker.prototype.remove = function () {
        this.setMap(null);
    };

    uitk.map.DefaultMarker.prototype.addListener = function (eventName, callback) {
        google.maps.event.addListener(this, eventName, callback);
    };

    /**
     * Custom Marker that can be added to a map using {uitk.map.MapOverlay}.
     * Not a true {google.maps.Marker}, so it cannot be used with MarkerClusterer (since setMap() is a dummy method),
     * but can be used with widgets like {google.maps.InfoWindow} that expect {google.map.MVCObject}.
     * Currently used to display 'dot' and 'tooltip' markers on the map.
     */
    uitk.map.HtmlMarker = function (options) {

        options = options || {};
        options.labelContent = options.labelContent || "";
        options.labelAnchor = options.labelAnchor || new google.maps.Point(0, 25);
        options.labelClass = options.labelClass || "marker-wrapper";
        options.icon = "../../images/transparent.png";
        options.optimized = false; // Optimized rendering is not supported, Google says, "Disable optimized rendering...when each marker must be rendered as a separate DOM element (advanced usage only)."

        if (typeof options.clickable === "undefined") {
            options.clickable = true;
        }

        $.extend(this, this, options);

        this.contentSet = false;

        this.anchorPoint = new google.maps.Point(0, -25);

        this.labelDiv_ = document.createElement("div");
        this.labelDiv_.style.cssText = "position: absolute; overflow: hidden;";
        this.eventDiv_ = document.createElement("div");
        this.eventDiv_.style.cssText = this.labelDiv_.style.cssText;

        // This is needed for proper behavior on MSIE:
        this.eventDiv_.setAttribute("onselectstart", "return false;");
        this.eventDiv_.setAttribute("ondragstart", "return false;");
    };

    /**
     * Extends MVCObject so that it can be used with map APIs like {google.maps.InfoWindow#open()}
     */
    uitk.map.HtmlMarker.prototype = new google.maps.MVCObject();

    /**
     * lat/lng position of the marker (used for calculating screen position)
     * @returns {google.maps.LatLng}
     */
    uitk.map.HtmlMarker.prototype.getPosition = function () {
        return this.position;
    };

    /**
     * Point for calculating the pixelOffset (see InfoWindowOptions) of the info window
     * @see https://developers.google.com/maps/documentation/javascript/reference#InfoWindow
     * @returns {google.maps.Point}
     */
    uitk.map.HtmlMarker.prototype.getAnchorPoint = function () {
        return this.anchorPoint;
    };

    /**
     * Adds marker to given overlay (represented by event and image layers)
     * @param imageOverlay
     * @param mouseOverlay
     */
    uitk.map.HtmlMarker.prototype.addTo = function (imageOverlay, mouseOverlay) {
        var self = this;
        var cAbortEvent = function (e) {
            if (e.preventDefault) {
                e.preventDefault();
            }
            e.cancelBubble = true;
            if (e.stopPropagation) {
                e.stopPropagation();
            }
        };

        imageOverlay.appendChild(this.labelDiv_);
        mouseOverlay.appendChild(this.eventDiv_);

        this.listeners_ = [
            google.maps.event.addDomListener(this.eventDiv_, "mouseover", function (e) {
                google.maps.event.trigger(self, "mouseover", e);
            }),
            google.maps.event.addDomListener(this.eventDiv_, "mouseout", function (e) {
                google.maps.event.trigger(self, "mouseout", e);
            }),
            google.maps.event.addDomListener(this.eventDiv_, "click", function (e) {
                google.maps.event.trigger(self, "click", e);
                cAbortEvent(e); // Prevent click from being passed on to map
            }),
            google.maps.event.addDomListener(this.eventDiv_, "dblclick", function (e) {
                google.maps.event.trigger(self, "dblclick", e);
                cAbortEvent(e); // Prevent map zoom when double-clicking on a label
            })
        ];
    };

    uitk.map.HtmlMarker.prototype.toggle = function (visible) {
        $(this.labelDiv_).attr('hidden', !visible);
        $(this.eventDiv_).attr('hidden', !visible);
    };

    uitk.map.HtmlMarker.prototype.remove = function () {
        var i;
        this.labelDiv_.parentNode.removeChild(this.labelDiv_);
        this.eventDiv_.parentNode.removeChild(this.eventDiv_);

        // Remove event listeners:
        for (i = 0; i < this.listeners_.length; i++) {
            google.maps.event.removeListener(this.listeners_[i]);
        }

        this.contentSet = false;
    };

    uitk.map.HtmlMarker.prototype.addListener = function (eventName, callback) {
        google.maps.event.addListener(this, eventName, callback);
    };

    uitk.map.HtmlMarker.prototype.bounce = function (bounce) {
        var $elem = $(this.labelDiv_);
        if (bounce) {
            $elem.addClass("marker-highlight");
        } else {
            $elem.removeClass("marker-highlight");
        }
    };

    /**
     * Draws the label on the map.
     * @private
     */
    uitk.map.HtmlMarker.prototype.draw = function (projection) {
        if (!this.contentSet) {
            this.setContent();
            this.setStyles();
            this.contentSet = true;
        }
        this.updatePosition(projection);
    };

    /**
     * Sets the content of the label.
     * The content can be plain text or an HTML DOM node.
     * @private
     */
    uitk.map.HtmlMarker.prototype.setContent = function () {
        var content = this.labelContent;
        this.labelDiv_.innerHTML = content;
        this.eventDiv_.innerHTML = this.labelDiv_.innerHTML;
    };


    /**
     * Sets the style of the label by setting the style sheet and applying
     * other specific styles requested.
     * @private
     */
    uitk.map.HtmlMarker.prototype.setStyles = function (projection) {
        this.labelDiv_.className = this.labelClass;
        this.eventDiv_.className = this.labelDiv_.className;
        this.setMandatoryStyles();
    };

    /**
     * set
     * @param projection
     */
    uitk.map.HtmlMarker.prototype.updatePosition = function (projection) {
        this.setAnchor();
        this.setPosition(undefined, projection); // This also updates z-index, if necessary.
    };

    /**
     * Sets the mandatory styles to the DIV representing the label as well as to the
     * associated event DIV. This includes setting the DIV position, z-index, and visibility.
     * @private
     */
    uitk.map.HtmlMarker.prototype.setMandatoryStyles = function () {
        this.labelDiv_.style.position = "absolute";
        this.labelDiv_.style.overflow = "hidden";
        // Make sure the opacity setting causes the desired effect on MSIE:
        if (typeof this.labelDiv_.style.opacity !== "undefined" && this.labelDiv_.style.opacity !== "") {
            this.labelDiv_.style.MsFilter = "\"progid:DXImageTransform.Microsoft.Alpha(opacity=" + (this.labelDiv_.style.opacity * 100) + ")\"";
            this.labelDiv_.style.filter = "alpha(opacity=" + (this.labelDiv_.style.opacity * 100) + ")";
        }

        this.eventDiv_.style.position = this.labelDiv_.style.position;
        this.eventDiv_.style.overflow = this.labelDiv_.style.overflow;
        this.eventDiv_.style.opacity = 0.01; // Don't use 0; DIV won't be clickable on MSIE
        this.eventDiv_.style.MsFilter = "\"progid:DXImageTransform.Microsoft.Alpha(opacity=1)\"";
        this.eventDiv_.style.filter = "alpha(opacity=1)"; // For MSIE
        this.eventDiv_.style.cursor = "pointer";
    };

    /**
     * Sets the anchor point of the label.
     * @private
     */
    uitk.map.HtmlMarker.prototype.setAnchor = function () {
        var anchor = this.labelAnchor;
        this.labelDiv_.style.marginLeft = -anchor.x + "px";
        this.labelDiv_.style.marginTop = -anchor.y + "px";
        this.eventDiv_.style.marginLeft = -anchor.x + "px";
        this.eventDiv_.style.marginTop = -anchor.y + "px";
    };

    /**
     * Sets the position of the label. The z-index is also updated, if necessary.
     * @private
     */
    uitk.map.HtmlMarker.prototype.setPosition = function (yOffset, projection) {
        var position = projection.fromLatLngToDivPixel(this.getPosition());
        if (typeof yOffset === "undefined") {
            yOffset = 0;
        }
        this.labelDiv_.style.left = Math.round(position.x) + "px";
        this.labelDiv_.style.top = Math.round(position.y - yOffset) + "px";
        this.eventDiv_.style.left = this.labelDiv_.style.left;
        this.eventDiv_.style.top = this.labelDiv_.style.top;

        this.setZIndex();
    };

    /**
     * Sets the z-index of the label. If the marker's z-index property has not been defined, the z-index
     * of the label is set to the vertical coordinate of the label. This is in keeping with the default
     * stacking order for Google Maps: markers to the south are in front of markers to the north.
     * @private
     */
    uitk.map.HtmlMarker.prototype.setZIndex = function () {
        var zAdjust = +1;
        if (typeof this.zIndex === "undefined") {
            this.labelDiv_.style.zIndex = parseInt(this.labelDiv_.style.top, 10) + zAdjust;
            this.eventDiv_.style.zIndex = this.labelDiv_.style.zIndex;
        } else {
            this.labelDiv_.style.zIndex = this.zIndex + zAdjust;
            this.eventDiv_.style.zIndex = this.labelDiv_.style.zIndex;
        }
    };

    uitk.map.HtmlMarker.prototype.setMap = function (map) {
        // do nothing - stub to be able to use it along other marker implementations
        // normally this method adds/removes marker from a map
    };

    /**
     * Indicates that this marker is not a true {google.maps.Marker} implementation
     */
    uitk.map.HtmlMarker.prototype.isHtmlMarker = true;

    /**
     * A map overlay ({google.maps.OverlayView}) that can manage multiple collections of uitk.map.HtmlMarker.
     * Controls adding/removing markers to/from map and positioning on zoom in/out.
     * Provides a faster way of adding a lot of markers to a map comparing to conventional google.map.Marker.
     */
    uitk.map.MapOverlay = function (options) {
        var that = this;
        that.setValues(options);
        that.markerLayer = $('<div />').addClass('overlay');
        that.markers = [];
        that.updateMarkers(options);
    };

    uitk.map.MapOverlay.prototype = new google.maps.OverlayView;

    /**
     * Appends markers as children of the panes.
     */
    uitk.map.MapOverlay.prototype.onAdd = function () {
        var $pane = $(this.getPanes().overlayImage); // Pane 3
        $pane.append(this.markerLayer);
    };

    /**
     * Removes markers from the DOM.
     */
    uitk.map.MapOverlay.prototype.onRemove = function () {
        this.markerLayer.remove();
    };

    /**
     * Positions markers on the map
     */
    uitk.map.MapOverlay.prototype.draw = function () {

        var markers,
            projection,
            that = this,
            projection = that.getProjection();

        if (!projection) {
            return;
        }

        for (var i in that.markers) {
            if (Array.isArray(that.markers[i])) {
                // dealing with a group
                markers = that.markers[i];
                for (j = 0; j < markers.length; j++) {
                    markers[j].draw(projection);
                }
            } else if (that.markers[i]) {
                // dealing with an individual marker
                that.markers[i].draw(projection);
            }
        }
    };

    /**
     * Removes markers of a given group from overlay, or removes all markers if no group is specified
     */
    uitk.map.MapOverlay.prototype.removeMarkers = function (markersId) {
        var that = this,
            overlay;

        if (markersId) {
            overlay = that.findOverlay(markersId);
            if (overlay) {
                overlay.remove();
            }
            that.markers[markersId] = null;
        } else {
            that.markers = [];
            that.markerLayer.children().remove();
        }
    };

    /**
     * Accepts an array of {uitk.map.HtmlMarker} and adds them to a marker group identified by markersId
     * @param options
     */
    uitk.map.MapOverlay.prototype.updateMarkers = function (options) {
        var that = this,
            fragment = document.createDocumentFragment(),
            markers,
            existingOverlay,
            overlay;

        if (options.markersId) {
            that.markers[options.markersId] = that.markers[options.markersId] || [];
            markers = that.markers[options.markersId];
        } else {
            markers = that.markers;
        }

        $.each(options.markers, function (i, marker) {
            if (!marker.isHtmlMarker) {
                return;
            }
            markers.push(marker);
            marker.addTo(fragment, fragment); // add new pins to fragment
        });

        if (options.markersId) {
            existingOverlay = that.findOverlay(options.markersId);
            overlay = existingOverlay || $('<div />').data('markerId', options.markersId);
            overlay.append(fragment);
            if (!existingOverlay) {
                that.markerLayer.append(overlay);
            }
        } else {
            that.markerLayer.append(fragment);
        }
        that.draw();
    };

    /**
     * Returns overlay DOM object for a given marker group
     * @param markersId
     * @returns Jquery overlay object
     * @private
     */
    uitk.map.MapOverlay.prototype.findOverlay = function (markersId) {
        var that = this;
        var overlays = that.markerLayer.children().filter(
            function () {
                return $(this).data("markerId") == markersId;
            });
        return overlays && overlays.length > 0 ? $(overlays[0]) : undefined;
    };
};

//uitk.map.initPlugin(); //TODO this shouldn't have to be done here

// the semi-colon before function invocation is a safety net against concatenated
// scripts and/or other plugins which may not be closed properly.
;
(function($, window, uitk, undefined) {
    'use strict';
    // Check only once for fallback (no capture phase in browser)
    var needsPolling = !!!document.removeEventListener && !!document.activeElement,
    // Poller class for polling activeElement change functionality
        FocusPoller = function() {
            var currentActiveElement = '', intervalHandle = -1, polling = false, initialized = false, onFocus = function() {
            };
            // Polls for active element change, necessary for browsers that don't support the capture event phase
            function poll() {
                intervalHandle = setTimeout(function() {
                    try {
                        if (currentActiveElement != document.activeElement) {
                            onFocus && onFocus.apply();
                        }
                        polling && poll();
                    } catch (e) {
                    }
                }, 1);
            }
            // starts the polling, returns if not initialized
            function start() {
                if (!initialized || polling) {
                    return;
                }
                stop();
                polling = true;
                poll();
            }
            // stops the polling
            function stop() {
                if (!initialized) {
                    return;
                }
                polling = false;
                clearTimeout(intervalHandle);
            }
            // initializes the polling
            function init(onFocusChange) {
                onFocus = onFocusChange || function() {
                };
                initialized = true;
            }
            // uninitializes the polling
            function uninit() {
                onFocus = null;
                initialized = false;
            }
            // yahoo module pattern, provide access modifiers in javascript
            // http://www.yuiblog.com/blog/2007/06/12/module-pattern/
            return {
                start : start,
                stop : stop,
                init : init,
                uninit : uninit,
                initialized : function() {
                    return initialized;
                }
            };
        };
    // Focus Facade class
    var Focus = function() {
        var poller = FocusPoller(),
        // default focus context to body element
            focusContextSelector = 'body';

        // Sets the selector that the module uses to set focus management context
        function setFocusContextSelector(value) {
            focusContextSelector = value;
        }
        // returns the pubsub topic name
        function focusEvent() {
            return 'uitk.focusCapture';
        }
        // constrains focus to the element defined by the focusContextSelector. Meant to be called when focus event is captured
        // and determined necessary
        function focus() {
            var focusable = uitk.utils
                .focusableElements($(focusContextSelector)), focusedElement = '';
            if (!uitk.utils.keyIsDown(16)) { // shift
                focusedElement = focusable.first();
            } else {
                focusedElement = focusable.last();
            }
            if (focusedElement) {
                uitk.utils.focusElement($(focusedElement));
            }
        }
        // sets initial focus to the first heading element within the element defined by the focusContextSelector
        function firstFocus() {
            uitk.utils.focusElement($('h1,h2,h3,h4,h5,h6',
                $(focusContextSelector)).first());
            poller.initialized() && poller.start();
        }
        // sets focus to the passed in element defined by resetFocusTo or window if resetFocusTo not defined
        function blur(resetFocusTo) {
            if (!!resetFocusTo) {
                uitk.utils.focusElement(resetFocusTo);
            } else {
                window.focus();
            }
            poller.initialized() && poller.stop();
        }
        // @private event handler for when focus changes, called either by poller when activeElement changes, or by the browser
        // on focus capture event. Publishes focus topic. isContainedInContext flags whether the associated element
        // is contained within the focus context defined by the focusContextSelector.
        function onFocusCapture(e) {
            var focused = document.activeElement || e.target, container = $(focusContextSelector)[0];

            uitk.publish(focusEvent(), {
                focused : focused,
                isContainedInContext : !!container && $.contains(container, focused) || false
            });
        }
        // enables focus management
        function enable() {
            if (needsPolling) {
                // in IE, we need to poll for focus changes. Poller starts and
                // stops with map opening/closing
                poller.init(onFocusCapture);
            } else {
                document.addEventListener('focus', onFocusCapture, true);
            }
        }
        // disables focus management
        function disable() {
            if (needsPolling) {
                poller.uninit();
            } else {
                document.removeEventListener('focus', onFocusCapture, true);
            }
        }
        // yahoo module pattern, provide access modifiers in javascript
        // http://www.yuiblog.com/blog/2007/06/12/module-pattern/
        return {
            focus : focus,
            firstFocus : firstFocus,
            blur : blur,
            enable : enable,
            disable : disable,
            focusEvent : focusEvent,
            setFocusContextSelector : setFocusContextSelector
        };
    };
    // create focus Facade
    uitk.createFocus = function() {
        return Focus();
    };
}(jQuery, window, uitk));
;(function($){
    $.fn.ticker = function (finalAmount) {
        if (isNaN(finalAmount)) {return this;}

        this.amount = parseFloat($(this).data('amount'));

        $(this).animate({amount: parseFloat(finalAmount)},{
            duration: 600,
            easing: 'linear',
            step: function(){
                $(this).data('amount', this.amount).text(uitk.i18n.currency(this.amount));
            },
            complete: function(){
                $(this).data('amount', this.amount).text(uitk.i18n.currency(this.amount));
            }
        });
    }
})(jQuery);

(function () {
    var pluginName = "uitk_checkoutBar";

    /* CONSTRUCTOR */
    function CheckoutBar(element, jsOptions) {
        uitk.utils.newModule.call(this, element, jsOptions);
    }

    CheckoutBar.prototype = {

        constructor: CheckoutBar,

        init: function () {
            this.$total = $('#checkout-bar-total');
            this.$saveBtn = $('#checkout-bar-save');
            this.$confirmBtn = $('#checkout-bar-confirm');

            // User events
            this.$saveBtn.on('click', $.proxy(this.save, this));
            this.$confirmBtn.on('click', $.proxy(this.confirm, this));

            // Listens for price changes
            uitk.subscribe('checkoutbar.update', this, this.update)
        },

        save: function() {
            uitk.publish('checkoutbar.save', {});
        },

        confirm: function () {
            uitk.publish('checkoutbar.confirm', {});
        },

        update: function(topic, data) {
            this.$total.ticker(data.amount);
        }

    };

    /* JQUERY PLUGIN DEFINITION */
    uitk.utils.initPlugin(pluginName, CheckoutBar);
    // Expose object for testing
    uitk.modules.CheckoutBar = CheckoutBar;

    // init on page load
    $('[data-control=checkout-bar]')[pluginName]();

})();
;
(function () {

    'use strict';

    var pluginName = "uitk_searchBar",
        $document = $(document),
        defaults = {},
        clickEvent = uitk.clickEvent + '.' + pluginName;

    /* CONSTRUCTOR */
    function SearchBar(element, jsOptions) {
        uitk.utils.newModule.call(this, element, jsOptions);
    }

    SearchBar.prototype = {

        constructor: SearchBar,

        init: function () {
            this.$searchBarDisplay = $('#search-bar-display');
            this.$primaryContent = $('#search-bar-content-primary');
            this.$secondaryContent = $('#search-bar-content-secondary');
            this.$tertiaryContent = $('#search-bar-content-tertiary');
            this.$searchBarEdit = $('#search-bar-edit');
            this.$changeSearchBtn = $('#search-bar-change-search');

            // User click change search
            this.$changeSearchBtn.on(clickEvent, $.proxy(this.edit, this));
            // User click anywhere else but search bar
            $document.on(clickEvent, $.proxy(this.cancel, this));

            // Listen for search bar update
            uitk.subscribe('searchbar.update', this, this.update);
        },

        edit: function() {
            // Click on change search button will trigger edit
            this.openEditView();
        },

        update: function(topic, data) {
            // When data key is not specified or empty object then the content will remain the same.
            // When data value is empty string then the content will be removed.
            // When data value is provided then the content will be replaced by the new value.

            if((data.primary && typeof data.primary == "string") || typeof data.primary == "string") {
                this.$primaryContent.html(data.primary);
            }

            if((data.secondary && typeof data.secondary == "string") || typeof data.secondary == "string" ) {
                this.$secondaryContent.html(data.secondary);
            }

            if((data.tertiary && typeof data.tertiary == "string") || typeof data.tertiary == "string") {
                this.$tertiaryContent.html(data.tertiary);
            }

            this.closeEditView();
        },

        cancel: function(e) {
            // Click outside of search bar or outside of a tooltip will trigger cancel
            var $target = $(e.target).closest('[data-control="search-bar"]').length || $(e.target).closest(".uitk-tooltip").length;

            if(!$target) {
                uitk.publish('searchbar.cancel', {});
                this.closeEditView();
            }
        },

       openEditView: function() {
           this.$searchBarEdit.removeClass('hidden');
           this.$searchBarDisplay.addClass('hidden');
        },

        closeEditView: function() {
            this.$searchBarEdit.addClass('hidden');
            this.$searchBarDisplay.removeClass('hidden');
        }
    };

    /* JQUERY PLUGIN DEFINITION */
    uitk.utils.initPlugin(pluginName, SearchBar);
    // Expose object for testing
    uitk.modules.SearchBar = SearchBar;

    // init on page load
    $('[data-control="search-bar"]')[pluginName]();

})();
 ;
(function ($, window, undefined) {
    'use strict';

    // Create the defaults once
    var pluginName = 'uitk_table',
        $body = $('body'),
        defaults = {},
        clickEvent = uitk.clickEvent + '.' + pluginName,
        msgContainerTemplate =  '<tr class="table-msg-container"><td></td></tr>',
        loaderTemplate = '<span class="loader loader-dark loader-secondary loading"></span>',
        noMoreResultTemplate = '<p>No more results.</p>',
        tryAgainTemplate = '<p>Failed to load results. <span class="table-try-again">Try Again</span>?</p>';

    /* CONSTRUCTOR */
    function Table (element, jsOptions) {
        var newOptions;

        this.element = $(element);

        jsOptions = jsOptions || {};
        newOptions = this.element.data() || {};

        this.options = $.extend({}, defaults, newOptions, jsOptions);

        this.init();
    }

    Table.prototype = {

        constructor: Table,

        init: function () {
            var $currentTable = this.element,
                $nextSibling = $currentTable.next(),
                $parent = $currentTable.parent(),
                $tableRows = $currentTable.find('tr'),
                $tableHeadings = $tableRows.eq(0).find('th'),
                t,
                numberOfTableRows = $tableRows.length,
                headings = [];

            $currentTable.detach();

            if($currentTable.data('tableInit')){
                return;
            }

            $currentTable.data('tableInit', true);

            $tableHeadings.each(function(){
                headings.push($(this).text());
            });

            for(t = 0; t < numberOfTableRows; t++){

                var $currentRow = $tableRows.eq(t),
                    $tableCells = $currentRow.find('td'),
                    c,
                    numberOfTableCells = $tableCells.length;

                for(c = 0; c < numberOfTableCells; c++){
                    var $currentCell = $tableCells.eq(c);
                    $currentCell.attr("data-title", headings[c])
                }
            }

            if($nextSibling.length > 0){
                $currentTable.insertBefore($nextSibling);
            } else {
                $currentTable.appendTo($parent);
            }

            if($('html').hasClass('ie9') && $('table.data-table').hasClass('no-collapse')){
                $('table.data-table').wrap('<div class="data-table-wrapper" />');
            }
        },

        sort: function ($column) {
            var data = {tablebody: this.element.find('tbody'), attribute: $column.data('attribute')};
            // Column is going from ascending to descending
            if ($column.hasClass('asc')) {
                $column.siblings().removeClass('asc dsc');
                $column.removeClass('asc').addClass('dsc');
                data.ascending = false;
                data.descending = true;
            } else {
                // Column has yet to be sorted or is descending, sort ascending
                $column.siblings().removeClass('asc dsc');
                $column.removeClass('dsc').addClass('asc');
                data.ascending = true;
                data.descending = false;
            }

            uitk.publish('tables.sort', data);
        },

        addLoadMsg: function ($table, loadState) {
            var hasMsgContainer = $table.find('.table-msg-container').length,
                tableColsCount = $table.find('tr th').length,
                $msgContainer = $(msgContainerTemplate);

                $msgContainer.children('td').attr('colspan', tableColsCount);

            if(hasMsgContainer) {
                if (loadState == 'finish') {
                    $table.find('.table-msg-container td').html(noMoreResultTemplate);
                } else if (loadState == 'error') {
                    $table.find('.table-msg-container td').html(tryAgainTemplate);
                } else if (loadState == 'loading') {
                    $table.find('.table-msg-container td').html(loaderTemplate);
                }
            } else {
                $table.append($msgContainer);
                $table.find('.table-msg-container td').html(loaderTemplate);
                uitk.publish('tables.loadMore', $table);
            }
        },

        removeLoadMsg: function ($table) {
                var hasLoader = $table.find('.table-msg-container');

                hasLoader.remove();
        },

        appendTableData: function ($table, data) {
            var tdItems = data.tableData,
                loaderState = data.tableResultStatus;

            if(tdItems) {
                this.removeLoadMsg($table);
                $table.find('tbody').append(tdItems);
            } else  {
                this.addLoadMsg ($table, loaderState);
            }
        }
    };

    /* JQUERY PLUGIN DEFINITION */
    uitk.utils.initPlugin(pluginName, Table);

    // INITIALISE TABLES
    // For tables that are present on page load
    function initTable() {
        $('[data-control=table]')[pluginName]();
    }

    initTable();

    uitk.initResponsiveTables = initTable;

    // Expose object so it can be tested
    uitk.modules.Table = Table;

    // PUBSUB LISTENERS
    uitk.subscribe('tables.loadFinish', function(topic, data) {
        var $currentTable = data.tableElem;

        $currentTable[pluginName]('appendTableData', $currentTable, data);
    });

    // EVENT LISTENERS
    // Sortable column.
    $body.on(clickEvent, '.table-sortable', function () {
        var $table = $(this).closest('[data-control=table]');

        $table[pluginName]('sort', $(this));
    });

    $body.on(clickEvent, '.table-try-again', function () {
        var $table = $(this).closest('[data-control=table]');

        $table[pluginName]('addLoadMsg', $table, 'loading');
        uitk.publish('tables.loadMore', $table);
    });

    $('.data-table-lazyload').on('scroll', function() {
        var $this = $(this),
            $table = $(this).find('.data-table'),
            innerHeight = $this.innerHeight(),
            scrollTop = $this.scrollTop(),
            scrollHeight = $this[0].scrollHeight;

        if(scrollTop + innerHeight >= scrollHeight) {
            $table[pluginName]('addLoadMsg', $table);
        }
    });

}(jQuery, window));

(function() {
    var defaultTemplate= '<div class="interstitial-message-content"><span class="loader loading"></span></div>',
        messageTemplate = '<div class="interstitial-message-content">',
        adSpaceTemplate= '<div class="interstitial-ad-space"></div>';

    function changed(topic, options) {
        var $container = $('#' + options.contentId);
        var $interstitial = $container.find('.interstitial');

        // Create an Interstitial
        if (!$interstitial.length) {
            var content = options.adSpace ? defaultTemplate + adSpaceTemplate : defaultTemplate;
            $interstitial = $(Handlebars.templates['partials/uitk/interstitial']({content: content}));
            $container.addClass('interstitial-results').append($interstitial);

            // Fade in the Interstitial
            setTimeout(function(){ $interstitial.addClass('fade-in'); }, 100);

            // Fallback for browsers that don't support fixed positioning
            if (!Modernizr.positionfixed) {
                function setPosition() {
                    // setting height from top to 90px and converting to ems
                    var findPos = ($(document).scrollTop() + 90) / 15 + 'em';   // BaseFontPx is 15px
                    $interstitial.css({position: 'absolute', top: findPos});
                }
                setPosition();

                // Reposition when user scrolls
                uitk.subscribe('debounced.scroll', setPosition);
            }
        }
        // Update the Interstitial
        else if ($interstitial && options.replaceMsg) {
            var content = options.adSpace ? messageTemplate + options.replaceMsg + '</div>'+ adSpaceTemplate : messageTemplate + options.replaceMsg + '</div>';
            $interstitial.find('.interstitial-message').html(content);
        }
    }

    function complete(topic, options) {
        var $container = $('#' + options.contentId);
        var $interstitial = $container.find('.interstitial');

        if ($interstitial) {
            if (Modernizr.csstransitions) {
                $interstitial.one(uitk.topics.transitionEnd, function() {
                    $interstitial.remove();
                });
                $interstitial.removeClass('fade-in');
            } else {
                $interstitial.remove();
            }

            if (!Modernizr.positionfixed) uitk.unsubscribe('debounced.scroll');
        }
    }

    // Subscribe to results changing
    uitk.subscribe('interstitial.changed', changed);

    // Subscribe to results to complete and remove the modal
    uitk.subscribe('interstitial.complete', complete);
    
})();
/*
 *  Project: UI Toolkit Alert Plugin
 *  Description: jQuery Alert Plugin for use in the Egencia.com UI Toolkit
 *  Author: a-echen@expedia.com
 */

// the semi-colon before function invocation is a safety net against concatenated
// scripts and/or other plugins which may not be closed properly.
;
(function ($, window, undefined) {

    'use strict';

    // Create the defaults once
    var pluginName = 'uitk_alert',
        $body = $('body'),
        defaults = {},
        clickEvent = uitk.clickEvent + '.' + pluginName,
        hasTransitions = Modernizr.csstransitions;

    /* CONSTRUCTOR */
    function Alert(element, jsOptions) {
        uitk.utils.newModule.call(this, element, jsOptions, defaults);
    }

    Alert.prototype = {

        constructor: Alert,

        init: function () {
            var that = this,
                timeOut,
                $element = this.element;

            // Remove the element with a dismiss time, default 6000ms
            if (typeof(this.options.dismiss) === 'boolean' && this.options.dismiss == true) {
                timeOut = 4000;

                setTimeout(function () {
                    that.remove($element);
                }, timeOut);
            } else if (typeof(this.options.dismiss) === 'number') {
                timeOut = this.options.dismiss * 1000;

                setTimeout(function () {
                    that.remove($element);
                }, timeOut);
            }
        },

        remove: function ($target) {
            var that = this;

            if(!hasTransitions) {
                this.element.remove();
                uitk.publish('alert.remove', $target);
            } else {
                // Set up animation
                this.element.addClass('remove-animated animated-fade');

                // Once animation has completed remove object from dom
                this.element.one(uitk.topics.transitionEnd, function () {
                    that.element.remove();
                    uitk.publish('alert.remove', $target)
                });
            }
        }
    };

    /* JQUERY PLUGIN DEFINITION */
    uitk.utils.initPlugin(pluginName, Alert);

    // INITIALISE ALERTS
    // for alerts that are present on page load
    var initAlert = function () {
        $('[data-control=alert]')[pluginName]();
    };

    initAlert();

    // Expose initAlert function for dynamic client-side rendering.
    uitk.initAlert = initAlert;

    // Close button
    $body.on(clickEvent, '.alert-remove', function (e) {
        var $target = $(this).closest('[data-control="alert"]');

        e.preventDefault();
        $target[pluginName]('remove', $target);
    });

    // Expose object so it can be tested more easily
    uitk.modules.Alert = Alert;

}(jQuery, window));
;(function ($, window, undefined) {

    'use strict';

    // Create the defaults once
    var pluginName = 'uitk_tag',
        $delegate = $('body'),
        defaults = {
            type: null,
            value: null
        },
        clickEvent = uitk.clickEvent + '.' + pluginName,
        hasTransitions = Modernizr.csstransitions;

    /* CONSTRUCTOR */
    function Tag(element, jsOptions) {
        uitk.utils.newModule.call(this, element, jsOptions, defaults);
    }

    Tag.prototype = {

        constructor: Tag,

        remove: function(nofade) {
            var data,
                that = this,
                $element = $(this.element),
                $tagGroup = this.element.parent('.tag-group');

            data = {
                id: $element.attr('id') || null,
                groupId:  $tagGroup.data('groupId') || null, // 'data-group-id' is only used by UITK components, apps use regular id attr
                type: this.options.type,
                value: this.options.value
            };

            if (nofade || !hasTransitions) {
                this.element.remove();
                uitk.publish('tag.remove', data);
            } else {
                // Set up animation
                this.element.addClass('remove-animated animated-fade');

                // Once animation has completed remove object from dom
                this.element.one(uitk.topics.transitionEnd, function() {
                    that.element.remove();
                    uitk.publish('tag.remove', data);
                });
            }
        }
    };

    /* JQUERY PLUGIN DEFINITION */
    uitk.utils.initPlugin(pluginName, Tag);

    // Remove button
    $delegate.on(clickEvent, '.tag-remove', function (e) {
        $(this).closest('.tag')[pluginName]('remove');
    });

    // Expose object so it can be tested
    uitk.modules.Tag = Tag;

}(jQuery, window));
/*!
 * Stickyfill -- `position: sticky` polyfill
 * v. 1.1.4 | https://github.com/wilddeer/stickyfill
 * Copyright Oleg Korsunsky | http://wd.dizaina.net/
 *
 * MIT License
 */
(function(doc, win) {
    var watchArray = [],
        scroll,
        initialized = false,
        html = doc.documentElement,
        noop = function() {},
        checkTimer,

    //visibility API strings
        hiddenPropertyName = 'hidden',
        visibilityChangeEventName = 'visibilitychange';

    //fallback to prefixed names in old webkit browsers
    if (doc.webkitHidden !== undefined) {
        hiddenPropertyName = 'webkitHidden';
        visibilityChangeEventName = 'webkitvisibilitychange';
    }

    //test getComputedStyle
    if (!win.getComputedStyle) {
        seppuku();
    }

    //test for native support
    var prefixes = ['', '-webkit-', '-moz-', '-ms-'],
        block = document.createElement('div');

    for (var i = prefixes.length - 1; i >= 0; i--) {
        try {
            block.style.position = prefixes[i] + 'sticky';
        }
        catch(e) {}
        if (block.style.position != '') {
            seppuku();
        }
    }

    updateScrollPos();

    //commit seppuku!
    function seppuku() {
        init = add = rebuild = pause = stop = kill = noop;
    }

    function mergeObjects(targetObj, sourceObject) {
        for (var key in sourceObject) {
            if (sourceObject.hasOwnProperty(key)) {
                targetObj[key] = sourceObject[key];
            }
        }
    }

    function parseNumeric(val) {
        return parseFloat(val) || 0;
    }

    function updateScrollPos() {
        scroll = {
            top: win.pageYOffset,
            left: win.pageXOffset
        };
    }

    function onScroll() {
        if (win.pageXOffset != scroll.left) {
            updateScrollPos();
            rebuild();
            return;
        }

        if (win.pageYOffset != scroll.top) {
            updateScrollPos();
            recalcAllPos();
        }
    }

    //fixes flickering
    function onWheel(event) {
        setTimeout(function() {
            if (win.pageYOffset != scroll.top) {
                scroll.top = win.pageYOffset;
                recalcAllPos();
            }
        }, 0);
    }

    function recalcAllPos() {
        for (var i = watchArray.length - 1; i >= 0; i--) {
            recalcElementPos(watchArray[i]);
        }
    }

    function recalcElementPos(el) {
        if (!el.inited) return;

        var currentMode = (scroll.top <= el.limit.start? 0: scroll.top >= el.limit.end? 2: 1);

        if (el.mode != currentMode) {
            switchElementMode(el, currentMode);
        }
    }

    //checks whether stickies start or stop positions have changed
    function fastCheck() {
        for (var i = watchArray.length - 1; i >= 0; i--) {
            if (!watchArray[i].inited) continue;

            var deltaTop = Math.abs(getDocOffsetTop(watchArray[i].clone) - watchArray[i].docOffsetTop),
                deltaHeight = Math.abs(watchArray[i].parent.node.offsetHeight - watchArray[i].parent.height);

            if (deltaTop >= 2 || deltaHeight >= 2) return false;
        }
        return true;
    }

    function initElement(el) {
        if (isNaN(parseFloat(el.computed.top)) || el.isCell || el.computed.display == 'none') return;

        el.inited = true;

        if (!el.clone) clone(el);
        if (el.parent.computed.position != 'absolute' &&
            el.parent.computed.position != 'relative') el.parent.node.style.position = 'relative';

        recalcElementPos(el);

        el.parent.height = el.parent.node.offsetHeight;
        el.docOffsetTop = getDocOffsetTop(el.clone);
    }

    function deinitElement(el) {
        var deinitParent = true;

        el.clone && killClone(el);
        mergeObjects(el.node.style, el.css);

        //check whether element's parent is used by other stickies
        for (var i = watchArray.length - 1; i >= 0; i--) {
            if (watchArray[i].node !== el.node && watchArray[i].parent.node === el.parent.node) {
                deinitParent = false;
                break;
            }
        };

        if (deinitParent) el.parent.node.style.position = el.parent.css.position;
        el.mode = -1;
    }

    function initAll() {
        for (var i = watchArray.length - 1; i >= 0; i--) {
            initElement(watchArray[i]);
        }
    }

    function deinitAll() {
        for (var i = watchArray.length - 1; i >= 0; i--) {
            deinitElement(watchArray[i]);
        }
    }

    function switchElementMode(el, mode) {
        var nodeStyle = el.node.style;

        switch (mode) {
            case 0:
                nodeStyle.position = 'absolute';
                nodeStyle.left = el.offset.left + 'px';
                nodeStyle.right = el.offset.right + 'px';
                nodeStyle.top = el.offset.top + 'px';
                nodeStyle.bottom = 'auto';
                nodeStyle.width = 'auto';
                nodeStyle.marginLeft = 0;
                nodeStyle.marginRight = 0;
                nodeStyle.marginTop = 0;
                break;

            case 1:
                nodeStyle.position = 'fixed';
                nodeStyle.left = el.box.left + 'px';
                nodeStyle.right = el.box.right + 'px';
                nodeStyle.top = el.css.top;
                nodeStyle.bottom = 'auto';
                nodeStyle.width = 'auto';
                nodeStyle.marginLeft = 0;
                nodeStyle.marginRight = 0;
                nodeStyle.marginTop = 0;
                break;

            case 2:
                nodeStyle.position = 'absolute';
                nodeStyle.left = el.offset.left + 'px';
                nodeStyle.right = el.offset.right + 'px';
                nodeStyle.top = 'auto';
                nodeStyle.bottom = 0;
                nodeStyle.width = 'auto';
                nodeStyle.marginLeft = 0;
                nodeStyle.marginRight = 0;
                break;
        }

        el.mode = mode;
    }

    function clone(el) {
        el.clone = document.createElement('div');

        var refElement = el.node.nextSibling || el.node,
            cloneStyle = el.clone.style;

        cloneStyle.height = el.height + 'px';
        cloneStyle.width = el.width + 'px';
        cloneStyle.marginTop = el.computed.marginTop;
        cloneStyle.marginBottom = el.computed.marginBottom;
        cloneStyle.marginLeft = el.computed.marginLeft;
        cloneStyle.marginRight = el.computed.marginRight;
        cloneStyle.padding = cloneStyle.border = cloneStyle.borderSpacing = 0;
        cloneStyle.fontSize = '1em';
        cloneStyle.position = 'static';
        cloneStyle.cssFloat = el.computed.cssFloat;

        el.node.parentNode.insertBefore(el.clone, refElement);
    }

    function killClone(el) {
        el.clone.parentNode.removeChild(el.clone);
        el.clone = undefined;
    }

    function getElementParams(node) {
        var computedStyle = getComputedStyle(node),
            parentNode = node.parentNode,
            parentComputedStyle = getComputedStyle(parentNode),
            cachedPosition = node.style.position;

        node.style.position = 'relative';

        var computed = {
                top: computedStyle.top,
                marginTop: computedStyle.marginTop,
                marginBottom: computedStyle.marginBottom,
                marginLeft: computedStyle.marginLeft,
                marginRight: computedStyle.marginRight,
                cssFloat: computedStyle.cssFloat,
                display: computedStyle.display
            },
            numeric = {
                top: parseNumeric(computedStyle.top),
                marginBottom: parseNumeric(computedStyle.marginBottom),
                paddingLeft: parseNumeric(computedStyle.paddingLeft),
                paddingRight: parseNumeric(computedStyle.paddingRight),
                borderLeftWidth: parseNumeric(computedStyle.borderLeftWidth),
                borderRightWidth: parseNumeric(computedStyle.borderRightWidth)
            };

        node.style.position = cachedPosition;

        var css = {
                position: node.style.position,
                top: node.style.top,
                bottom: node.style.bottom,
                left: node.style.left,
                right: node.style.right,
                width: node.style.width,
                marginTop: node.style.marginTop,
                marginLeft: node.style.marginLeft,
                marginRight: node.style.marginRight
            },
            nodeOffset = getElementOffset(node),
            parentOffset = getElementOffset(parentNode),

            parent = {
                node: parentNode,
                css: {
                    position: parentNode.style.position
                },
                computed: {
                    position: parentComputedStyle.position
                },
                numeric: {
                    borderLeftWidth: parseNumeric(parentComputedStyle.borderLeftWidth),
                    borderRightWidth: parseNumeric(parentComputedStyle.borderRightWidth),
                    borderTopWidth: parseNumeric(parentComputedStyle.borderTopWidth),
                    borderBottomWidth: parseNumeric(parentComputedStyle.borderBottomWidth)
                }
            },

            el = {
                node: node,
                box: {
                    left: nodeOffset.win.left,
                    right: html.clientWidth - nodeOffset.win.right
                },
                offset: {
                    top: nodeOffset.win.top - parentOffset.win.top - parent.numeric.borderTopWidth,
                    left: nodeOffset.win.left - parentOffset.win.left - parent.numeric.borderLeftWidth,
                    right: -nodeOffset.win.right + parentOffset.win.right - parent.numeric.borderRightWidth
                },
                css: css,
                isCell: computedStyle.display == 'table-cell',
                computed: computed,
                numeric: numeric,
                width: nodeOffset.win.right - nodeOffset.win.left,
                height: nodeOffset.win.bottom - nodeOffset.win.top,
                mode: -1,
                inited: false,
                parent: parent,
                limit: {
                    start: nodeOffset.doc.top - numeric.top,
                    end: parentOffset.doc.top + parentNode.offsetHeight - parent.numeric.borderBottomWidth -
                    node.offsetHeight - numeric.top - numeric.marginBottom
                }
            };

        return el;
    }

    function getDocOffsetTop(node) {
        var docOffsetTop = 0;

        while (node) {
            docOffsetTop += node.offsetTop;
            node = node.offsetParent;
        }

        return docOffsetTop;
    }

    function getElementOffset(node) {
        var box = node.getBoundingClientRect();

        return {
            doc: {
                top: box.top + win.pageYOffset,
                left: box.left + win.pageXOffset
            },
            win: box
        };
    }

    function startFastCheckTimer() {
        checkTimer = setInterval(function() {
            !fastCheck() && rebuild();
        }, 500);
    }

    function stopFastCheckTimer() {
        clearInterval(checkTimer);
    }

    function handlePageVisibilityChange() {
        if (!initialized) return;

        if (document[hiddenPropertyName]) {
            stopFastCheckTimer();
        }
        else {
            startFastCheckTimer();
        }
    }

    function init() {
        if (initialized) return;

        updateScrollPos();
        initAll();

        win.addEventListener('scroll', onScroll);
        win.addEventListener('wheel', onWheel);

        //watch for width changes
        win.addEventListener('resize', rebuild);
        win.addEventListener('orientationchange', rebuild);

        //watch for page visibility
        doc.addEventListener(visibilityChangeEventName, handlePageVisibilityChange);

        startFastCheckTimer();

        initialized = true;
    }

    function rebuild() {
        if (!initialized) return;

        deinitAll();

        for (var i = watchArray.length - 1; i >= 0; i--) {
            watchArray[i] = getElementParams(watchArray[i].node);
        }

        initAll();
    }

    function pause() {
        win.removeEventListener('scroll', onScroll);
        win.removeEventListener('wheel', onWheel);
        win.removeEventListener('resize', rebuild);
        win.removeEventListener('orientationchange', rebuild);
        doc.removeEventListener(visibilityChangeEventName, handlePageVisibilityChange);

        stopFastCheckTimer();

        initialized = false;
    }

    function stop() {
        pause();
        deinitAll();
    }

    function kill() {
        stop();

        //empty the array without loosing the references,
        //the most performant method according to http://jsperf.com/empty-javascript-array
        while (watchArray.length) {
            watchArray.pop();
        }
    }

    function add(node) {
        //check if Stickyfill is already applied to the node
        for (var i = watchArray.length - 1; i >= 0; i--) {
            if (watchArray[i].node === node) return;
        };

        var el = getElementParams(node);

        watchArray.push(el);

        if (!initialized) {
            init();
        }
        else {
            initElement(el);
        }
    }

    function remove(node) {
        for (var i = watchArray.length - 1; i >= 0; i--) {
            if (watchArray[i].node === node) {
                deinitElement(watchArray[i]);
                watchArray.splice(i, 1);
            }
        };
    }

    //expose Stickyfill
    win.Stickyfill = {
        stickies: watchArray,
        add: add,
        remove: remove,
        init: init,
        rebuild: rebuild,
        pause: pause,
        stop: stop,
        kill: kill
    };
})(document, window);


//if jQuery is available -- create a plugin
if (window.jQuery) {
    (function($) {
        $.fn.Stickyfill = function(options) {
            this.each(function() {
                Stickyfill.add(this);
            });

            return this;
        };
    })(window.jQuery);
}
;
(function ($, window, undefined) {
    var $progressBar,
        progressTimeout;

    function start (topic, data) {
        var progressBarId = data.progressBarId;

        if(progressBarId) {
            $progressBar = $('#' + progressBarId);
            $progressBar.removeClass('progress-two progress-loaded').addClass('progress-one');
            progressTwo();
        }
    }

    function loaded (topic, data) {
        var progressBarId = data.progressBarId;

        if(progressBarId) {
            $progressBar = $('#' + progressBarId);
            $progressBar.removeClass('progress-one progress-two').addClass('progress-loaded');
            clearTimeout(progressTimeout);
        }
    }

    function cancel (topic, data) {
        var progressBarId = data.progressBarId;

        if(progressBarId) {
            $progressBar = $('#' + progressBarId);
            $progressBar.removeClass('progress-one progress-two progress-loaded');
            clearTimeout(progressTimeout);
        }
    }

    function progressTwo () {
        progressTimeout = setTimeout(function() {
            $progressBar.removeClass('progress-one').addClass('progress-two');
        }, 2000);
    }

    // Subscribe when progress starts
    uitk.subscribe("progress.start", start);
    // Subscribe when progress completes
    uitk.subscribe("progress.loaded", loaded);
    // Subscribe when progress errored out
    uitk.subscribe("progress.cancel", cancel);
}(jQuery, window));

/*
 *  Project: UI Toolkit Filters Plugin
 *  Author: ctse@egencia.com
 */

// the semi-colon before function invocation is a safety net against concatenated
// scripts and/or other plugins which may not be closed properly.
;
(function ($, window, undefined) {

    "use strict";

    // Create the defaults once
    var pluginName = 'uitk_filters',
        $body = $('body'),
        openClass = 'open',
        appliedClass = 'filtered',
        SLIDE_TIME_MS = 400,
        defaults = {
            filtered: false,
            mode: 'live' // 'submit'
        };

    /* CONSTRUCTOR */
    function Filters(element, jsOptions) {
        uitk.utils.newModule.call(this, element, jsOptions, defaults);
    }

    Filters.prototype = {
        init: function () {
            this.filtered = this.options.filtered;
            this.categories = []; // {id: '', filtered: false}

            this.setCategories();

            uitk.subscribe('filters.reset.success', this, this.resetSuccess);
            uitk.subscribe('filters.apply.success', this, this.applySuccess);
            uitk.subscribe('filters.updateContent', this, this.updateContent);
        },

        setCategories: function() {
            var that = this;
            this.element.find('.filter-category').each(function(i, category) {
                var $cat = $(category);
                that.categories[$cat.prop('id')] = ({id: $cat.prop('id'), filtered: $cat.hasClass('filtered')});
            })

        },

        showCategory: function($filterCategory) {
            var $filterContents = this.element.find('.filter-content');
            this.element.addClass(openClass);
            this.element.find('.filter-category').removeClass(openClass);
            $filterContents.addClass('hidden');

            $($.find('[data-content-category-id="'+ $filterCategory.prop('id') +'"]')).removeClass('hidden');

            $filterCategory.addClass(openClass);
            this.element.find('.filter-body').slideDown(SLIDE_TIME_MS);
        },

        close: function(isSecondaryClose) {
            this.element.find('.filter-body').slideUp(SLIDE_TIME_MS);
            this.element.find('.filter-category').removeClass(openClass);
            // Don't publish a uitk msg for cases when the closing is a secondary action as a result of apply or clear buttons
            if (!isSecondaryClose) {
                uitk.publish('filters.close', {
                    id: this.element.id
                });
            }
        },

        reset: function() {
            this.close(true);
            this.filtered = false;
            this.resetCategories();
            uitk.publish('filters.reset', {
                id: this.element.id
            });
        },

        resetSuccess: function(topic, data) {
            this.element.find('.filter-category').removeClass(appliedClass);
            this.element.find('.filter-menu-icon').removeClass(appliedClass);
        },

        resetCategories: function() {
            $.each(this.categories, function(i, category) {
                category.filtered = false;
            });
            this.element.find('.filter-category').removeClass(appliedClass);
        },

        updateCategories: function(categoryIds) {
            var that = this;
            if (categoryIds && categoryIds.length > 0) {
                $.each(categoryIds, function (i, categoryId) {
                    that.categories[categoryId].filtered = true;
                    that.filtered = true;
                    $('#' + categoryId).addClass(appliedClass);
                });
            }
        },

        apply: function() {
            this.close(true);
            uitk.publish('filters.apply', {
                id: this.element.id
            });
        },

        /**
         * Remove the applied class from all filter category headers and the ones that are passed in will contain the applied class.
         * If there were no filters applied, then the applied class on the filter menu icon is turned off.
         * @param topic
         * @param data
         */
        applySuccess: function(topic, data) {
            // Remove the applied class from all categories first
            this.filtered = false;
            this.resetCategories();

            this.updateCategories(data.categoryIds);

            if (this.filtered) {
                this.element.addClass(appliedClass);
            } else {
                this.element.removeClass(appliedClass);
            }
        },

        updateContent: function(topic, data) {
            var categoryContent = data.content;
            var categoryId = data.categoryId;

            if (categoryContent && categoryId) {
                $($.find('[data-content-category-id="'+ categoryId +'"]')).html(categoryContent);
            }
        }
    };

    /* JQUERY PLUGIN DEFINITION */
    uitk.utils.initPlugin(pluginName, Filters);

    // INITIALISE FILTERS
    // This will take in to account any tab state stored in local storage or hash in the URL
    // for tabs that are present on page load
    function initFilters() {
        $('[data-control=filters]')[pluginName]();
    }

    initFilters();

    // Expose init for dynamic client-side rendering
    uitk.initFilters = initFilters;

    //EVENT LISTENERS
    // Show the Filter Category content
    $body.on('click.' + pluginName, '.filter-category', function (e) {
        var $target = $(this).closest('[data-control=filters]');
        $target[pluginName]('showCategory', $(this));
    });

    // Close the Filter content
    $body.on('click.' + pluginName, '.filter-close, .filter-menu-icon', function(e) {
        var $target = $(this).closest('[data-control=filters]');
        $target[pluginName]('close');
    });

    // Reset Filters
    $body.on('click.' + pluginName, '.filter-reset', function(e) {
        var $target = $(this).closest('[data-control=filters]');
        $target[pluginName]('reset');
    });

    // Apply Filters
    $body.on('click.' + pluginName, '.filter-apply', function(e) {
        var $target = $(this).closest('[data-control=filters]');
        $target[pluginName]('apply');
    });

    // Close Filters if anywhere outside of the component is clicked
    $body.on('click.' + pluginName, function(e){
        if ($('[data-control=filters] .filter-category').hasClass(openClass)) {
            if ($(e.target).closest('[data-control="filters"]').length == 0) {
                $('[data-control="filters"]')[pluginName]('close');
            }
        }
    });

}(jQuery, window));

/*
 *  Project: UI Toolkit mobileMenu Plugin
 *  Description: jQuery mobileMenu Plugin for use in the Egencia.com UI Toolkit
 *  Author: a-echen@expedia.com
 */

// the semi-colon before function invocation is a safety net against concatenated
// scripts and/or other plugins which may not be closed properly.
;
(function ($, window, undefined) {
    'use strict';

    // Create the defaults once
    var pluginName = 'uitk_mobileMenu',
        $body = $('body'),
        $page = $('#page'),
        $primaryMenu = $('#primary-nav-mobile'),
        $accountMenu = $('#account-nav-mobile'),
        $panel = $('.nav-panel'),
        $panelItem = $panel.children(),
        defaults = {},
        menuContainer = 'nav',
        btnPrimaryToggleSelector = '#primary-nav-toggle',
        btnAccountToggleSelector = '#account-nav-mobile-toggle',
        hasSubmenuSelector = '.has-submenu',
        hidePanelSelector = '.nav-panel-close',
        visibleClass = 'is-visible',
        showPanelClass = 'show-panel',
        showOffcanvasClass = 'show-offcanvas',
        lockClass = 'is-locked',
        dataMenuId = 'data-menu-id',
        clickEvent = uitk.clickEvent + '.' + pluginName,
        isTouchDevice = uitk.isTouchDevice,
        hasTransitions = Modernizr.csstransitions,
        hasMediaqueries = Modernizr.mediaqueries;


    /* CONSTRUCTOR */
    function MobileMenu(element, jsOptions) {
        uitk.utils.newModule.call(this, element, jsOptions, defaults);
    }

    MobileMenu.prototype = {

        constructor: MobileMenu,

        init: function () {
            this.swipeControl();
        },

        // Open/close the entire mobile menu
        toggle: function () {
            var that = this;

            if ($primaryMenu.hasClass(visibleClass)) {
                $body.removeClass(lockClass);
                this.element.removeClass(visibleClass);

                if (hasTransitions) {
                    that.element.one(uitk.topics.transitionEnd, function(){
                        that.element.removeClass(showPanelClass);
                    });
                } else {
                    that.element.removeClass(showPanelClass);
                }
            }
            else {
                $body.addClass(lockClass);
                this.element.addClass(visibleClass);

                // Close account offcanvas menu if open
                $page.removeClass(showOffcanvasClass);
                $accountMenu.removeClass(showOffcanvasClass);
                $(btnAccountToggleSelector).removeClass(showOffcanvasClass);
            }
        },

        // Slide the menu over to show submenu options
        showPanel: function () {
            var submenuId = this.element.attr(dataMenuId);

            this.element.closest(menuContainer).addClass(showPanelClass);

            // Hide previously selected submenu
            $panelItem.removeClass(visibleClass);

            // Loop through to find corresponding submenu
            $panelItem.each(function() {
                if (submenuId == this.id) {
                    $(this).addClass(visibleClass);
                }
            });
        },

        // Slide the menu back
        hidePanel: function () {
            this.element.closest(menuContainer).removeClass(showPanelClass);
        },

        // Off-canvas menu
        offcanvas: function () {
            if ($accountMenu.hasClass(showOffcanvasClass)) {
                $body
                    .removeClass(lockClass)
                    .removeClass(showOffcanvasClass);
                $accountMenu.removeClass(showOffcanvasClass);
                $(btnAccountToggleSelector).removeClass(showOffcanvasClass);
            }
            else {
                $body
                    .addClass(lockClass)
                    .addClass(showOffcanvasClass);
                $accountMenu.addClass(showOffcanvasClass);
                this.element.addClass(showOffcanvasClass);

                // Close primary menu if open
                $primaryMenu.removeClass(visibleClass + ' ' + showPanelClass);
                $(btnPrimaryToggleSelector).removeClass(visibleClass);
            }
        },

        // Bind swipe gesture to the given element
        // TODO Set this up for any element. Currently only used on $accountMenu element
        swipeControl: function () {
            var gestureHandling;
            var that = this;

            if (isTouchDevice) {
                gestureHandling = new Hammer($accountMenu[0]);

                gestureHandling.on('swipe', function(e) {
                    that.slideEnd();
                });
            }
        },

        // Touch Sliding
        slideEnd: function () {
            this.offcanvas();
        }

    };

    /* JQUERY PLUGIN DEFINITION */
    uitk.utils.initPlugin(pluginName, MobileMenu);

    // Primary menu toggle button
    $body.on(clickEvent, btnPrimaryToggleSelector, function (e) {
        var $target = $(btnPrimaryToggleSelector);

        e.preventDefault();
        $target[pluginName]('toggle');
        $primaryMenu[pluginName]('toggle');
    });

    // Show submenu options
    $body.on(clickEvent, hasSubmenuSelector, function (e) {
        e.preventDefault();
        $(this)[pluginName]('showPanel');
    });

    // Hide submenu options
    $body.on(clickEvent, hidePanelSelector, function (e) {
        var $target = $(hidePanelSelector);

        e.preventDefault();
        $target[pluginName]('hidePanel');
    });

    // Account toggle button
    $body.on(clickEvent, btnAccountToggleSelector, function (e) {
        var $target = $(btnAccountToggleSelector);

        e.preventDefault();
        $target[pluginName]('offcanvas');
    });

    // Expose object so it can be tested more easily
    uitk.modules.mobileMenu = MobileMenu;

}(jQuery, window));
/*
 *  Project: UI Toolkit Character-count Plugin
 *  Description: jQuery Character-count Plugin for use in the Egencia.com UI Toolkit
 *  Author: sasandhu@egencia.com
 */

// the semi-colon before function invocation is a safety net against concatenated
// scripts and/or other plugins which may not be closed properly.

;(function ($, window, undefined) {
    'use strict';

    // Create the defaults once
    var pluginName = 'uitk_characterCount',
        defaults = {};

    /* CONSTRUCTOR */
    function CharacterCount (element, jsOptions) {
    	uitk.utils.newModule.call(this, element, jsOptions, defaults);
    }

    CharacterCount.prototype = {

        constructor: CharacterCount,

        init: function () {
        	this.maxlength = this.element.attr('maxlength') || false;
        	this.warningThreshold=10;
        	this.$counter= $('<span class="character-count"></span>');
        	this.element.parent().append(this.$counter);
            this.calculateCharLength(); 
            this.addEventListener();
            
        },
        // Event listeners
        addEventListener : function(){
        	this.element.on('keyup',$.proxy(this.calculateCharLength,this));
        },
        
        calculateCharLength : function(){
        	var val= this.element.val(),
        	// Returns remaining count when maxlength, otherwise current value count.NOTE: maxlength counts enter are 2 characters
            count = this.maxlength ? this.maxlength -  val.length - (val.match(/\n/g)||[]).length : val.length;
        	this.updateCharacterCount(count);
        },
        updateCharacterCount : function(count){
        	this.$counter.text(count);
        	
        	if(this.maxlength){
        		if(count <= this.warningThreshold){
            		this.$counter.addClass("max-count-reached");
            		if(count == 0){
                		uitk.publish('character-count.maxlengthReached', {element: this.element});
                	}
            	}
            	else{
            		this.$counter.removeClass("max-count-reached");
            	}
        	}
        	
        }
    };

    /* JQUERY PLUGIN DEFINITION */
    uitk.utils.initPlugin(pluginName, CharacterCount);

    // INITIALISE CHARACTER COUNT
    function initCharacterCount() {
        $('[data-control=character-count]')[pluginName]();        
    }

    initCharacterCount();

    uitk.initCharacterCount = initCharacterCount;

    // Expose object so it can be tested
    uitk.modules.CharacterCount = CharacterCount;


}(jQuery, window));
